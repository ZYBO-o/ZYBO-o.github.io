<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>减脂塑性规划</title>
    <url>/2019/10/18/%E5%87%8F%E8%84%82%E5%A1%91%E6%80%A7%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-健身部位与动作"><a href="#一-健身部位与动作" class="headerlink" title="一.健身部位与动作"></a>一.健身部位与动作</h2>]]></content>
      <categories>
        <category>减脂塑形</category>
      </categories>
      <tags>
        <tag>减脂塑形</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年10月学习计划</title>
    <url>/2019/10/16/2019%E5%B9%B410%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="总体规划"><a href="#总体规划" class="headerlink" title="总体规划"></a>总体规划</h1><h2 id="第二周计划-13日"><a href="#第二周计划-13日" class="headerlink" title="第二周计划(13日)"></a>第二周计划(13日)</h2><p><strong>具体细节:</strong></p>
<ul>
<li>1.学业课程<br>随机过程第二章，第三章作业完成，复习第一章和第二章。<br>英语完成 one min speech 和 machine learning 的speaker部分。<br>计算机网络体系框架思考题好好思考。</li>
<li>2.项目学习<br>精度论文《基于有噪私密信道的物理层密钥分发技术研究》达到一半，写好笔记和反思。</li>
</ul>
<p>信号与系统第一章总体读完，把大体学习框架完成。</p>
<p>计算机网络安全章节完成。</p>
<p>Python文件与对象结束。</p>
<p>每完成一个部分在后面用红色字体标记完成时间。</p>
]]></content>
      <categories>
        <category>学习与总结</category>
      </categories>
      <tags>
        <tag>每月学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>东大一个月以来的反思</title>
    <url>/2019/10/04/%E4%B8%9C%E5%A4%A7%E4%B8%80%E4%B8%AA%E6%9C%88%E4%BB%A5%E6%9D%A5%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1 跑步已进入瓶颈期，6km以下已经不怎么出汗。改变有氧运动为跳绳后发现10mins就能汗如雨下，搭配着来很重要。其次，不能间断超过三天，否则要浪费一天时间去重新适应。现在又办理了健身卡，今天晚上也要制定减脂增肌的健身与饮食计划，一定要在元旦之前减到65kg以下。</p>
<hr>
<p>2 以后就算是和老师们聚餐也要控制酒精摄入。更要学会委婉的拒绝。</p>
<hr>
<p>3 事实证明自己之前的胡思乱想归根结底还是闲的，让自己有计划有节奏的忙碌起来。爱情这东西命里有时终须有，命里无时也莫强求，对现在的自己而言没有那么重要。</p>
<hr>
<p>4 至于以后到底读不读博，就业是否留在实验室得等到寒假之后再思考，这个学期主要是找到物理层安全的价值点与兴趣点所在，多读论文。</p>
<hr>
<p>5 不要过于自卑，自己也没有那么弱，运气只会对努力的，有准备的人奏效，它也是实力的一种，不然自己也不会在这进修了!</p>
<hr>
<p>6 体态和肤质只需坚持一个季度就能改变，并不难。细细想来和当初考研异曲同工，只要稳扎稳打一年就能改变所在平台，这是回报率很高的“交易”。等到11月发了奖学金可以试着买一套护肤的保养保养，毕竟自己的皮肤也需要保护，自己的形象也很重要。</p>
<hr>
<p>7 年少时觉得那些大道理似乎很空，所以忘得很快。现在读的书慢慢多了，经历的慢慢丰富了，身边却很少有人那么“苦口婆心”的教导自己，很感谢随机过程老师每节课这么督促我们，仔细琢磨后觉得既兴奋有懊悔，以后要把所以空闲时间都用在学习与思考上。</p>
<hr>
<p>8 老师们都说如果能把高考时的拼劲放到现在，没有什么是解决不了的。不过高三时的自己并没有那么拼命，也让自己刻意忘记了那时的日子。所以自己不妨试着再找回考研时候的拼劲，时刻思考，时刻背诵。我相信自己一定会有所成的。</p>
<hr>
<p>9 如切如磋，如琢如磨，战战兢兢，如履薄冰。希望不负“百载文枢江左，东南辈出英豪。”的期望!</p>
]]></content>
      <categories>
        <category>感悟与反思</category>
      </categories>
      <tags>
        <tag>感悟与反思</tag>
      </tags>
  </entry>
  <entry>
    <title>研一上学期计划</title>
    <url>/2019/09/30/%E7%A0%94%E4%B8%80%E4%B8%8A%E5%AD%A6%E6%9C%9F%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><h2 id="一-物理层安全"><a href="#一-物理层安全" class="headerlink" title="一.物理层安全"></a>一.物理层安全</h2><blockquote>
<p>第一学期打好基础，把硕士和博士毕业论文都精读分析完。</p>
</blockquote>
<p><strong>需要看完的书籍：</strong></p>
<ul>
<li>信号与系统</li>
<li>通信原理基础</li>
<li>信息论与编码</li>
<li>密码学重点</li>
<li>随机过程</li>
<li>计算机网络</li>
</ul>
<h2 id="二-机器学习"><a href="#二-机器学习" class="headerlink" title="二.机器学习"></a>二.机器学习</h2><blockquote>
<p>在这个学期做到入门机器学习，做出一个小成品</p>
</blockquote>
<p><strong>需要看完的书籍：</strong></p>
<ul>
<li>机器学习(西瓜书)</li>
<li>机器学习实战</li>
</ul>
<h2 id="三-英语雅思"><a href="#三-英语雅思" class="headerlink" title="三.英语雅思"></a>三.英语雅思</h2><p><strong>目前的准备：</strong></p>
<ul>
<li>归纳完成词根词缀</li>
<li>背完雅思词汇</li>
<li>背完新概念三前三十篇</li>
<li>完成近几年的雅思真题</li>
</ul>
]]></content>
      <categories>
        <category>研究生</category>
      </categories>
      <tags>
        <tag>研究生学期计划</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象1</title>
    <url>/2019/08/30/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象1</title>
    <url>/2019/08/19/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介与背景"><a href="#简介与背景" class="headerlink" title="简介与背景"></a>简介与背景</h2><p>面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p>
<p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p>
<p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p>
<p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p>
<p>我们在程序中书写的语句在执行时会变成一条或多条指令然后由CPU去执行。当然为了简化程序的设计，我们引入了函数的概念，把相对独立且经常重复使用的代码放置到函数中，在需要使用这些功能的时候只要调用函数即可；如果一个函数的功能过于复杂和臃肿，我们又可以进一步将函数继续切分为子函数来降低系统的复杂性。但是说了这么多，不知道大家是否发现，所谓编程就是程序员按照计算机的工作方式控制计算机完成各种任务。但是，计算机的工作方式与正常人类的思维模式是不同的，如果编程就必须得抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多，“每个人都应该学习编程”这样的豪言壮语就只能说说而已。当然，这些还不是最重要的，最重要的是当我们需要开发一个复杂的系统时，代码的复杂性会让开发和维护工作都变得举步维艰，所以在上世纪60年代末期，“<a href="https://zh.wikipedia.org/wiki/软件危机" target="_blank" rel="noopener">软件危机</a>”、“<a href="https://zh.wikipedia.org/wiki/软件工程" target="_blank" rel="noopener">软件工程</a>”等一系列的概念开始在行业中出现。</p>
<p>当然，程序员圈子内的人都知道，现实中并没有解决上面所说的这些问题的“<a href="https://zh.wikipedia.org/wiki/没有银弹" target="_blank" rel="noopener">银弹</a>”，真正让软件开发者看到希望的是上世纪70年代诞生的<a href="https://zh.wikipedia.org/wiki/Smalltalk" target="_blank" rel="noopener">Smalltalk</a>编程语言中引入的面向对象的编程思想（面向对象编程的雏形可以追溯到更早期的<a href="https://zh.wikipedia.org/wiki/Simula" target="_blank" rel="noopener">Simula</a>语言）。按照这种编程理念，程序中的数据和操作数据的函数是一个逻辑上的整体，我们称之为“对象”，而我们解决问题的方式就是创建出需要的对象并向对象发出各种各样的消息，多个对象的协同工作最终可以让我们构造出复杂的系统来解决现实中的问题。</p>
<br>

<hr>
<br>

<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>简单的说，类是对象的蓝图和模板，而对象是类的实例。这个解释虽然有点像用概念在解释概念，但是从这句话我们至少可以看出，类是抽象的概念，而对象是具体的东西。在面向对象编程的世界中，一切皆为对象，对象都有属性和行为，每个对象都是独一无二的，而且对象一定属于某个类（型）。当我们把一大堆拥有共同特征的对象的静态特征（属性）和动态特征（行为）都抽取出来后，就可以定义出一个叫做“类”的东西。</p>
<p><img src="/.io//zhangyongbin/Desktop/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt></p>
<h3 id="1-定义类"><a href="#1-定义类" class="headerlink" title="1.定义类"></a>1.定义类</h3><p>在Python中可以使用<code>class</code>关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span><span class="params">(self, course_name)</span>:</span></span><br><span class="line">        print(<span class="string">'%s正在学习%s.'</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_movie</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            print(<span class="string">'%s只能观看《熊出没》.'</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s正在观看岛国爱情大电影.'</span> % self.name)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明：</strong> 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p>
</blockquote>
<h3 id="2-创建和使用对象"><a href="#2-创建和使用对象" class="headerlink" title="2.创建和使用对象"></a>2.创建和使用对象</h3><p>当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建学生对象并指定姓名和年龄</span></span><br><span class="line">    stu1 = Student(<span class="string">'骆昊'</span>, <span class="number">38</span>)</span><br><span class="line">    <span class="comment"># 给对象发study消息</span></span><br><span class="line">    stu1.study(<span class="string">'Python程序设计'</span>)</span><br><span class="line">    <span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">'王大锤'</span>, <span class="number">15</span>)</span><br><span class="line">    stu2.study(<span class="string">'思想品德'</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="3-访问可见性问题"><a href="#3-访问可见性问题" class="headerlink" title="3.访问可见性问题"></a>3.访问可见性问题</h3><p>对于上面的代码，有C++、Java、C#等编程经验的程序员可能会问，我们给<code>Student</code>对象绑定的<code>name</code>和<code>age</code>属性到底具有怎样的访问权限（也称为可见性）。因为在很多面向对象编程语言中，我们通常会将对象的属性设置为私有的（private）或受保护的（protected），简单的说就是不允许外界访问，而对象的方法通常都是公开的（public），因为公开的方法就是对象能够接受的消息。<font color="red">在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点。</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, foo)</span>:</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__foo)</span><br><span class="line">        print(<span class="string">'__bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    test = Test(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__bar'</span></span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__foo'</span></span><br><span class="line">    print(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><font color="red">但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来“妨碍”对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们。</font>下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是“We are all consenting adults here”。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, foo)</span>:</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__foo)</span><br><span class="line">        print(<span class="string">'__bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    test = Test(<span class="string">'hello'</span>)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    print(test._Test__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻。</p>
<h3 id="4-面向对象的支柱"><a href="#4-面向对象的支柱" class="headerlink" title="4.面向对象的支柱"></a>4.面向对象的支柱</h3><p>面向对象有三大支柱：封装、继承和多态。后面两个概念在下一个章节中进行详细的说明，这里我们先说一下什么是封装。我自己对封装的理解是“隐藏一切可以隐藏的实现细节，只向外界暴露（提供）简单的编程接口”。我们在类中定义的方法其实就是把数据和对数据的操作封装起来了，在我们创建了对象之后，只需要给对象发送一个消息（调用方法）就可以执行方法中的代码，也就是说我们只需要知道方法的名字和传入的参数（方法的外部视图），而不需要知道方法内部的实现细节（方法的内部视图）。</p>
<h3 id="5-实践"><a href="#5-实践" class="headerlink" title="5.实践"></a>5.实践</h3><h4 id="练习1：定义一个类描述数字时钟"><a href="#练习1：定义一个类描述数字时钟" class="headerlink" title="练习1：定义一个类描述数字时钟"></a>练习1：定义一个类描述数字时钟</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""数字时钟"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param hour: 时</span></span><br><span class="line"><span class="string">        :param minute: 分</span></span><br><span class="line"><span class="string">        :param second: 秒</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""走字"""</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示时间"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%02d:%02d:%02d'</span> % de</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    clock = Clock(<span class="number">23</span>, <span class="number">59</span>, <span class="number">58</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h4 id="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"><a href="#练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。" class="headerlink" title="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"></a>练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""初始化方法</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 横坐标</span></span><br><span class="line"><span class="string">        :param y: 纵坐标</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">"""移动到指定位置</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 新的横坐标</span></span><br><span class="line"><span class="string">        "param y: 新的纵坐标</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_by</span><span class="params">(self, dx, dy)</span>:</span></span><br><span class="line">        <span class="string">"""移动指定的增量</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param dx: 横坐标的增量</span></span><br><span class="line"><span class="string">        "param dy: 纵坐标的增量</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.x += dx</span><br><span class="line">        self.y += dy</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distance_to</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="string">"""计算与另一个点的距离</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param other: 另一个点</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dx = self.x - other.x</span><br><span class="line">        dy = self.y - other.y</span><br><span class="line">        <span class="keyword">return</span> sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(%s, %s)'</span> % (str(self.x), str(self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    p1 = Point(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    p2 = Point()</span><br><span class="line">    print(p1)</span><br><span class="line">    print(p2)</span><br><span class="line">    p2.move_by(<span class="number">-1</span>, <span class="number">2</span>)</span><br><span class="line">    print(p2)</span><br><span class="line">    print(p1.distance_to(p2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>摘自<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.md" target="_blank" rel="noopener">GitHub面向对象编程基础</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>文件I/O</title>
    <url>/2019/07/29/Python%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p>
<p>IO编程中，Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。对于浏览网页来说，浏览器和新浪服务器之间至少需要建立两根水管，才可以既能发数据，又能收数据。</p>
<p><br><br></p>
<h2 id="二-文件的基本操作"><a href="#二-文件的基本操作" class="headerlink" title="二.文件的基本操作"></a>二.文件的基本操作</h2><h3 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1.打开文件"></a>1.打开文件</h3><p>在Python中，使用open函数，可以打开一个已经存在的文件，或者创建一个新的文件。</p>
<blockquote>
<p>open(文件名，访问方式)</p>
</blockquote>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">"test.py"</span>,<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>访问方式：</strong></p>
<ul>
<li><strong>r</strong>    以只读方式打开文件(read)。文件的指针将会放在文件的开头。默认模式。</li>
<li><strong>w</strong>   打开一个文件只用于写入(write)。如果该文件已存在则将其覆盖；若文件不存在，创建新文件</li>
<li><strong>a</strong>    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建文件并写入。</li>
<li><strong>rb</strong>   以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。默认模式。</li>
<li><strong>wb</strong>  以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖；若文件不存在，创建新文件。</li>
<li><strong>ab</strong>   以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建文件并写入。</li>
<li><strong>r+</strong>    打开一个文件用于读写。文件指针将会放在文件的开头。文件若不存在，程序会crash。</li>
<li><strong>w+</strong>   打开一个文件用于读写。如果该文件已存在则将其覆盖；若文件不存在，创建新文件。</li>
<li><strong>a+</strong>    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建文件用于读写。</li>
<li><strong>rb+</strong>   以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</li>
<li><strong>wb+</strong>  以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖；若文件不存在，创建新文件。</li>
<li><strong>ab+</strong>   以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。</li>
</ul>
<h3 id="2-关闭文件"><a href="#2-关闭文件" class="headerlink" title="2.关闭文件:"></a>2.关闭文件:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h3 id="3-读文件"><a href="#3-读文件" class="headerlink" title="3.读文件"></a>3.读文件</h3><p>使用read()函数进行文件的阅读。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读出文件全部内容</span></span><br><span class="line">f.read()</span><br><span class="line"><span class="comment">#按照特定的个数读，比如读2个</span></span><br><span class="line">f.read(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#按照行来读,用列表来存储每一行</span></span><br><span class="line">f.readlines()</span><br><span class="line"><span class="comment">#只读一行</span></span><br><span class="line">f.readline()</span><br></pre></td></tr></table></figure>

<p>当读大文件时可以设置每次读的大小，以防出错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> true:</span><br><span class="line">  content = f.read(<span class="number">1024</span>)</span><br><span class="line">  <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>可以反复调用<code>write()</code>来写入文件，但是务必要调用<code>f.close()</code>来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<code>with</code>语句来得保险：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-例子实践"><a href="#4-例子实践" class="headerlink" title="4.例子实践"></a>4.例子实践</h3><p>通过程序进行复制特定的文件给新的文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.获取用户的用户名</span></span><br><span class="line">old_filename = input(<span class="string">"请输入要复制的文件名:"</span>)</span><br><span class="line"><span class="comment">#2.打开要复制的文件</span></span><br><span class="line">old_filename = open(old_filename,<span class="string">"r"</span>)</span><br><span class="line">filename = str(old_filename)</span><br><span class="line">position = filename.rfind(<span class="string">"."</span>)</span><br><span class="line">new_filename = filename[:position] + <span class="string">"[复件]"</span> + filename[position:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.新建一个文件</span></span><br><span class="line">new_filename = open(new_filename,<span class="string">"w"</span>)</span><br><span class="line"><span class="comment">#4.从旧文件读出数据，接着写入新文件</span></span><br><span class="line">content = old_filename.read()</span><br><span class="line">new_filename.write(content)</span><br><span class="line"><span class="comment">#关闭文件</span></span><br><span class="line">old_filename.close()</span><br><span class="line">new_filename.close()</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="三-其他知识点"><a href="#三-其他知识点" class="headerlink" title="三.其他知识点"></a>三.其他知识点</h3><h3 id="1-定位"><a href="#1-定位" class="headerlink" title="1.定位"></a>1.定位</h3><p><strong>seek()</strong> 方法用于移动文件读取指针到指定位置。</p>
<p>seek() 方法语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fileObject.seek(offset, whence)</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>offset</strong> – 开始的偏移量，也就是代表需要移动偏移的字节数，如果是负数表示从倒数第几位开始。</li>
<li><strong>whence：</strong>可选，默认值为 0。给 offset 定义一个参数，表示要从哪个位置开始偏移；0 代表从文件开头开始算起，1 代表从当前位置开始算起，2 代表从文件末尾算起。</li>
</ul>
</blockquote>
<p><strong>tell()</strong> 方法返回文件的当前位置，即文件指针当前位置。</p>
<p>tell() 方法语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fileObject.tell()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回文件的当前位置。</p>
</blockquote>
<h3 id="2-文件的相关操作"><a href="#2-文件的相关操作" class="headerlink" title="2.文件的相关操作"></a>2.文件的相关操作</h3><p>在操作系统终下操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如<code>dir</code>、<code>cp</code>等命令。</p>
<p>要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的<code>os</code>模块也可以直接调用操作系统提供的接口函数。</p>
<p>一些基本操作如下</p>
<p><strong>1.文件重命名</strong></p>
<p>os模块中的rename()可以完成对文件的重命名操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">"oldname"</span>,<span class="string">"newname"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2.删除文件</strong></p>
<p>os模块中的remove()可以完成对文件的删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">"filename"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>3.创建文件夹</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>4.获取当前目录</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure>

<p><strong>5.改变当前目录</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">"../"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>6.获取目录列表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(<span class="string">"./"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>7.创建文件夹</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rmdir(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-批量重命名"><a href="#3-批量重命名" class="headerlink" title="3.批量重命名"></a>3.批量重命名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#获取重命名的文件夹名字</span></span><br><span class="line">folder_name = input(<span class="string">"输入需要重命名的文件夹名字"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定文件夹中的所有文件名字</span></span><br><span class="line">file_names = os.listdir(folder_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file_names:</span><br><span class="line">  oldfilename = folder_name+<span class="string">"/"</span>+name</span><br><span class="line">  newfilename = folder_name+<span class="string">"/"</span>+<span class="string">"[已修改]"</span>+name</span><br><span class="line">  os.rename(oldfilename,newfilename)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2019/07/19/Python%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>要执行函数定义的特定任务，可调用该函数。需要在程序中多次执行同一项任务时，你无需反复编写完成该任务的代码，而只需调用执行该任务的函数，让Python运行其中的代码。你将发现，通过使用函数，程序的编写、阅读、测试和修复都将更容易。</p>
</blockquote>
<h2 id="一-定义函数"><a href="#一-定义函数" class="headerlink" title="一.定义函数"></a>一.定义函数</h2><h3 id="1-简单的例子"><a href="#1-简单的例子" class="headerlink" title="1.简单的例子"></a>1.简单的例子</h3><p>下面是一个打印问候语的简单函数，名为greet():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line">  print(<span class="string">"Hello！"</span>)</span><br><span class="line">greet()</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>这个示例演示了最简单的函数结构。第一行的代码行使用关键字def来告诉Python你要定义一个函数。这是函数定义，向Python指出了函数名，还可能在括号内指出函数为完成其任务需要什么样的信息。在这里，函数名为greet()，它不需要任何信息就能完成其工作，因此括号是空的(即便如此，括号也必不可少)。最后，定义以冒号结尾。</li>
<li>紧跟在def greet():后面的所有缩进行构成了函数体。代码行print(“Hello!”)是函数体内的唯一一行代码，greet()只做一项工作:打印Hello.</li>
<li>要使用这个函数，可调用它，函数调用让Python执行函数的代码。要调用函数，可依次指定函数名以及用括号括起的必要信息，如例子中的第四行：greet()。由于这个函数不需要任何信息，因此调用它时只需要输入greet()。</li>
</ul>
</blockquote>
<h3 id="2-向函数传递信息"><a href="#2-向函数传递信息" class="headerlink" title="2.向函数传递信息"></a>2.向函数传递信息</h3><p>在函数定义def Function()的括号内添加n。通过在这里添加n，就可让函数接受你给n指定的任何值。现在，这个函数要求你调用它时给n指定一个值。调用Function()时，可将一个名字传递给它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Function</span><span class="params">(n)</span>:</span></span><br><span class="line">    a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        print(a,end=<span class="string">' '</span>)</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">Function(<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-返回值"><a href="#3-返回值" class="headerlink" title="3.返回值"></a>3.返回值</h3><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回 的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FullName</span><span class="params">(firstName,lastName)</span>:</span></span><br><span class="line">  	fullName = firstname + <span class="string">' '</span> + lastName</span><br><span class="line">    <span class="keyword">return</span> fullName</span><br><span class="line">  </span><br><span class="line">musician = FullName(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>)</span><br></pre></td></tr></table></figure>

<p>而且Python可以返回多个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divid</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    shang = a//b<span class="comment">#除完为整数</span></span><br><span class="line">    yushu = a%b</span><br><span class="line">    <span class="keyword">return</span>(shang,yushu)</span><br><span class="line"></span><br><span class="line">shang,yushu = divid(<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line">print(shang,yushu)</span><br></pre></td></tr></table></figure>

<h2 id="二-局部变量和全局变量"><a href="#二-局部变量和全局变量" class="headerlink" title="二.局部变量和全局变量"></a>二.局部变量和全局变量</h2><p>变程序量中使用的范围不同：作用域（Scope），就是变量的有效范围。变量的作用域取决于变量的访问性。</p>
<p><strong>局部变量</strong>：函数内部的变量称为局部变量（Local Variable），它的作用域仅限于函数内部， 离开该函数后就是无效的，再使用就会报错。</p>
<p><strong>全局变量</strong>：在所有函数外部定义的变量称为全局变量（Global Variable），它的作用域默认是整个程序。它的作用域是从声明时刻开始，到程序结束。</p>
<blockquote>
<p>在局部作用域中声明：global name。这样就是使用全局变量而不是声明一个局部变量。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#区分局部变量与全局变量</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func1</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    print(a)</span><br><span class="line">Func1()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="comment">#100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func1</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#这样定义之后就可以在函数局部中使用全局变量</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    print(a)</span><br><span class="line">Func1()</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>列表，字典是全局变量时，不需要声明，可以直接使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    nums.append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(nums)</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">test2()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">1,2,3,4</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h2 id="三-函数参数"><a href="#三-函数参数" class="headerlink" title="三.函数参数"></a>三.函数参数</h2><p>缺省参数：可以函数形参中直接传参，这样在使用函数时就可以不赋值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(a,b,c=<span class="number">33</span>,d=<span class="number">44</span>)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(d)</span><br><span class="line">Print(d=<span class="number">11</span>,a=<span class="number">22</span>,b=<span class="number">33</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">33</span></span><br><span class="line"><span class="string">33</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>有时候，你预先不知道函数需要接受多少个实参，好在Python允许函数从调用语句中收集任意数量的实参。</p>
<p>不定长参数： <em>args:元组;  *</em>kargs:字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(a,b,*args)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">Print(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">(3，4，5，6，7)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(a,b,*args,**kargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kargs)</span><br><span class="line">Print(<span class="number">1</span>,<span class="number">2</span>,tasks=<span class="number">3</span>,done=<span class="number">4</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">()</span></span><br><span class="line"><span class="string">&#123;'tasks': 3, 'done': 4&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>拆包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在定义的时候 *,**用来表示后面的变量有特殊功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,c=<span class="number">33</span>,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">A = (<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>)</span><br><span class="line">B = &#123;<span class="string">"name"</span>:<span class="string">"laowang"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">#在实参中*,**表示对元祖/字典进行拆包</span></span><br><span class="line">test(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,*A,**B)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">33</span></span><br><span class="line"><span class="string">(44, 55, 66)</span></span><br><span class="line"><span class="string">&#123;'name': 'laowang', 'age': 18&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h2 id="四-匿名函数"><a href="#四-匿名函数" class="headerlink" title="四.匿名函数"></a>四.匿名函数</h2><p>当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,func)</span>:</span></span><br><span class="line">    result = func(a,b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">num = test(<span class="number">11</span>,<span class="number">22</span>,<span class="keyword">lambda</span> x,y:x-y)</span><br><span class="line">print(num)</span><br><span class="line"><span class="comment">#结果：-11</span></span><br></pre></td></tr></table></figure>

<p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>,y表示函数参数。</p>
<p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p>
<p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。</p>
<p><strong>注意python2与Python3中的区别：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,func)</span>:</span></span><br><span class="line">    result = func(a,b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">func_new = input(<span class="string">"请输入一个匿名函数"</span>)</span><br><span class="line">num = test(<span class="number">11</span>,<span class="number">22</span>,func_new)</span><br><span class="line">print(num)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">python2:</span></span><br><span class="line"><span class="string">请输入一个匿名函数lambda x,y:x-y</span></span><br><span class="line"><span class="string">-11</span></span><br><span class="line"><span class="string">python3:</span></span><br><span class="line"><span class="string">请输入一个匿名函数lambda x,y:x-y</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "9input.py", line 7, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    num = test(11,22,func_new)</span></span><br><span class="line"><span class="string">  File "9input.py", line 3, in test</span></span><br><span class="line"><span class="string">    result = func(a,b)</span></span><br><span class="line"><span class="string">TypeError: 'str' object is not callable</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>python2可以，Python3不行，Python3传的是字符串</p>
</blockquote>
<p>改进：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,func)</span>:</span></span><br><span class="line">    result = func(a,b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">func_new = input(<span class="string">"请输入一个匿名函数"</span>)</span><br><span class="line"></span><br><span class="line">func_new = eval(func_new)<span class="comment">#把字符串变成表达式</span></span><br><span class="line"></span><br><span class="line">num = test(<span class="number">11</span>,<span class="number">22</span>,func_new)</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure>

<p>eval函数能够把字符串变成表达式。</p>
<p>Python对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>序列与元组</title>
    <url>/2019/07/18/%E5%BA%8F%E5%88%97%E4%B8%8E%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-序列"><a href="#一-序列" class="headerlink" title="一.序列"></a>一.序列</h2><p>Python有许多复合数据类型，用于将其他值组合在一起。最通用的是列表，它可以写成方括号之间的逗号分隔值（项）列表列表可能包含不同类型的项目，但通常项目都具有相同的类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">square = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(square)</span><br></pre></td></tr></table></figure>

<p>像字符串（以及所有其他内置序列类型）一样，列表可以被索引和切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(square[<span class="number">0</span>])</span><br><span class="line">print(square[<span class="number">-1</span>])</span><br><span class="line">print(square[<span class="number">-3</span>:])</span><br><span class="line">print(square[:])</span><br></pre></td></tr></table></figure>

<p>列表还支持串联等操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(square+[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure>

<p>内置函数len()也适用于列表:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(len(square))</span><br></pre></td></tr></table></figure>

<p><strong>列表的更多操作：</strong></p>
<blockquote>
<ul>
<li>list.append(x)</li>
</ul>
<p>将项添加到列表的末尾。相当于。a[len(a):] = [x]</p>
<ul>
<li>list.extend（<strong>可迭代的</strong>）</li>
</ul>
<p>通过附加iterable中的所有项来扩展列表。相当于 。a[len(a):] = iterable</p>
<ul>
<li>list.insert（i，x ）</li>
</ul>
<p>在给定位置插入项目。第一个参数是要插入的元素的索引，因此插入列表的前面，并且等效于。a.insert(0, x)a.insert(len(a), x)a.append(x)</p>
<ul>
<li>list.remove（x ）</li>
</ul>
<p>从列表中删除值为x的第一个项目。如果没有这样的项目则是错误的。</p>
<ul>
<li>list.pop（[ i ] ）</li>
</ul>
<p>删除列表中给定位置的项目，然后将其返回。如果未指定索引，则a.pop()删除并返回列表中的最后一项。（方法签名中i周围的方括号表示该参数是可选的，而不是您应该在该位置键入方括号。您将在Python Library Reference中经常看到这种表示法。</p>
<ul>
<li>list.clear（)</li>
</ul>
<p>从列表中删除所有项目。相当于。del a[:]</p>
<ul>
<li>list.index（x [，start [，end ] ] ）</li>
</ul>
<p>在值为x的第一个项的列表中返回从零开始的索引。ValueError如果没有这样的项目，则提高a 。</p>
<p>可选参数start和end被解释为切片表示法，并用于将搜索限制为列表的特定子序列。返回的索引是相对于完整序列的开头而不是start参数计算的。</p>
<ul>
<li>list.count（x ）</li>
</ul>
<p>返回x出现在列表中的次数。</p>
<ul>
<li>list.sort（key = None，reverse = False ）</li>
</ul>
<p>对列表中的项目进行排序（参数可用于排序自定义，请参阅sorted()其说明）。</p>
<ul>
<li>list.reverse（）</li>
</ul>
<p>反转列表中的元素。</p>
<ul>
<li>list.copy（）</li>
</ul>
<p>返回列表的浅表副本。相当于a[:]。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = [<span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'banana'</span>, <span class="string">'kiwi'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>]</span><br><span class="line"></span><br><span class="line">print(fruits.count(<span class="string">'apple'</span>))</span><br><span class="line">print(fruits.index(<span class="string">'banana'</span>))</span><br><span class="line">print(fruits.index(<span class="string">'banana'</span>,<span class="number">4</span>))</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.reverse()</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.append(<span class="string">'grape'</span>)</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.extend(<span class="string">'watermallen'</span>)</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.sort()</span><br><span class="line">print(fruits)</span><br><span class="line">print(fruits.pop())</span><br></pre></td></tr></table></figure>

<p>要实现队列，请使用collections.deque设计为具有快速追加和从两端弹出的队列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">queue = deque([<span class="string">"Eric"</span>, <span class="string">"John"</span>, <span class="string">"Michael"</span>])</span><br><span class="line">print(queue.popleft())</span><br></pre></td></tr></table></figure>

<p><strong>列表理解</strong></p>
<p>列表推导提供了创建列表的简明方法。常见的应用是创建新的列表，其中每个元素是应用于另一个序列的每个成员或可迭代的一些操作的结果，或者创建满足特定条件的那些元素的子序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x != <span class="number">0</span>]</span><br><span class="line">print(squares)</span><br><span class="line">List = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>

<p>二维数组遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vec = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">vector = [num <span class="keyword">for</span> elem <span class="keyword">in</span> vec <span class="keyword">for</span> num <span class="keyword">in</span> elem]</span><br><span class="line">print(vector)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> vector:</span><br><span class="line">    print(x)</span><br><span class="line">List = [x <span class="keyword">for</span> x <span class="keyword">in</span> vector]</span><br><span class="line">print(List)</span><br><span class="line"><span class="comment"># 不能进行这样的遍历输出 print(x for x in vector)</span></span><br></pre></td></tr></table></figure>

<p>列表推导可以包含复杂表达式和嵌套函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = [str(round(pi,i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>

<p><strong>嵌套列表理解</strong></p>
<p>以下列表理解将转置行和列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Matrix = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">]</span><br><span class="line">ROW = [[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> Matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print(ROW)</span><br><span class="line"></span><br><span class="line">LINE = [line <span class="keyword">for</span> line <span class="keyword">in</span> Matrix]</span><br><span class="line">print(LINE)</span><br></pre></td></tr></table></figure>

<p><strong>关于del声明:</strong></p>
<p>有一种方法可以从列表中删除一个项目，而不是它的值：del语句。这与pop()返回值的方法不同。该del语句还可用于从列表中删除切片或清除整个列表（我们之前通过将空列表分配给切片来执行此操作）。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>] </span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span> a[:]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<h2 id="二-元组"><a href="#二-元组" class="headerlink" title="二.元组"></a>二.元组</h2><p>尽管元组看起来与列表类似，但它们通常用于不同的情况并用于不同的目的。元组是不可变的，通常包含异构的元素序列，这些元素可以通过解包（参见本节后面部分）或索引（或者甚至是属性的情况下namedtuples）来访问。列表是可变的，它们的元素通常是同类的，可以通过遍历列表来访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span></span><br><span class="line">print(t) </span><br><span class="line">u = t,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(u)</span><br><span class="line">print(t[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>一个特殊的问题是构造包含0或1项的元组：语法有一些额外的怪癖来适应这些。空元组由一对空括号构成; 通过使用逗号跟随值来构造具有一个项目的元组（仅在括号中包含单个值是不够的）。丑陋但有效。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stringlen = <span class="string">'hello'</span>,</span><br><span class="line">print(stringlen)</span><br><span class="line">print(len(stringlen))</span><br></pre></td></tr></table></figure>

<h2 id="三-集合"><a href="#三-集合" class="headerlink" title="三.集合"></a>三.集合</h2><p>python还包括集合的数据类型。集合是无序集合，没有重复元素。基本用途包括成员资格测试和消除重复条目。集合对象还支持数学运算，如并集，交集，差异和对称差异。</p>
<p>set()可以使用大括号或函数来创建集合。注意：要创建一个空集，你必须使用set()，而不是{}; 后者创建一个空字典，我们将在下一节讨论这个数据结构。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = &#123;<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>&#125;</span><br><span class="line">print(basket)</span><br><span class="line"></span><br><span class="line">a = set(<span class="string">'abracadabrabcdef'</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">print(a-b)</span><br><span class="line">print(a|b)</span><br><span class="line">print(a&amp;b)</span><br><span class="line">print(a^b)<span class="comment"># letters in a or b but not both</span></span><br></pre></td></tr></table></figure>

<h2 id="四-字典"><a href="#四-字典" class="headerlink" title="四.字典"></a>四.字典</h2><p>词典有时在其他语言中被称为“关联记忆”或“关联阵列”。与由一系列数字索引的序列不同，字典由键索引，键可以是任何不可变类型; 字符串和数字总是键。如果元组仅包含字符串，数字或元组，则它们可用作键; 如果元组直接或间接包含任何可变对象，则不能将其用作键。你不能用链表做关键字，因为链表可以用索引赋值，切片赋值，或类似的方法进行修改append()和 extend()。</p>
<p>最好将字典视为一组无序的键：值对，并要求键是唯一的（在一个字典中）。一对大括号创建一个空字典：{}。在括号内放置以逗号分隔的键：值对列表，将初始键：值对添加到字典中; 这也是字典在输出上的写法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tel = &#123;<span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br><span class="line">tel[<span class="string">'guido'</span>] = <span class="number">4127</span></span><br><span class="line">print(tel)</span><br><span class="line"><span class="keyword">del</span> tel[<span class="string">'sape'</span>]</span><br><span class="line">print(tel)</span><br><span class="line">print(list(tel.keys()))</span><br><span class="line">print(sorted(tel.keys()))</span><br></pre></td></tr></table></figure>

<p>dict()构造可以直接从键-值对的序列构建字典:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = dict([(<span class="string">'sape'</span>, <span class="number">4139</span>), (<span class="string">'guido'</span>, <span class="number">4127</span>), (<span class="string">'jack'</span>, <span class="number">4098</span>)])</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure>

<h2 id="五-遍历"><a href="#五-遍历" class="headerlink" title="五.遍历"></a>五.遍历</h2><p><strong>遍历字典：</strong></p>
<p>循环遍历字典时，可以使用该items()方法同时检索密钥和相应的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">knights = &#123;<span class="string">'gallahad'</span>: <span class="string">'pure'</span>, <span class="string">'robin'</span>: <span class="string">'brave'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> knights.items():</span><br><span class="line">    print(x,y)</span><br></pre></td></tr></table></figure>

<p>循环遍历序列时，可以使用该enumerate()函数同时检索位置索引和相应的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(knights.values()):</span><br><span class="line">    print(i,v)</span><br></pre></td></tr></table></figure>

<p>要同时循环两个或更多个序列，条目可以与该zip()功能配对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">questions = [<span class="string">'name'</span>, <span class="string">'quest'</span>, <span class="string">'favorite color'</span>]</span><br><span class="line">answers = [<span class="string">'lancelot'</span>, <span class="string">'the holy grail'</span>, <span class="string">'blue'</span>]</span><br><span class="line"><span class="keyword">for</span> q,a <span class="keyword">in</span> zip(questions,answers):</span><br><span class="line">    print(<span class="string">'What is your &#123;0&#125; Its is &#123;1&#125;\n'</span>.format(q,a))</span><br></pre></td></tr></table></figure>

<p>要反向循环序列，首先在正向指定序列，然后调用该reversed()函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>要按排序顺序循环序列，请使用sorted()返回新排序列表的函数，同时保持源不变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">basket = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> sorted(set(basket)):</span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/05/06/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
