<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZYBO_o&#39;s Blogs</title>
  
  <subtitle>Follow Excellence</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zybtree.github.io/"/>
  <updated>2020-08-20T09:24:49.866Z</updated>
  <id>https://zybtree.github.io/</id>
  
  <author>
    <name>ZYBO_o</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>存储模型</title>
    <link href="https://zybtree.github.io/2020/08/17/%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B/"/>
    <id>https://zybtree.github.io/2020/08/17/存储模型/</id>
    <published>2020-08-17T14:38:57.000Z</published>
    <updated>2020-08-20T09:24:49.866Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-基本概念：地址重定位"><a href="#一-基本概念：地址重定位" class="headerlink" title="一.基本概念：地址重定位"></a>一.基本概念：地址重定位</h1><h2 id="1-要解决的问题"><a href="#1-要解决的问题" class="headerlink" title="1.要解决的问题"></a>1.要解决的问题</h2><p><img src="//zybtree.github.io/2020/08/17/存储模型/1png.png" style="zoom:30%;"></p><p>要解决的问题是：如何把一个进程的地址空间的内容装载到内存，然后合理地来分配使用内存，使得每一个进程能够正确地执行。</p><h2 id="2-为什么引入"><a href="#2-为什么引入" class="headerlink" title="2.为什么引入"></a>2.为什么引入</h2><ul><li><strong>进程中的地址不是最终的物理地址</strong> </li><li><strong>在进程运行前无法计算出物理地址</strong><ul><li><strong>因为不能确定进程被加载到内存什么地方</strong></li></ul></li></ul><p>综上，引出了地址重定位的支持。</p><h2 id="3-地址重定位"><a href="#3-地址重定位" class="headerlink" title="3.地址重定位"></a>3.地址重定位</h2><ul><li><strong>进程地址空间的地址不是最终的物理地址，而是逻辑地址</strong>，有时也叫相对地址或者叫虚拟地址。</li></ul><blockquote><p>用户程序经过编译、汇编后形成目标代码，目标代码通常采用相对地址的形式，其首地址为0，其余地址都相对于首地址而编址。<font color="red"><strong>不能用逻辑地址在内存中读取信息</strong></font></p></blockquote><ul><li><strong>物理地址(绝对地址，实地址)：</strong> 内存中存储单元的地址，可直接寻址。</li></ul><p><strong>为了保证CPU执行指令时可正确访问内存单元，<font color="red">需要将用户程序中的逻辑地址转换为运行时可由机器直接寻址的物理地址</font>，这一过程称为地址重定位。</strong></p><h2 id="4-静态重定位和动态重定位"><a href="#4-静态重定位和动态重定位" class="headerlink" title="4.静态重定位和动态重定位"></a>4.静态重定位和动态重定位</h2><h3 id="1-静态重定位"><a href="#1-静态重定位" class="headerlink" title="(1).静态重定位"></a>(1).静态重定位</h3><p><strong>当用户程序加载到内存时，一次性实现逻辑地址到物理地址的转换。</strong>一般可以由软件完成。</p><blockquote><ul><li><strong>优点：</strong>在程序的执行过程中，地址就直接可以拿来去到内存中取指令或者取数据。</li><li><strong>缺点：</strong>程序在内存的位置不能改变，一旦改变就要重新计算这个转换过程 。</li></ul></blockquote><h3 id="2-动态重定位"><a href="#2-动态重定位" class="headerlink" title="(2).动态重定位"></a>(2).动态重定位</h3><p><strong>在进程执行过程中进行地址变换。 →→ 即逐条指令执行时完成地址转换。</strong>为了加快速度，需要硬件部件支持。<br><img src="//zybtree.github.io/2020/08/17/存储模型/2.png" style="zoom:35%;"></p><p>假设起始的地址是在重定位寄存器(基址寄存器)中，会把逻辑送到了这个寄存器进行计算， CPU在执行时会取到一个逻辑地址，然后就把这个地址送到了这个重定位寄存器来完成地址转换的工作，得到真正的物理地址。 </p><p><strong>所以逻辑地址经过这样一个部件的转换就会得到物理地址，然后用这个物理地址到内存中去存取相关的指令或者数据。</strong></p><hr><h1 id="二-物理内存管理"><a href="#二-物理内存管理" class="headerlink" title="二.物理内存管理"></a>二.物理内存管理</h1><h2 id="1-空闲内存管理"><a href="#1-空闲内存管理" class="headerlink" title="1.空闲内存管理"></a>1.空闲内存管理</h2><p>管理方式主要分为：等长划分和不等长划分。</p><h3 id="1-等长划分"><a href="#1-等长划分" class="headerlink" title="(1).等长划分"></a>(1).等长划分</h3><p>主要使用的数据结构是 <strong>位图</strong>。</p><p>每个分配单元对应于位图中的一位，0表示空闲，1表示占用(或者相反)</p><h3 id="2-不等长划分"><a href="#2-不等长划分" class="headerlink" title="(2).不等长划分"></a>(2).不等长划分</h3><p>主要使用的数据结构是 空闲区表，已分配区表和空闲块链表。</p><ul><li><p>空闲区表，已分配区表</p><p>表中每一项记录了空闲区 (或已分配区)的起始地址、长度、标志</p></li><li><p>空闲块链表</p><p>每一个表项用链串联起来</p></li></ul><h2 id="2-内存分配算法"><a href="#2-内存分配算法" class="headerlink" title="2.内存分配算法"></a>2.内存分配算法</h2><blockquote><p> 以空闲区表和已分配区表为例介绍内存分配的算法。</p></blockquote><ul><li><p><strong>首次适配 first fit</strong></p><ul><li>在空闲区表中找到第一个满足进程要求的空闲区</li></ul></li><li><p><strong>下次适配 next fit</strong></p><ul><li>从上次找到的空闲区处接着查找</li></ul></li><li><p><strong>最佳适配 best fit</strong></p><ul><li>查找整个空闲区表，找到能够满足进程要求的最小空闲区</li></ul></li><li><p><strong>最差适配 worst fit</strong></p><ul><li>总是分配满足进程要求的最大空闲区</li></ul></li></ul><p>当找到了满足要求的空闲区后，<strong>将该空闲区分为两部分，一部分供进程使用，另一部分形成新的空闲区。</strong></p><p>示例：</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/5.png" style="zoom:33%;"></p><h2 id="3-回收问题"><a href="#3-回收问题" class="headerlink" title="3.回收问题"></a>3.回收问题</h2><p>内存回收算法主要考虑的就是合并。</p><ul><li><p>当某一块归还后，<strong>前后空闲空间合并，修改内存空闲区表</strong></p></li><li><p>四种情况 </p><ul><li><strong>上相邻、下相邻、上下都相邻、上下都不相邻</strong></li></ul></li></ul><hr><h1 id="三-伙伴系统"><a href="#三-伙伴系统" class="headerlink" title="三.伙伴系统"></a>三.伙伴系统</h1><p>伙伴系统是Linux低层内存管理采用的一种经典的内存分配方案。它是一种特殊的 “分离适配”算法。</p><p><strong>主要思想：</strong>将内存按2的幂进行划分，组成若干空闲块链表;查找该链表找到能满足进程需求的最佳匹配块。</p><p>算法：</p><ul><li><strong>首先将整个可用空间看作一块: $2^U$</strong></li><li><strong>假设进程申请的空间大小为 s，如果满足$2^{U-1} &lt; s &lt;= 2^U$，则分配整个块。</strong></li><li><p><strong>否则，将块划分为两个大小相等的伙伴，大小为$2^{U-1}$</strong></p></li><li><p><strong>一直划分下去直到产生<font color="red">大于或等于 s 的最小块</font></strong></p></li></ul><p>示例：</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/6.png" style="zoom:33%;"></p><hr><h1 id="四-基本内存管理方案"><a href="#四-基本内存管理方案" class="headerlink" title="四.基本内存管理方案"></a>四.基本内存管理方案</h1><blockquote><p>单一连续区、固定分区和可变分区，它们的特点进程作为一个整体进入一片连续的区域。</p><p> 页式，段式和段页式这三种方案不是整个进程进入内存的，而是进入内存的若干个区域，而且这些区域也不连续。</p></blockquote><h2 id="1-单一连续区"><a href="#1-单一连续区" class="headerlink" title="1.单一连续区"></a>1.单一连续区</h2><p><strong>基本思想：</strong>一段时间内只有一个进程在内存。</p><p><strong>特点：</strong>简单，内存利用率低</p><p>有三种不同的布局：</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/7.png" style="zoom:33%;"></p><h2 id="2-固定分区"><a href="#2-固定分区" class="headerlink" title="2.固定分区"></a>2.固定分区</h2><ul><li><strong>把内存空间分割成若干区域，称为分区</strong> </li><li><strong>每个分区的大小可以相同也可以不同</strong> </li><li><strong>分区大小固定不变</strong></li><li><strong>每个分区装一个且只能装一个进程</strong></li></ul><p>示例：</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/8.png" style="zoom:33%;"></p><h2 id="3-可变分区"><a href="#3-可变分区" class="headerlink" title="3.可变分区"></a>3.可变分区</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><ul><li><p>根据进程的需要，把内存空闲空间分割出一个分区，分配给该进程</p></li><li><p>剩余部分成为新的空闲区</p></li></ul><p>缺点：</p><ul><li>外碎片</li><li>导致利用率降低</li></ul><h3 id="2-碎片问题的解决"><a href="#2-碎片问题的解决" class="headerlink" title="(2).碎片问题的解决"></a>(2).碎片问题的解决</h3><p><strong>碎片：很小的、不易利用的空闲区，会导致内存利用率下降。</strong></p><p>解决方案：</p><p><strong>紧缩技术(memory compaction)：</strong>在内存移动程序，将所有小的空闲区合并为较大的空闲区。</p><blockquote><p>不是所有进程都可以随便的搬家移动的，需要考虑两个问题：</p><ul><li><p><strong>开销。</strong>如果有很多进程都需要移动，这会导致时间，空间上的开销。 </p></li><li><p><strong>移动的时机。</strong> 比如一个进程正在做磁盘的IO操作 ，那这时此进程就不能够移动去别处，因为这样会影响IO的结果。 </p></li></ul></blockquote><h2 id="4-页式存储管理方案"><a href="#4-页式存储管理方案" class="headerlink" title="4.页式存储管理方案"></a>4.页式存储管理方案</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><h4 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h4><ul><li><strong>用户进程地址空间被划分为大小相等的部分，称为<font color="red">页(page) 或页面</font>，从0开始编号。</strong></li><li><strong>内存空间按同样大小划分为大小相等的区域，称 为<font color="red">页框(page frame)</font>，从0开始编号;也称为物理页面，页帧，内存块。</strong></li></ul><h4 id="内存分配-规则"><a href="#内存分配-规则" class="headerlink" title="内存分配(规则)"></a>内存分配(规则)</h4><ul><li><p><strong>以页为单位进行分配，并按进程需要的页数来分配；<font color="red">逻辑上相邻的页，物理上不一定相邻。</font></strong></p></li><li><p>典型页面尺寸：4K 或 4M</p></li></ul><h4 id="逻辑地址"><a href="#逻辑地址" class="headerlink" title="逻辑地址"></a>逻辑地址</h4><p>逻辑地址实际上由两部分组成，页号和页内地址。</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/9.png" style="zoom:30%;"></p><p>这种划分是系统硬件自动完成的。 对用户来讲实际上是透明的，这是页式存储管理方案的一个特点。</p><h3 id="2-内存分配的过程"><a href="#2-内存分配的过程" class="headerlink" title="(2).内存分配的过程"></a>(2).内存分配的过程</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/10.png" style="zoom:30%;"></p><p><strong><font color="red">页表</font>会把逻辑上的某一页和物理上的某一页框的对应关系记录下来， 通过页表记录的这样一个映射关系。页表里的一行叫做<font color="red">页表项</font>。</strong> </p><h3 id="3-相关数据结构与地址转换"><a href="#3-相关数据结构与地址转换" class="headerlink" title="(3).相关数据结构与地址转换"></a>(3).相关数据结构与地址转换</h3><ul><li><strong>页表</strong><ul><li><strong>页表项：</strong>记录了逻辑页号与页框号的对应关系 </li><li>每个进程一个页表，存放在内存</li><li>页表起始地址保存在系统的寄存器中，或者可能是在PCB中，我也不清楚。</li></ul></li><li><strong>空闲内存管理</strong><ul><li>用 bitmap位图这个数据结构可以管理物理内存</li></ul></li><li><strong>地址转换(硬件支持)</strong><ul><li><strong><font color="red">CPU取到逻辑地址，自动划分为页号和页内地址；用页号查页表，得到页框号，再与页内偏移拼接成为物理地址</font></strong></li></ul></li></ul><h3 id="4-问题"><a href="#4-问题" class="headerlink" title="(4).问题"></a>(4).问题</h3><p>会产生<strong>内碎片问题</strong>。 </p><blockquote><p>假设一个进程需要五页，然后加一条指令，尽管只有还剩一条指令，但还是得要给它分六页，所以实际上还是得给它分成六页，假设最后一条指令在这个第六页上，只占了很小很小的空间，整个大部分的页面都是空的，而这些空的内存空间就是内碎片。</p></blockquote><h2 id="5-段式存储管理方案"><a href="#5-段式存储管理方案" class="headerlink" title="5.段式存储管理方案"></a>5.段式存储管理方案</h2><h3 id="1-基本概念-2"><a href="#1-基本概念-2" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><h4 id="设计思想-1"><a href="#设计思想-1" class="headerlink" title="设计思想"></a>设计思想</h4><ul><li>用户进程地址空间:按程序自身的逻辑关系划分为若干个程序段，每个程序段都有一个段名</li><li>内存空间被动态划分为若干长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定。</li></ul><h4 id="内存分配-规则-1"><a href="#内存分配-规则-1" class="headerlink" title="内存分配(规则)"></a>内存分配(规则)</h4><ul><li>以段为单位进行分配，每段 在内存中占据连续空间，但各段之间可以不相邻</li></ul><h4 id="逻辑地址-1"><a href="#逻辑地址-1" class="headerlink" title="逻辑地址"></a>逻辑地址</h4><p><img src="//zybtree.github.io/2020/08/17/存储模型/11.png" style="zoom:33%;"></p><p>逻辑地址和页式不一样的地方是：段号和段内地址不是自动划分的，必须显示给出。</p><h3 id="2-内存分配的过程-1"><a href="#2-内存分配的过程-1" class="headerlink" title="(2).内存分配的过程"></a>(2).内存分配的过程</h3><p>示例：</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/12.png" style="zoom:30%;"></p><p><img src="//zybtree.github.io/2020/08/17/存储模型/13.png" style="zoom:30%;"></p><p><strong>要把逻辑地址和物理地址对应关系记录下来就需要一个数据结构，这就是段表。</strong> </p><h3 id="3-相关数据结构与地址转换-1"><a href="#3-相关数据结构与地址转换-1" class="headerlink" title="(3).相关数据结构与地址转换"></a>(3).相关数据结构与地址转换</h3><ul><li><p><strong>段表:</strong></p><ul><li><strong>每项记录了段号、段首地址和段长度之间的关系</strong></li><li><strong>每个进程一个段表，存放在内存</strong></li><li><strong>段表起始地址保存在何处?与页表一样</strong></li></ul></li><li><p><strong>物理内存管理：</strong></p><ul><li>可以用不等长的物理内存管理方法，可以用空闲区表来管理这个物理内存</li></ul></li><li><p><strong>地址转换(硬件支持)</strong></p><ul><li><font color="red">**CPU取到逻辑地址，用段号查段表，得到该段在内存的起始地址，与段内偏移地址计算出物理地址**</font></li></ul></li></ul><h2 id="6-段页式存储管理方案"><a href="#6-段页式存储管理方案" class="headerlink" title="6.段页式存储管理方案"></a>6.段页式存储管理方案</h2><h3 id="1-基本概念-3"><a href="#1-基本概念-3" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><h4 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h4><ul><li><strong>综合页式、段式方案的优点，克服二者的缺点</strong></li></ul><h4 id="设计思想-2"><a href="#设计思想-2" class="headerlink" title="设计思想"></a>设计思想</h4><ul><li>用户进程划分<strong>：先按段划分，每一段再按页面划分</strong></li></ul><h4 id="逻辑地址-2"><a href="#逻辑地址-2" class="headerlink" title="逻辑地址"></a>逻辑地址</h4><p><img src="//zybtree.github.io/2020/08/17/存储模型/14.png" style="zoom:33%;"></p><ul><li>由三部分组成：第一部分是<strong>段号</strong>，然后是原来的<strong>段内地址</strong>又划分成<strong>页号</strong>和<strong>页内地址</strong>，所以由三部分组成。</li></ul><h4 id="内存划分"><a href="#内存划分" class="headerlink" title="内存划分"></a>内存划分</h4><ul><li>同页式存储管理方案</li></ul><h4 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h4><ul><li>以页为单位进行分配</li></ul><h3 id="2-段页式存储管理"><a href="#2-段页式存储管理" class="headerlink" title="(2).段页式存储管理"></a>(2).段页式存储管理</h3><p><strong>数据结构及有关操作</strong></p><ul><li><strong>段表</strong>：记录了每一段的页表始址和页表长度</li><li><strong>页表</strong>：记录了逻辑页号与页框号的对应关系。每一段有一张页表，一个进程有多个页表</li></ul><p><strong>每个进程由一张段表和多个页表组成的。</strong></p><ul><li><strong>空闲区管理</strong>：同页式管理</li><li><strong>内存分配、回收</strong>：同页式管理</li></ul><p><strong>地址转换</strong></p><p><img src="//zybtree.github.io/2020/08/17/存储模型/15.png" style="zoom:33%;"></p><p>首先拿到逻辑地址，逻辑地址是由两部分组成：段号和段内地址。用段号去查段表，得到了所对应的页表的起始地址和长度，然后再把段内地址自动划分成两部分：页号页内地址，用页号去查对应的页表，得到页框号，然后再和页内地址拼接成最后的物理地址。 </p><p>整个这个过程比较复杂，成本也比较高。</p><h2 id="7-基本内存管理方案小结"><a href="#7-基本内存管理方案小结" class="headerlink" title="7.基本内存管理方案小结"></a>7.基本内存管理方案小结</h2><p><img src="//zybtree.github.io/2020/08/17/存储模型/16.png" style="zoom:33%;"></p><h1 id="五-交换技术SWAPPING"><a href="#五-交换技术SWAPPING" class="headerlink" title="五.交换技术SWAPPING"></a>五.交换技术SWAPPING</h1><h2 id="1-为什么引入SWAPPING"><a href="#1-为什么引入SWAPPING" class="headerlink" title="1.为什么引入SWAPPING"></a>1.为什么引入SWAPPING</h2><p>为了解决在较小的内存空间运行较大的进程。采用了内存”扩充”技术。</p><ul><li><strong>内存紧缩技术(例如:可变分区)</strong> </li><li><strong>覆盖技术 overlaying</strong></li><li><strong>交换技术 swapping</strong></li><li><strong>虚拟存储技术 virtual memory</strong></li></ul><h2 id="2-覆盖技术"><a href="#2-覆盖技术" class="headerlink" title="2.覆盖技术"></a>2.覆盖技术</h2><h3 id="1-基本概念-4"><a href="#1-基本概念-4" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><p><strong>解决的问题：程序大小超过物理内存总和</strong></p><ul><li><p>程序执行过程中，程序的不同部分在内存中相互替代</p><ul><li><p>按照其自身的逻辑结构，<strong>将那些不会同时执 行的程序段共享同一块内存区域</strong></p></li><li><p>要求程序各模块之间有明确的调用结构</p></li></ul></li><li><p>程序员声明覆盖结构，操作系统完成自动覆盖</p></li></ul><blockquote><p>主要用于早期的操作系统</p></blockquote><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="(2).示例"></a>(2).示例</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/17.png" style="zoom:30%;"></p><h2 id="3-交换技术"><a href="#3-交换技术" class="headerlink" title="3.交换技术"></a>3.交换技术</h2><h3 id="1-基本概念-5"><a href="#1-基本概念-5" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><ul><li><p>设计思想 </p><ul><li>内存空间紧张时，<strong>系统将内存中某些进程暂时移到外存，把外存中某些进程换进内存，占据前者所占用的区域</strong>(进程在内存与磁盘之间的动态调度)</li></ul></li><li><p>讨论：实现时遇到的问题</p><ul><li><strong>进程的哪些内容要交换到磁盘?会遇到什么困难?</strong> <ul><li><strong>运行时创建或修改的内容:栈和堆</strong></li></ul></li><li><strong>在磁盘的什么位置保存被换出的进程?</strong><ul><li><strong><font color="red">交换区</font>:一般系统会指定一块特殊的磁盘区域作为交换空间(swap space)，包含连续的磁道， 操作系统可以使用底层的磁盘读写操作对其高效访问。</strong></li></ul></li><li><strong>交换时机?</strong><ul><li><strong>只要不用就换出(很少再用);</strong></li><li><strong><font color="red">内存空间不够或有不够的危险时换出</font></strong></li></ul></li><li><strong>如何选择被换出的进程?</strong><ul><li><strong>考虑进程的各种属性;不应换出处于等待I/O状态的进程</strong></li></ul></li><li><strong>如何处理进程空间增长?</strong><ul><li><strong>预留空间向上增长</strong></li><li><strong>预留空间同向增长</strong></li></ul></li></ul></li></ul><p><img src="//zybtree.github.io/2020/08/17/存储模型/18.png" style="zoom:33%;"></p><hr><h1 id="六-虚拟存储技术"><a href="#六-虚拟存储技术" class="headerlink" title="六.虚拟存储技术"></a>六.虚拟存储技术</h1><h2 id="1-基本概念-6"><a href="#1-基本概念-6" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><ul><li><p><strong><font color="red">虚拟存储技术</font></strong>是指:<strong>当进程运行时，先将其一部分装入内存，另一部分暂留在磁盘，当要执行的指令或访问的数据不在内存时，由操作系统自动完成将它们从磁盘调入内存的工作。</strong></p></li><li><p><strong><font color="red">虚拟地址空间</font>：引入了虚拟存储技术之后每个进程的地址空间</strong></p></li><li><p><strong><font color="red">虚拟地址</font>：是在虚拟内存中指令或数据的位置，该位置可以被访问，仿佛它是内存的一部分</strong></p></li></ul><p>产生疑问：虚拟内存的地址究竟在哪里？</p><h2 id="2-存储器的层次结构"><a href="#2-存储器的层次结构" class="headerlink" title="2.存储器的层次结构"></a>2.存储器的层次结构</h2><p><img src="//zybtree.github.io/2020/08/17/存储模型/19.png" style="zoom:30%;"></p><h2 id="3-虚存与存储体系"><a href="#3-虚存与存储体系" class="headerlink" title="3.虚存与存储体系"></a>3.虚存与存储体系</h2><p><img src="//zybtree.github.io/2020/08/17/存储模型/20.png" style="zoom:33%;"></p><ul><li><strong>把内存与磁盘有机地结合起来使用，从而得到一个容量很大的“内存”，即<font color="red">虚存</font>。</strong></li><li><strong>虚存是对物理内存的抽象，构建在存储体系之上，由操作系统协调各存储器的使用</strong></li><li><strong>虚存提供了一个比物理内存空间大得多的地址空间</strong></li></ul><blockquote><p>虚存的大小受到了<strong>计算机系统的寻址机制</strong>还有<strong>磁盘空间中可用空间</strong>的这两方面的限制。</p></blockquote><h2 id="4-地址保护"><a href="#4-地址保护" class="headerlink" title="4.地址保护"></a>4.地址保护</h2><ul><li><strong>确保每个进程有独立的地址空间</strong></li><li><strong>确保进程访问合法的地址范围</strong></li><li><strong>确保进程的操作是合法的</strong></li></ul><blockquote><p>防止地址越界，防止访问越权。</p></blockquote><p>示例</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/21.png" style="zoom:35%;"></p><h2 id="5-虚拟页式"><a href="#5-虚拟页式" class="headerlink" title="5. 虚拟页式"></a>5. 虚拟页式</h2><p>把<strong>虚拟存储技术</strong>应用到<strong>页式存储管理方案</strong>就得到了<strong>虚拟页式存储管理系统</strong></p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1).概念"></a>(1).概念</h3><p><strong>基本思想</strong></p><ul><li><strong>进程开始运行之前，不是装入全部页面，而是装入一个或零个页面</strong></li><li><strong>之后，根据进程运行的需要，动态装入其 他页面</strong></li><li><strong>当内存空间已满，而又需要装入新的页面 时，则根据某种算法置换内存中的某个页 面，以便装入新的页面</strong></li></ul><h3 id="2-两种方式"><a href="#2-两种方式" class="headerlink" title="(2).两种方式"></a>(2).两种方式</h3><p><strong>1、请求调页(demand paging)</strong></p><p>当需要这个页面，这个页面还没在内存，这时操作系统把它调入内存。</p><p><strong>2、预先调页(prepaging)</strong></p><p>预测猜测哪些页面即将会被用到，提前把它调入内存</p><p><strong>虚拟存储技术其实<font color="red">以CPU时间和磁盘空间换取昂贵内存空间</font>， 这是操作系统中的资源转换技术。</strong></p><hr><h1 id="六-页表及页表项的设计"><a href="#六-页表及页表项的设计" class="headerlink" title="六.页表及页表项的设计"></a>六.页表及页表项的设计</h1><p><img src="//zybtree.github.io/2020/08/17/存储模型/22.png" style="zoom:30%;"></p><p>当进程运行的过程中如果要访问一些页面，那就要通过一个页表，页表记录哪些页面已经加载到内存。</p><h2 id="1-页表表项设计"><a href="#1-页表表项设计" class="headerlink" title="1.页表表项设计"></a>1.页表表项设计</h2><h3 id="1-基本概念-7"><a href="#1-基本概念-7" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><p>页表<strong>由页表项组成</strong>，包含页框号、有效位、访问位、修改位、保护位。</p><ul><li><strong>页框号 (内存块号、物理页面号、页帧号)</strong></li><li><p><strong>有效位(驻留位、中断位)：</strong>表示该页是在内存还是在磁盘</p><ul><li>有效位是0表示这个页面还没有读进内存，这时页框号是无效的；如果有效位为1 ，表示相应的虚页面的内容已经读入内存。</li></ul></li><li><p><strong>访问位：</strong>引用位</p><ul><li>引用位为1表示被引用</li></ul></li><li><strong>修改位：</strong>此页在内存中是否被修改过 <ul><li>修改过则为1</li></ul></li><li><strong>保护位：</strong>读/可读写</li></ul><p><strong>通常，页表项是硬件设计的。</strong></p><h3 id="2-关于页表"><a href="#2-关于页表" class="headerlink" title="(2).关于页表"></a>(2).关于页表</h3><p> <strong>32位虚拟地址空间的页表规模</strong> </p><ul><li>页面大小为4K;页表项大小为4字节 </li><li>则:一个进程地址空间有 $2^{20}$页</li><li>其页表需要占 1024页</li></ul><p><strong>64位虚拟地址空间的页表规模</strong> </p><ul><li><p>页面大小为4K;页表项大小为8字节</p></li><li><p>页表规模: 32,000 TB</p></li></ul><p><strong>页表页在内存中若不连续存放，则需要引入页表页的 地址索引表 → <font color="red">页目录</font></strong></p><h3 id="3-二级页表结构及地址映射"><a href="#3-二级页表结构及地址映射" class="headerlink" title="(3).二级页表结构及地址映射"></a>(3).二级页表结构及地址映射</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/23.png" style="zoom:33%;"></p><h3 id="4-CORE17页表结构"><a href="#4-CORE17页表结构" class="headerlink" title="(4).CORE17页表结构"></a>(4).CORE17页表结构</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/24.png" style="zoom:33%;"></p><blockquote><p> <strong>虚拟地址空间$2^{48}$</strong></p></blockquote><h3 id="5-1386页目录项和页表项"><a href="#5-1386页目录项和页表项" class="headerlink" title="(5).1386页目录项和页表项"></a>(5).1386页目录项和页表项</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/25.png" style="zoom:33%;"></p><ul><li><strong>PFN(Page Frame Number)：页框号</strong> </li><li><strong>P(Present)：有效位</strong> </li><li><strong>A(Accessed)：访问位</strong></li><li><strong>D(Dirty)：修改位</strong> </li><li><strong>R/W(Read/Write)：只读/可读写</strong> </li><li><strong>U/S(User/Supervisor)：用户/内核</strong> </li><li><strong>PWT(Page Write Through)：缓存写策略</strong> </li><li><strong>PCD(Page Cache Disable)：禁止缓存</strong> </li><li><strong>PS(Page Size):大页4M</strong></li></ul><h2 id="2-反转页表"><a href="#2-反转页表" class="headerlink" title="2.反转页表"></a>2.反转页表</h2><h3 id="1-基本概念-8"><a href="#1-基本概念-8" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><h4 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h4><ul><li>从虚拟地址空间出发：<strong>虚拟地址 → 查页表 → 得到页框号 → 形成物理地址 每个进程一张页表</strong></li></ul><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><ul><li><p><strong>从物理地址空间出发，整个系统建立一张页表</strong></p></li><li><p><strong>页表项记录进程i的某虚拟地址(虚页号)与页框号的映射关系</strong></p></li></ul><h3 id="3-反转页表设计"><a href="#3-反转页表设计" class="headerlink" title="(3).反转页表设计"></a>(3).反转页表设计</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/26.png" style="zoom:33%;"><img src="//zybtree.github.io/2020/08/17/存储模型/27.png" style="zoom:33%;"></p><ul><li><p><strong>PowerPC、UltraSPARC和IA-64 等体系结构采用</strong></p></li><li><p><strong>将虚拟地址的页号部分映射到一个散列值</strong></p></li><li><p><strong>散列值指向一个反转页表</strong></p></li><li><strong>反转页表大小与实际内存成固定比例，与进程个数无关</strong></li></ul><hr><h1 id="七-地址转换过程及TLB的引入"><a href="#七-地址转换过程及TLB的引入" class="headerlink" title="七.地址转换过程及TLB的引入"></a>七.地址转换过程及TLB的引入</h1><h2 id="1-地址转换过程"><a href="#1-地址转换过程" class="headerlink" title="1.地址转换过程"></a>1.地址转换过程</h2><p><img src="//zybtree.github.io/2020/08/17/存储模型/28.png" style="zoom:33%;"></p><p><strong>整个过程是由MMU内存管理单元完成的。</strong></p><p><img src="//zybtree.github.io/2020/08/17/存储模型/29.png" style="zoom:33%;"></p><p><strong><font color="red">内存管理单元的作用将CPU取到的虚拟地址转换成物理地址。</font></strong></p><p>MMU的位置如下：</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/31.png" style="zoom:33%;"></p><h2 id="2-快表TLB的引入"><a href="#2-快表TLB的引入" class="headerlink" title="2.快表TLB的引入"></a>2.快表TLB的引入</h2><h3 id="1-问题："><a href="#1-问题：" class="headerlink" title="(1).问题："></a>(1).问题：</h3><ul><li><p><strong>页表 → 两次或两次以上的内存访问</strong></p></li><li><p><strong>CPU的指令处理速度与内存指令的访问速度差异大，CPU的速度得不到充分利用</strong></p></li></ul><p>如何加快地址映射速度，以改善系统性能?</p><p><strong><font color="red">利用程序访问的局部性原理</font>→引入快表(TLB)</strong>→<strong>加快地址转换的速度</strong> </p><h3 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="(2).基本概念"></a>(2).基本概念</h3><p><strong>快表(Translation Look-aside Buffers)：实际上是一个缓冲区。</strong></p><p>特点：</p><ul><li><strong>在CPU中引入的高速缓存(Cache)，可以匹配CPU的处理 速率和内存的访问速度</strong></li><li><p><strong>一种随机存取型存储器，除连线寻址机制外，还有接线逻辑，<font color="red">能按特定的匹配标志在一个存储周期内对所有的字同时进行比较</font></strong></p></li><li><p>快表通常称为相联存储器，<strong>特点是按内容并行查找。</strong></p></li><li><p><strong>快表容量有限，保存正在运行进程的页表的子集(部分页表项)</strong></p></li></ul><p><strong>快表的大小：</strong>像高速缓存一样分成几级，每一级的大小不一样。</p><p><strong>快表的位置：</strong>在CPU片上 </p><h3 id="3-引入快表后地址转换过程示意"><a href="#3-引入快表后地址转换过程示意" class="headerlink" title="(3).引入快表后地址转换过程示意"></a>(3).引入快表后地址转换过程示意</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/32.png" style="zoom:35%;"></p><hr><h1 id="八-页错误"><a href="#八-页错误" class="headerlink" title="八.页错误"></a>八.页错误</h1><h2 id="1-基本概念-9"><a href="#1-基本概念-9" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h2><p>页错误又称页面错误、页故障、页面失效。<strong>指的是地址转换过程中硬件产生的异常。</strong></p><p>具体原因：</p><ul><li><p><strong>所访问的虚拟页面没有调入物理内存 → <font color="red">缺页异常</font></strong></p></li><li><p><strong>页面访问违反权限(读/写、用户/内核)</strong></p></li><li><p><strong>错误的访问地址</strong></p><blockquote><p>代码，数据呀，以及引用的一些共享库是有内容的，但是在访问过程当中的虚拟地址指向了没有 内容的位置，这相当于错误的访问地址。</p></blockquote></li></ul><p><img src="//zybtree.github.io/2020/08/17/存储模型/33.png" style="zoom:33%;"></p><h2 id="2-缺页异常处理"><a href="#2-缺页异常处理" class="headerlink" title="(2).缺页异常处理"></a>(2).缺页异常处理</h2><ul><li><p>是一种<strong>PageFault</strong></p></li><li><p><strong>在地址映射过程中，硬件检查页表时发现所要访 问的页面不在内存，则产生该异常——<font color="red">缺页异常</font></strong></p></li><li><p><strong>由操作系统执行<font color="red">缺页异常处理程序</font>，主要工作：获得磁盘地址， 启动磁盘，将该页调入内存</strong></p><ul><li><strong>第一种可能性：如果内存中有空闲页框，则分配一个页框， 将新调入页装入，并修改页表中相应页表项 的有效位及相应的页框号</strong></li><li><strong>第二种可能性：若内存中没有空闲页框，则要置换内存中某一页框；若该页框内容被修改过，则要将其写回磁盘</strong></li></ul></li></ul><blockquote><p>可以增加预取的功能。 也就是在把页面调入内存的同时，顺带的把相关的一些页面也都调进内存。 比如Windows就会这么做，当要读入一段页面，这个页面是代码内容的话，就会接着多读入几个页面。 数据的话，它也会多读入几个页面，这就可以在一定程度上防止缺页的再发生。</p></blockquote><hr><h1 id="九-软件相关策略"><a href="#九-软件相关策略" class="headerlink" title="九.软件相关策略"></a>九.软件相关策略</h1><h2 id="1-驻留集"><a href="#1-驻留集" class="headerlink" title="1.驻留集"></a>1.驻留集</h2><p><strong>驻留集大小：给每个进程分配多少页框。</strong></p><p>分配策略：</p><ul><li><p><strong>固定分配策略</strong></p><ul><li><strong>进程创建时确定 可以根据进程类型(交互、批处理、应用类)或者基于程序员或系统管理员的需要来确定。</strong></li></ul></li><li><p><strong>可变分配策略</strong> </p><ul><li><strong>根据缺页率评估进程局部性表现</strong></li><li><strong>缺页率高→增加页框数</strong> </li><li><strong>缺页率低→减少页框数</strong> </li><li><strong>系统开销</strong></li></ul></li></ul><h2 id="2-置换问题"><a href="#2-置换问题" class="headerlink" title="2.置换问题"></a>2.置换问题</h2><p><strong>当一个内存已经用完，没有空闲页框时，就需要挑一些页框把它内容换出去，这就是置换。</strong></p><p><strong>置换范围</strong></p><ul><li>计划置换页面的集合是局限在产生缺页中断的进程，还是所有进程的页框?</li></ul><p><strong>置换策略</strong> </p><ul><li>在计划置换的页框集合中，选择换出哪一个页框?</li></ul><h3 id="1-置换范围"><a href="#1-置换范围" class="headerlink" title="(1).置换范围"></a>(1).置换范围</h3><ul><li><p>局部置换策略 </p><ul><li>仅在产生本次缺页的进程的驻留集中选择</li></ul></li><li><p>全局置换策略 </p><ul><li>将内存中所有未锁定的页框都作为置换的候选</li></ul></li></ul><p><img src="//zybtree.github.io/2020/08/17/存储模型/34.png" style="zoom:33%;"></p><h3 id="2-置换策略"><a href="#2-置换策略" class="headerlink" title="(2).置换策略"></a>(2).置换策略</h3><ul><li><p><strong>所有策略的目标</strong></p><p><strong>→置换出的页框是最近最不可能访问的页</strong></p></li><li><p><strong>根据局部性原理，最近的访问历史和最近将要 访问的模式间存在相关性，因此，大多数策略都<font color="red">基于过去的行为来预测将来的行为</font></strong></p></li></ul><blockquote><p><strong>注意：置换策略设计得越精致、越复杂，实现 的软硬件开销就越大</strong></p><p><strong>约束：不能置换被锁定的页框</strong></p></blockquote><h3 id="3-页框锁定"><a href="#3-页框锁定" class="headerlink" title="(3).页框锁定"></a>(3).页框锁定</h3><p>为什么要锁定页面?</p><ul><li><strong>采用虚存技术后</strong><ul><li><strong>开销 → 使进程运行时间变得不确定</strong></li></ul></li><li><strong>给每一页框增加一个锁定位</strong></li><li><strong>通过设置相应的锁定位，不让操作系统将进程使用的页面换出内存，避免产生由交换过程带来的不确定的延迟。</strong></li></ul><blockquote><p>例如:操作系统核心代码、关键数据结构、I/O缓冲</p></blockquote><h2 id="3-清除策略"><a href="#3-清除策略" class="headerlink" title="3.清除策略"></a>3.清除策略</h2><h3 id="1-基本概念-10"><a href="#1-基本概念-10" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><ul><li><p><strong>清除：从进程的驻留集中收回页框</strong></p></li><li><p><strong>虚拟页式系统工作的<font color="red">最佳状态</font>：发生缺页异常时，系统中有大量的空闲页框</strong></p></li><li><p><strong>结论：在系统中<font color="red">保存一定数目的空闲页框供给比使用所有内存并在需要时搜索一个页框有更好的性能</font></strong></p></li></ul><h3 id="2-设计策略"><a href="#2-设计策略" class="headerlink" title="(2).设计策略"></a>(2).设计策略</h3><ul><li><p><strong>设计一个分页守护进程(paging daemon)，多数时间睡眠着，可定期唤醒以检查内存的状态</strong></p></li><li><p><strong>如果空闲页框过少，分页守护进程通过预定的页面置换算法选择页面换出内存</strong></p></li><li><p><strong>如果页面装入内存后被修改过，则将它们写回磁盘。<font color="red">分页守护进程可保证所有的空闲页框是“干净”的</font></strong></p></li></ul><h3 id="3-页缓存技术"><a href="#3-页缓存技术" class="headerlink" title="(3).页缓存技术"></a>(3).页缓存技术</h3><p>当进程需要使用一个已置换出的页框时，如果该页框还没有被新的内容覆盖，系统将它从空闲页框集 合中移出即可恢复该页面。</p><p>页缓冲技术:</p><ul><li><p><strong>不丢弃置换出的页，将它们放入两个表之一：如果未被修改，则放到空闲页链表中，如果修改了，则放到修改页链表中</strong></p></li><li><p><strong>被修改的页定期写回磁盘(不是一次只写一个，大大减 少I/O操作的数量，从而减少了磁盘访问时间)</strong></p></li><li><p><strong>被置换的页仍然保留在内存中，一旦进程又要访问该页，可以迅速将它加入该进程的驻留集合(代价很小)</strong></p></li></ul><hr><h1 id="十-页面置换算法"><a href="#十-页面置换算法" class="headerlink" title="十.页面置换算法"></a>十.页面置换算法</h1><h2 id="1-最佳页面置换算法-OPT"><a href="#1-最佳页面置换算法-OPT" class="headerlink" title="1.最佳页面置换算法 OPT"></a>1.最佳页面置换算法 OPT</h2><p><strong>设计思想:</strong> </p><ul><li><strong>置换以后不再需要的或最远的将来才会用到的页面</strong></li></ul><p><strong>这个算法的实现是要建立在已经知道页面的走向序列的基础之上才能够实施这个算法。所以<font color="red">通常作为一种标准来衡量其他算法的性能</font>。</strong></p><h2 id="2-先进先出算法-FIFO"><a href="#2-先进先出算法-FIFO" class="headerlink" title="2.先进先出算法 FIFO"></a>2.先进先出算法 FIFO</h2><p><strong>设计思想</strong></p><ul><li><strong>选择在内存中驻留时间最长的页并置换它</strong></li></ul><p><strong>实现：<font color="red">页面链表法</font></strong></p><h2 id="3-第二次机会算法-SCR"><a href="#3-第二次机会算法-SCR" class="headerlink" title="3.第二次机会算法 SCR"></a>3.第二次机会算法 SCR</h2><blockquote><p>在先进先出基础上做的改进</p></blockquote><p>设计思想</p><ul><li><strong>按照先进先出算法选择某一页面，检查其访问位R，如果为0，则置换该页；如果为1，则给第二次机会，并将访问位置0</strong></li></ul><p><img src="//zybtree.github.io/2020/08/17/存储模型/35.png" style="zoom:33%;"></p><h2 id="4-时钟算法-CLOCK"><a href="#4-时钟算法-CLOCK" class="headerlink" title="4.时钟算法 CLOCK"></a>4.时钟算法 CLOCK</h2><p>第二次机会算法问题：摘链、 挂链都需要花一些开销。</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/36.png" style="zoom:30%;"></p><p><strong>时钟算法是把所有的页框组织成一个环形，然后用一个指针，通过移动指针来选择下一个要淘汰的页框。</strong></p><h2 id="5-最近未使用算法-NRU"><a href="#5-最近未使用算法-NRU" class="headerlink" title="5.最近未使用算法 NRU"></a>5.最近未使用算法 NRU</h2><h3 id="1-基本思想"><a href="#1-基本思想" class="headerlink" title="(1).基本思想"></a>(1).基本思想</h3><p>设计思想：</p><ul><li><strong>选择在最近一段时间内未使用过的一页并置换</strong></li></ul><p>实现：</p><ul><li><strong>设置页表，表项的两位：访问位(R)， 修改位(M</strong></li></ul><blockquote><p>如果硬件没有这 些位，则可用软 件模拟(做标记)</p></blockquote><p><strong>启动一个进程时，R、M位置0。R位被定期清零(复位)</strong></p><p>发生缺页中断时，操作系统检查R，M: </p><ul><li><strong>第1类：无访问，无修改</strong> </li><li><strong>第2类：无访问，有修改</strong> </li><li><strong>第3类：有访问，无修改</strong> </li><li><strong>第4类：有访问，有修改</strong></li></ul><p>算法思想: <strong>随机从编号最小的非空类中选择一页置换</strong></p><h3 id="2-时钟实现"><a href="#2-时钟实现" class="headerlink" title="(2).时钟实现"></a>(2).时钟实现</h3><ol><li><p><strong>从指针的当前位置开始，扫描页框缓冲区，选择遇到的第一个页框 (r=0;m=0) 用于置换( 本扫描过程中，对使用位不做任何修改)</strong></p></li><li><p><strong>如果第1步失败，则重新扫描，选择第一个(r=0; m=1)的页框(本次扫描过程中，对每个跳过的页框，将其使用位设置成0)</strong></p></li><li><p><strong>如果第2步失败，指针将回到它的最初位置，并且集合中所有页框的使用位均为0。重复第1步，并且，如果有必要，重复第2步。这样将可以找到供置换的页框</strong></p></li></ol><h2 id="6-最近最少使用算法-LRU"><a href="#6-最近最少使用算法-LRU" class="headerlink" title="6.最近最少使用算法 LRU"></a>6.最近最少使用算法 LRU</h2><h3 id="1-基本概念-11"><a href="#1-基本概念-11" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><p>设计思想：</p><ul><li><strong>选择最后一次访问时间距离当前时间最长的一页并置换。即置换<font color="red">未使用时间最长</font>的一页</strong></li></ul><p>优点：</p><ul><li><strong>性能接近OPT</strong></li></ul><p>实现:</p><ul><li><strong>时间戳或维护一个访问页的栈 → 开销大</strong></li></ul><h3 id="2-硬件实现"><a href="#2-硬件实现" class="headerlink" title="(2).硬件实现"></a>(2).硬件实现</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/37.png" style="zoom:33%;"></p><h2 id="7-最不经常使用算法-NFU"><a href="#7-最不经常使用算法-NFU" class="headerlink" title="7.最不经常使用算法 NFU"></a>7.最不经常使用算法 NFU</h2><p>设计思想：</p><ul><li><strong>选择访问次数最少的页面置换</strong></li></ul><p>实现:</p><ul><li><strong>软件计数器，一页一个，初值为0</strong></li><li><strong>每次时钟中断时，计数器加R</strong></li><li><strong>发生缺页中断时，选择计数器值最小的一页置换</strong></li></ul><h2 id="8-老化算法-AGING"><a href="#8-老化算法-AGING" class="headerlink" title="8.老化算法 AGING"></a>8.老化算法 AGING</h2><p>改进(模拟LRU)：<strong>计数器在加R前先右移一位，R位加到计数器的最左端</strong></p><p><img src="//zybtree.github.io/2020/08/17/存储模型/38.png" style="zoom:33%;"></p><h2 id="9-页面置换算法的应用"><a href="#9-页面置换算法的应用" class="headerlink" title="9.页面置换算法的应用"></a>9.页面置换算法的应用</h2><h3 id="1-例子"><a href="#1-例子" class="headerlink" title="(1).例子"></a>(1).例子</h3><ul><li><p>系统给某进程分配3个页框(固定分配策略)，初始为空</p></li><li><p>进程执行时，页面访问顺序为: 2 3 2 1 5 2 4 5 3 2 5 2 </p></li></ul><p>要求：</p><ul><li>计算应用FIFO、LRU、OPT算法时的缺页次数</li></ul><p><img src="//zybtree.github.io/2020/08/17/存储模型/39.png" style="zoom:33%;"></p><p><img src="//zybtree.github.io/2020/08/17/存储模型/40.png" style="zoom:33%;"></p><h3 id="2-BELADY现象"><a href="#2-BELADY现象" class="headerlink" title="(2).BELADY现象"></a>(2).BELADY现象</h3><p>例子:系统给某进程分配 m个页框，初始为空</p><p>页面访问顺序为：1 2 3 4 1 2 5 1 2 3 4 5</p><p>采用FIFO算法，计算当 m=3 和 m=4 时的缺页中断次数：</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/41.png" style="zoom:33%;"></p><hr><h1 id="十一-工作集算法"><a href="#十一-工作集算法" class="headerlink" title="十一.工作集算法"></a>十一.工作集算法</h1><h2 id="1-影响缺页次数的因素"><a href="#1-影响缺页次数的因素" class="headerlink" title="1.影响缺页次数的因素"></a>1.影响缺页次数的因素</h2><ul><li><strong>页面置换算法</strong></li><li><strong>页面本身的大小</strong> </li><li><strong>程序的编制方法</strong> </li><li><strong>分配给进程的页框数量</strong> </li></ul><p><strong><font color="red">颠簸(Thrashing，抖动) </font>：虚存中，页面在内存与磁盘之间频繁调度，使得调度页面所需的时间比进程实际运行的时间还多， 这样导致系统效率急剧下降，这种现象称为颠簸或抖动。</strong></p><h3 id="1-页面尺寸问题"><a href="#1-页面尺寸问题" class="headerlink" title="(1).页面尺寸问题"></a>(1).页面尺寸问题</h3><ul><li><strong>确定页面大小对于分页的硬件设计非常重要 而对于操作系统是个可选的参数。</strong></li></ul><blockquote><p>Intel80x86/Pentium:4096或4M。</p></blockquote><ul><li><p><strong>引用多种页面尺寸，为有效使用TLB带来灵活性，但给操作系统带来复杂性。</strong></p></li><li><p><strong>页面尺寸考虑的因素：</strong></p><ul><li><strong>内部碎片</strong></li><li><strong>页表长度</strong></li><li><strong>辅助的物理特性</strong></li></ul></li><li><p><strong>最优页面大小：$P = \sqrt{2se}$</strong></p></li></ul><h3 id="2-程序编制方法对缺页次数的影响"><a href="#2-程序编制方法对缺页次数的影响" class="headerlink" title="(2).程序编制方法对缺页次数的影响"></a>(2).程序编制方法对缺页次数的影响</h3><p>例子:分配了一个页框；页面大小为128个整数; 矩阵$A_{128 \times 128}$按行存放</p><p><img src="//zybtree.github.io/2020/08/17/存储模型/42.png" style="zoom:33%;"></p><p>左边的编制方法导致的缺页次数比右边多很多。</p><h3 id="3-分配给进程的页框数与缺页率的关系"><a href="#3-分配给进程的页框数与缺页率的关系" class="headerlink" title="(3).分配给进程的页框数与缺页率的关系"></a>(3).分配给进程的页框数与缺页率的关系</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/43.png" style="zoom:25%;"></p><h2 id="2-工作集-WORKING-SET-模型"><a href="#2-工作集-WORKING-SET-模型" class="headerlink" title="2.工作集(WORKING SET)模型"></a>2.工作集(WORKING SET)模型</h2><h3 id="1-基本思想-1"><a href="#1-基本思想-1" class="headerlink" title="(1).基本思想"></a>(1).基本思想</h3><p>根据程序的局部性原理，<strong>一般情况下，进程在一段时间内总是集中访问一些页面，这些页面称为<font color="red">活跃页面</font>，如果分配给一个进程的物理页面数太少了，使该进程所需的活跃页面不能全部装入内存，则进程在运行过程中将频繁发生中断。如果能为进程提供与活跃页面数相等的物理页面数，则可减少缺页中断次数。</strong></p><ul><li><strong>工作集：一个进程当前正在使用的页框集合</strong></li></ul><blockquote><p> 工作集是需要随时调整的，所以要计算当前的一个工作集是多少。</p></blockquote><ul><li><strong>工作集$W (t,\Delta)$=该进程在过去的$Δ$个虚拟时间单位中访问到的页面的集合。</strong></li></ul><p>工作集内容取决于三个因素：</p><ul><li><p><strong>访页序列特性</strong></p></li><li><p><strong>时刻 t</strong></p></li><li><p><strong>工作集窗口长度 $(Δ)$</strong></p><blockquote><p>窗口越大，工作集就越大</p></blockquote></li></ul><h3 id="2-示例-1"><a href="#2-示例-1" class="headerlink" title="(2).示例"></a>(2).示例</h3><p><img src="//zybtree.github.io/2020/08/17/存储模型/44.png" style="zoom:28%;"></p><h2 id="3-工作集算法"><a href="#3-工作集算法" class="headerlink" title="3.工作集算法"></a>3.工作集算法</h2><h3 id="1-基本思路"><a href="#1-基本思路" class="headerlink" title="(1).基本思路"></a>(1).基本思路</h3><p><strong><font color="red">找出一个不在工作集中的页面并置换它</font></strong></p><p>思路：</p><ul><li><p><strong>每个页表项中有一个字段：记录该页面最后一次 被访问的时间</strong></p></li><li><p><strong>设置一个时间值T</strong> </p></li><li><strong>判断：根据一个页面的访问时间是否落在 “当前时间-T”  之前或之中决定其在工作集之外还是之内</strong></li></ul><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="(2).实现"></a>(2).实现</h3><p>扫描所有页表项，执行操作</p><ol><li><p><strong>如果一个页面的R位是1，则将该页面的最后一 次访问时间设为当前时间，将R位清零</strong></p></li><li><p><strong>如果一个页面的R位是0，则检查该页面的访问时间是否在 “当前时间-T” 之前</strong></p><p><strong>(1). 如果是，则该页面为被置换的页面;</strong></p><p><strong>(2). 如果不是，记录当前所有被扫描过页面的最后访问时间里面的最小值。扫描下一个页面并重复1、2</strong></p></li></ol><h2 id="4-页面置换算法小结"><a href="#4-页面置换算法小结" class="headerlink" title="4.页面置换算法小结"></a>4.页面置换算法小结</h2><p><img src="//zybtree.github.io/2020/08/17/存储模型/45.png" style="zoom:33%;"></p><hr><h1 id="十二-内存映射文件"><a href="#十二-内存映射文件" class="headerlink" title="十二.内存映射文件"></a>十二.内存映射文件</h1><h2 id="1-基本思想-2"><a href="#1-基本思想-2" class="headerlink" title="1.基本思想"></a>1.基本思想</h2><ul><li><p><strong>进程通过一个系统调用(mmap)将一个文件(或部分)映射到其虚拟地址空间的一部分，<font color="red">访问这个文件就象访问内存中的一个大数组，而不是对文件进行读写</font></strong></p></li><li><p><strong>在多数实现中，在映射共享的页面时不会实际 读入页面的内容，而是在访问页面时，页面才 会被每次一页的读入，磁盘文件则被当作后备存储</strong></p><blockquote><p>是利用了虚拟存储机制中的缺页异常，来把相应文件内容读入内存的</p></blockquote></li><li><p><strong>当进程退出或显式地解除文件映射时，所有被修改页面会写回文件</strong></p></li></ul><p><img src="//zybtree.github.io/2020/08/17/存储模型/46.png" style="zoom:25%;"></p><h2 id="2-支持写时复制技术"><a href="#2-支持写时复制技术" class="headerlink" title="2.支持写时复制技术"></a>2.支持写时复制技术</h2><p>例如:两个进程共享三个页，每页都标志成<strong>写时复制</strong></p><p><img src="//zybtree.github.io/2020/08/17/存储模型/47.png" style="zoom:35%;"></p><p><strong>当某一个进程试图要改变其中一个页面的内容时，它要做一个写操作，那么和只读就产生了冲突，就会产生Page Fault。进入了操作系统后，操作系统检查出它是一个写时复制操作，就会在内存里另开辟一个页面把相应的内容写到这个页面里。而新复制的这个页面对于执行写操作的这个进程来讲是一个私有的，对于其他的进程是共享写时复制页面的进程，看不到这样一个结果。这是写时复制技术的一个基本的实现。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://zybtree.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="存储模型" scheme="https://zybtree.github.io/tags/%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>同步机制</title>
    <link href="https://zybtree.github.io/2020/08/12/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
    <id>https://zybtree.github.io/2020/08/12/同步机制/</id>
    <published>2020-08-12T14:54:20.000Z</published>
    <updated>2020-08-17T14:33:10.793Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-进程的并发执行"><a href="#一-进程的并发执行" class="headerlink" title="一.进程的并发执行"></a>一.进程的并发执行</h1><blockquote><p> <strong>问题的提出：</strong>这一讲的问题都是由于并发所引起的.并发是所有问题产生的基础，并发也是操作系统设计的一个基础。</p></blockquote><h2 id="1-进程特征所带来的问题"><a href="#1-进程特征所带来的问题" class="headerlink" title="1.进程特征所带来的问题"></a>1.进程特征所带来的问题</h2><h3 id="1-并发"><a href="#1-并发" class="headerlink" title="(1).并发"></a>(1).并发</h3><ul><li><strong>进程的执行是间断性的。</strong></li></ul><blockquote><p> 每个进程在它的生命周期期间一会儿上CPU执行，一会儿由于某种原因暂停执行，所以每个进程的执行是间断性的 </p></blockquote><ul><li><strong>进程的相对执行速度是不可预测</strong></li></ul><blockquote><p> 进程执行的间断性使得进程的相对执行速度是不可预测的。由于有进程调度，有其他事件的发生，每个进程上CPU执行可能执行一段时间停止，然后再接着执行，所以整个执行的时间是不可预测的。</p></blockquote><h3 id="2-共享"><a href="#2-共享" class="headerlink" title="(2).共享"></a>(2).共享</h3><ul><li><strong>进程/线程之间的制约性</strong></li></ul><blockquote><p>在一个并发环境下多个进程或者线程之间会共享某些资源，在这些资源的使用过程中会产生进程之间的一种制约性。比如当一个进程享用打印机这个资源，另外一个进程在第一个进程没有释放这个资源的前提之下就得不到这个资源，那就得等待。因此在一个并发环境下多个进程的执行会带来一种制约。</p></blockquote><h3 id="3-不确定性"><a href="#3-不确定性" class="headerlink" title="(3).不确定性"></a>(3).不确定性</h3><ul><li><strong>进程执行的结果与其执行的相对速度有关</strong>，是不确定的</li></ul><blockquote><p>进程执行的结果和它的相对执行速度是有关系的，因此在不同的执行顺序的情况下，进程的执行结果也是不确定的。</p></blockquote><h2 id="2-与时间相关的错误例子"><a href="#2-与时间相关的错误例子" class="headerlink" title="2.与时间相关的错误例子"></a>2.与时间相关的错误例子</h2><p>场景是 get、copy和put 三个进程并发执行：</p><p><img src="//zybtree.github.io/2020/08/12/同步机制/1.png" style="zoom:35%;"></p><h3 id="1-并发执行过程的分析"><a href="#1-并发执行过程的分析" class="headerlink" title="(1).并发执行过程的分析"></a>(1).并发执行过程的分析</h3><p><img src="//zybtree.github.io/2020/08/12/同步机制/2.png" style="zoom:25%;"></p><p>假设 g,c,p 分别为 get,copy 和 put 的一次循环过程。因此从当前状态出发能得到正确的结果。 </p><p><img src="/Users/zhangyongbin/Blog/zybTree/source/_posts/同步机制/3.png" style="zoom:25%;"></p><p>所以如果不满足进程的制约关系，调度的顺序不正确，那就会带来这些错误的结果。</p><h3 id="2-进程前趋图"><a href="#2-进程前趋图" class="headerlink" title="(2).进程前趋图"></a>(2).进程前趋图</h3><p>三个进程的制约关系如下：</p><p><img src="//zybtree.github.io/2020/08/12/同步机制/4.png" style="zoom:30%;"></p><blockquote><ul><li><p>当get执行完第一个循环之后，只能够copy执行它的第一个循环。 </p></li><li><p>当copy执行完第一个循环之后可以 是put执行第一个循环，也可以是get执行第二个循环。</p></li><li><p>以上两个都执行完了，才能够去执行copy的第二个循环。</p></li></ul></blockquote><p>因此这三个进程之间的制约关系应该满足这样一个前趋图才能保证不出错误。</p><hr><h1 id="二-进程互斥"><a href="#二-进程互斥" class="headerlink" title="二.进程互斥"></a>二.进程互斥</h1><h2 id="1-竞争条件"><a href="#1-竞争条件" class="headerlink" title="1.竞争条件"></a>1.竞争条件</h2><p>竞争条件定义：<strong>两个或多个进程读写某些共享数据， 而最后的结果取决于进程运行的精确时序。</strong></p><blockquote><p> 和时间是相关的 这就是带来了竞争条件。</p><p>竞争条件是由于有一个共享的资源，而多个进程都对这个数据进行相应的操作，所以会带来竞争条件这个概念，比如打印机。</p></blockquote><h2 id="2-进程互斥的概念"><a href="#2-进程互斥的概念" class="headerlink" title="2.进程互斥的概念"></a>2.进程互斥的概念</h2><p><strong>进程互斥的概念:</strong>由于各进程要求使用共享资源(变量、文件等)， 而这些资源需要<strong>排他性使用</strong>，各<strong><font color="red">进程之间竞争使用这些资源</font></strong>，这一关系称为进程互斥。</p><p><strong>临界资源 (critical resource)</strong>：系统中<strong><font color="red">某些资源一次只允许一个进程使用</font></strong>，称这样的资源为<strong>临界资源</strong>或<strong>互斥资源</strong>或<strong>共享变量</strong>。</p><blockquote><p>进程互斥所使用的共享资源是一个核心，这个共享资源就是临界资源。</p></blockquote><p><strong>临界区(互斥区) [critical section(region)]</strong>： 各个进程中对某个临界资源(共享变量)实施操作的程序片段。</p><blockquote><p>当多个进程都要使用同一个共享资源时，它的代码里就会有相应的操作。而这些代码就是临界区。 </p><p>这些程序片段，分散在不同的进程里，它们的共同的特点是对同一个共享变量进行一些操作。这一段代码，和另外一个进程的这一段代码<strong>互为临界区，互为互斥区</strong>。</p></blockquote><h2 id="3-临界区的使用原则"><a href="#3-临界区的使用原则" class="headerlink" title="3.临界区的使用原则"></a>3.临界区的使用原则</h2><p>如下图所示，A进程在临界区里还没有出临界区，如果B进程上CPU之后也想进临界区，应该不能够让它进去，如果B进程也进临界区，就会出现关键活动的交叉，带来前面所介绍的各种各样的错误。因此当B进程想要进临界区时，由于A进程还在临界区里，所以 B 进程只能够被阻塞。</p><p><img src="//zybtree.github.io/2020/08/12/同步机制/6.png" style="zoom:36%;"></p><blockquote><p> 回顾上一章优先级反转问题。 有一个低优先级的进程进入了临界区，因为它优先级比较低，有更高优先级进程就绪时就会抢占它的CPU ，可低优先级进程已经在临界区里，所以更高优先级的进程也上不了CPU运行，因为上CPU运行也进不了临界区。所以就被阻塞。</p><p>而在高优先级和低优先级之间又会有中级优先级且非常耗时的一些进程在执行，使得低优先级的进程上不了CPU ，也就不能够让高优先级的进程尽快上 CPU。</p></blockquote><p>给出临界区的使用原则：</p><ul><li><strong>没有进程在临界区时，想进入临界区的进程可进入</strong></li><li><strong>不允许两个进程同时处于其临界区中</strong></li><li><strong>临界区外运行的进程不得阻塞其他进程进入临界区</strong> </li><li><strong>不得使进程无限期等待进入临界区</strong></li></ul><h2 id="4-实现进程互斥的方案"><a href="#4-实现进程互斥的方案" class="headerlink" title="4.实现进程互斥的方案"></a>4.实现进程互斥的方案</h2><h3 id="1-软件方案"><a href="#1-软件方案" class="headerlink" title="(1).软件方案"></a>(1).软件方案</h3><h4 id="软件解法1"><a href="#软件解法1" class="headerlink" title="软件解法1"></a>软件解法1</h4><p><img src="//zybtree.github.io/2020/08/12/同步机制/7.png" style="zoom:28%;"></p><p>假设 P先上的CPU，free的初值是 false ，所以循环结束。 </p><p>如果这时进程P被切换下CPU，而上CPU的正好又是进程 Q，那么进程Q也要判断free是不是false，由于进程P还没有来得及改变它的值，因此Q检测的结果free也等于false ，继续往下执行把 free 变成 true ，然后进入了临界区。 如果Q进入临界区之后又一次被切换下去了。假设正好又是P上CPU了，把 free 变成 true ，然后进入临界区。结果在临界区里两个进程，不满足原则。这就是一个错误的解法。 </p><p>解决方案： </p><p><strong>把两条语句写成一个lock函数，如果把lock函数设计成一个原语</strong>，在执行过程中不容许被中断，那么这个操作就是正确的了。 </p><h4 id="软件解法2"><a href="#软件解法2" class="headerlink" title="软件解法2"></a>软件解法2</h4><p><img src="//zybtree.github.io/2020/08/12/同步机制/8.png" style="zoom:28%;"></p><p>如果P进程想进临界区，而turn等于false ，所以它一直在等待进入临界区。可是如果Q进程始终没有进过临界区，也不想进临界区，那么 P进程就进不了临界区，尽管临界区里没有进程。也就是说，在临界区外的进程Q阻止了P进程进临界区。这也是不允许的。</p><h4 id="软件解法3"><a href="#软件解法3" class="headerlink" title="软件解法3"></a>软件解法3</h4><p><img src="//zybtree.github.io/2020/08/12/同步机制/9.png" style="zoom:28%;"></p><p>如果当pturn设置为true之后，紧跟着qturn也是true，这就会导致两个进程都进不了临界区，都在”谦让”。而这，就是<code>After you</code>问题。</p><h4 id="软件解法4——DEKKER算法"><a href="#软件解法4——DEKKER算法" class="headerlink" title="软件解法4——DEKKER算法"></a>软件解法4——DEKKER算法</h4><p><img src="//zybtree.github.io/2020/08/12/同步机制/10.png" style="zoom:28%;"></p><p>在解法三的基础上引入turn，让turn值来决定是哪一个进程进入临界区，但是这个算法会出现<code>忙等待 busy waiting</code>问题，浪费了时间。</p><h4 id="软件解法5——PETERSON算法"><a href="#软件解法5——PETERSON算法" class="headerlink" title="软件解法5——PETERSON算法"></a>软件解法5——PETERSON算法</h4><p><img src="//zybtree.github.io/2020/08/12/同步机制/11.png" style="zoom:28%;"></p><p>当任何一个进程想进临界区时，它只需要调用<code>enter_region</code>函数，查看能发安全地进入临界区，如果能安全地进入临界区，那么就是相当于这个函数执行结束，可以进临界区。如果不能够安全地进入临界区，就会在这个函数当中去等待进入临界区。 </p><p>调用这个函数是用进程号，当进程使用完临界区的相关资源之后，出临界区时就调用<code>leave_region</code>函数，就可以让其他的进程进入临界区。</p><h3 id="2-硬件方案"><a href="#2-硬件方案" class="headerlink" title="(2).硬件方案"></a>(2).硬件方案</h3><h4 id="硬件解法1——中断屏蔽法"><a href="#硬件解法1——中断屏蔽法" class="headerlink" title="硬件解法1——中断屏蔽法"></a>硬件解法1——中断屏蔽法</h4><p>利用开关中断指令，<strong>是一条允许中断或禁止中断的指令</strong>。</p><p>操作就是在<strong>进临界区之前先把中断关闭，然后进入临界区做相应的操作，出临界区时再把中断打开，允许中断。</strong>这实际上就是<strong>原语操作。</strong></p><p>特点：</p><ul><li>简单，高效</li><li>代价高，限制CPU并发能力(临界区大小) </li><li>不适用于多处理器</li><li>适用于操作系统本身，不适于用户进程</li></ul><h4 id="硬件解法2——“测试并加锁”指令"><a href="#硬件解法2——“测试并加锁”指令" class="headerlink" title="硬件解法2——“测试并加锁”指令"></a>硬件解法2——“测试并加锁”指令</h4><p>用测试并加锁这条指令去操作， 这一条指令做了两个事情，一是先读内存单元内容，读到寄存器，然后再去写，把内存单元的内容写上某个值。</p><p><strong>TSL指令：TEST AND SET LOCK</strong></p><p><img src="//zybtree.github.io/2020/08/12/同步机制/12.png" style="zoom:40%;"></p><h4 id="硬件解法3——“交换”指令"><a href="#硬件解法3——“交换”指令" class="headerlink" title="硬件解法3——“交换”指令"></a>硬件解法3——“交换”指令</h4><p>交换指令的作用<strong>是把两个位置，可能是寄存器或内存单元，在一条指令结束的时把两个位置的内容进行一个交换。</strong></p><p><strong>XCHG指令：EXCHANGE</strong></p><p><img src="//zybtree.github.io/2020/08/12/同步机制/13.png" style="zoom:40%;"></p><hr><h1 id="三-进程同步"><a href="#三-进程同步" class="headerlink" title="三.进程同步"></a>三.进程同步</h1><blockquote><p>进程互斥指进程之间具有一种竞争关系，而进程同步指多个进程之间的协作关系 。</p></blockquote><p><strong>进程同步 (synchronization)：指系统中多个进程中发生的事件存在<font color="red">某种时序关系</font>，需要相互合作，共同 完成一项任务。</strong>具体地说，一个进程运行到某一点时， 要求另一伙伴进程为它提供消息，在未获得消息之前，该进程进入阻塞态， 获得消息后被唤醒进入就绪态。</p><h2 id="1-生产者与消费者问题"><a href="#1-生产者与消费者问题" class="headerlink" title="1.生产者与消费者问题"></a>1.生产者与消费者问题</h2><p><img src="//zybtree.github.io/2020/08/12/同步机制/14.png" style="zoom:32%;"></p><p><img src="//zybtree.github.io/2020/08/12/同步机制/15.png" style="zoom:32%;"></p><blockquote><p>来看一个场景 ：</p><p>消费者判断count是否等于 0，如果在它判断count = 0还没有去调用sleep之前消费者被切换下CPU。那么这个时候count是0，假设生产者又生产了一个数据上CPU，可以看到就不断地去生产放到缓冲区，count也不等于 N ，刚才是0，现在生产者生产了一个数据加完 1 之后count就等于1。这时生产者知道count 等于 1，所以会做一个wakeup。但是由于刚才的消费者还没有sleep，所以做的这个wakeup实际上做了一个空操作，因为没有进程在睡眠，所以就继续接着执行，生产者继续生产。如果生产者被切换下CPU，消费者一上来肯定首先要做sleep，但是这个sleep的进程刚才wakeup已经做完了，所以就不会再被唤醒了。所以没有做到完全解决生产者/消费者问题。</p></blockquote><hr><h1 id="四-信号量及PV操作"><a href="#四-信号量及PV操作" class="headerlink" title="四.信号量及PV操作"></a>四.信号量及PV操作</h1><blockquote><p>之所以叫同步机制是因为通常把进程的互斥看成是一种特殊的同步。它既解决同步的问题，也能解决互斥的问题。这种典型的进程同步机制就称为信号量及PV 操作。</p></blockquote><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><h3 id="1-信号量"><a href="#1-信号量" class="headerlink" title="(1).信号量"></a>(1).信号量</h3><p><strong>信号量：</strong>是一个特殊变量，用于进程间传递信息的一个整数值。</p><p>定义如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struc semaphore &#123;</span><br><span class="line">  <span class="keyword">int</span> count;</span><br><span class="line">  queueType <span class="built_in">queue</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>由一个值和一个队列组成，<code>int值</code>传递信息的整数值，队列允许进程挂到上面。 </p><ul><li><p>声明一个信号量：<code>semaphore s;</code></p></li><li><p>对信号量可以实施的操作: <strong>初始化、P和V</strong> (P、V分别 是荷兰语的test(proberen)和increment(verhogen))</p></li></ul><h3 id="2-PV操作定义"><a href="#2-PV操作定义" class="headerlink" title="(2).PV操作定义"></a>(2).PV操作定义</h3><p><img src="//zybtree.github.io/2020/08/12/同步机制/16.png" style="zoom:34%;"></p><ul><li><p>P、V操作为<strong>原语操作</strong> (primitive or atomic action)</p></li><li><p>在信号量上定义了三个操作: <strong>初始化(非负数)、P操作、V操作</strong></p></li><li><p>最初提出的是二元信号量(解决互斥)</p><blockquote><p>之后，推广到一般信号量(多值)或计数信号量(解决同步)</p></blockquote></li></ul><h2 id="2-用PV操作解决进程间互斥问题"><a href="#2-用PV操作解决进程间互斥问题" class="headerlink" title="2.用PV操作解决进程间互斥问题"></a>2.用PV操作解决进程间互斥问题</h2><h3 id="1-基本步骤"><a href="#1-基本步骤" class="headerlink" title="(1).基本步骤"></a>(1).基本步骤</h3><ul><li><strong>分析并发进程的关键活动，划定临界区</strong></li></ul><ul><li><strong>设置信号量 mutex，初值为1</strong></li><li><strong>在临界区前实施 P(mutex)</strong></li><li><strong>在临界区之后实施 V(mutex)</strong></li></ul><h3 id="2-例子"><a href="#2-例子" class="headerlink" title="(2).例子"></a>(2).例子</h3><p><img src="//zybtree.github.io/2020/08/12/同步机制/17.png" style="zoom:35%;"></p><p>假定有三个进程 P1、 P2、 P3，它们都对同一个临界资源进行相应的操作，设定了一个信号量 mutex ，初值是 1。在临界区的前和后把 P、V操作加上。</p><ul><li>假设P1先上CPU，它在做P操作时把 mutex减1，mutex=0 。0不小于0，所以P1进程就可以进入临界区。</li><li>如果P1进程在临界区的期间被中断了，那么P2进程正好上CPU。它也想进临界区，也做 P(mutex)，而mutex-1 = -1。 因此P2进程就等在mutex队列上。</li><li><p>让出 CPU 之后，假设 P3进程又上CPU。它也要进临界区。mutex -1 = 2。因此P3 进程也等在这个信号量上，等在P2后面，让出CPU。 </p></li><li><p>假设P1又上CPU， 然后它在临界区里完成了工作后出临界区。，接着会执行一个 V(mutex) ，mutex + 1 = -1，这个时候信号量的值还是小于等于 0，因此V操作就会到队列里找到进程P2并把它送到就绪队列，然后P1接着做别的事情。 </p></li><li><p>如果P2上CPU了，它就下一个就进入临界区。P操作执行完后，它接着就进临界区，当它出临界区又做一次 V 操作，mutex +1 = 0，还是小于等于 0 ，所以V操作就会把队列里等的P3进入就绪，就是这样一个过程。</p></li></ul><h2 id="3-用信号量解决生产者-消费者问题"><a href="#3-用信号量解决生产者-消费者问题" class="headerlink" title="3.用信号量解决生产者/消费者问题"></a>3.用信号量解决生产者/消费者问题</h2><p><img src="//zybtree.github.io/2020/08/12/同步机制/19.png" style="zoom:40%;"></p><p><img src="//zybtree.github.io/2020/08/12/同步机制/18.png" style="zoom:35%;"></p><p>如果把消费者的P(&amp;full)和P(&amp;mutex)互换，当出现缓冲区个数为0的时候，执行P(&amp;mutex)和P(&amp;full)之后，mutex=-1，此时如果生产者执行P(&amp;emputy)和P(&amp;mutex)会<strong>出现死锁</strong>。</p><p>两个V 操作的顺序可以颠倒，因为V操作只是把信号量的值加一。然后查看有无进程等在队列里，如果有就把它释放。 因此V操作不会使得调用V操作的这个进程进入等待状态，所以这两个的顺序是可以颠倒的。 颠倒的结果可能会带来其他的一些问题，比如说，临界区里头会多一点点指令，其他的进程想进临界区可能会稍微晚一点。但是代码中的是最理想的。</p><h2 id="4-用信号量解决读者-写者问题"><a href="#4-用信号量解决读者-写者问题" class="headerlink" title="4.用信号量解决读者/写者问题"></a>4.用信号量解决读者/写者问题</h2><p>问题描述:</p><p>多个进程共享一个数据区，这些进程分为两组: </p><ul><li><strong>读者进程:</strong>只读数据区中的数据 </li><li><strong>写者进程:</strong>只往数据区写数据</li></ul><p>要求满足条件:</p><ul><li>允许多个读者同时执行读操作 </li><li>不允许多个写者同时操作</li><li>不允许读者、写者同时操作</li></ul><h3 id="1-第一类读者写者问题：读者优先"><a href="#1-第一类读者写者问题：读者优先" class="headerlink" title="(1).第一类读者写者问题：读者优先"></a>(1).第一类读者写者问题：读者优先</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果读者执行:</p><ul><li><strong>无其他读者、写者，该读者可以读</strong></li><li><strong>若已有写者等，但有其他读者正在读，则该读者也可以读</strong></li><li><strong>若有写者正在写，该读者必须等</strong></li></ul><p>如果写者执行:</p><ul><li><strong>无其他读者、写者，该写者可以写</strong> </li><li><strong>若有读者正在读，该写者等待</strong></li><li><strong>若有其他写者正在写，该写者等待</strong></li></ul><blockquote><p>写者是和其他写者是互斥的，和读者也是互斥的。 所以读者写者问题本质上是一个互斥的问题。</p></blockquote><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p><img src="//zybtree.github.io/2020/08/12/同步机制/20.png" style="zoom:35%;"></p><p>第一类读者写者问题实际上是要解决的是多个读者可以同时读，因此不需要每个读者都去做P(w)或做V(w) 操作。</p><p>经过分析发现第一个读者 到来时如果没有其他的读者和写者，他可以去读。它在读之前首先要把临界区保护起来，所以第一个读者做P(w)。只要前面有读者在读，那么后续来的读者都可以去读。 当所有的读者都读完就会把临界区还回来，所以最后一个读者去做V(w)操作。 </p><p>在代码中的读者里引入一个计数器rc，它用来记录现在有几个读者。进来一个读者之后通过 <code>rc ＋ 1</code> 判断是不是第一个读者，如果<code>rc = 1</code>，表示是第一个读者，那就去做P(w)的工作。每个读者离开都要去 <code>rc- 1</code> ，当最后一个读者做完 <code>rc - 1</code>， rc就等于0了,最后一个读者去做V(w)操作。</p><p>因为多个读者都对rc进行相应的操作，所以rc就成为了一个新的临界资源。<code>rc = rc + 1</code> 判断 rc，或者 <code>rc = rc - 1</code> 判断 rc 都是一个临界区。 因此还要针对这样一个临界区再增加一个互斥的信号量，对rc这段代码进行保护。</p><h3 id="2-Linux提供的读写锁"><a href="#2-Linux提供的读写锁" class="headerlink" title="(2).Linux提供的读写锁"></a>(2).Linux提供的读写锁</h3><p>应用场景:</p><p>如果<strong>每个执行实体对临界区的访问或者是读或者是写共享变量</strong>，但是它们都不会既读又写时，读写锁是最好的选择。</p><p>实例:</p><p>Linux的IPX路由代码中使用了读-写锁，用 ipx_routes_lock的读-写锁保护IPX路由表的并发访问</p><blockquote><p>要通过查找路由表实现包转发的程序需要请求读锁；需要添加和删除路由表中入口的程序必须获取写锁(由于通过读路由表的情况比更新路由表的情况多得 多，使用读-写锁提高了性能)</p></blockquote><hr><h1 id="五-管程-MONITOR"><a href="#五-管程-MONITOR" class="headerlink" title="五.管程 MONITOR"></a>五.管程 MONITOR</h1><h2 id="1-管程的基本概念"><a href="#1-管程的基本概念" class="headerlink" title="1.管程的基本概念"></a>1.管程的基本概念</h2><h3 id="1-为什么引入管程"><a href="#1-为什么引入管程" class="headerlink" title="(1).为什么引入管程"></a>(1).为什么引入管程</h3><p>信号量机制具有一些缺点，比如<strong>用信号量及PV操作解决问题的时程序编写需要很高的技巧</strong>。 如果没有合理地安排PV操作的位置，就会导致一些出错的结果比如说出现死锁等问题。 所以有人提出一种新的同步机制就是管程。 它实际上是<strong>在程序设计语言中引入的一个成分</strong>，称之为高级同步机制。</p><h3 id="2-管程的定义"><a href="#2-管程的定义" class="headerlink" title="(2).管程的定义"></a>(2).管程的定义</h3><p>管程是一种<strong>特殊的模块</strong>，<strong>每个管程都有一个名字</strong>。<strong>管程主要是管理共享资源所对应的数据结构</strong>，所以管程在管理共享资源的同时也提供了在这个共享资源之上需要的各种各样的操作，也就是由一组操作的过程来组成。 </p><p>示例:</p><p><img src="//zybtree.github.io/2020/08/12/同步机制/21.png" style="zoom:35%;"></p><p><strong>进程与管程的关系:</strong></p><p>作为进程，它只能<strong>通过调用管程给提供的各种过程来间接地来使用管程当中的数据结构</strong>。</p><h3 id="3-管程的要求"><a href="#3-管程的要求" class="headerlink" title="(3).管程的要求"></a>(3).管程的要求</h3><p>作为一种同步机制，管程要解决两个问题：</p><h4 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h4><ul><li><strong>管程是互斥进入的。</strong></li><li>互斥是<strong>为了保证管程中数据结构的数据完整性</strong></li><li><strong>管程的互斥性是<font color="red">由编译器负责保证的</font></strong></li></ul><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><ul><li><p><strong>管程中设置<font color="red">条件变量及等待/唤醒操作</font>以解决同步问题</strong></p></li><li><p>作用<strong>可以让一个进程或线程在条件变量上等待(<font color="red">此时，应先释放管程的使用权</font>)，也可以通过发送信号将等待在条件变量上的进程或线程唤醒</strong></p></li></ul><h3 id="4-遇到的问题"><a href="#4-遇到的问题" class="headerlink" title="(4).遇到的问题"></a>(4).遇到的问题</h3><p>场景：</p><p>当一个进入管程的进程 执行等待操作时，它应当释放管程的互斥权。当后面进入管程的进程执行唤醒操作时(例如后进的P唤醒前面的Q)，管程中便存在两个同时处于活动状态的进程。</p><p>解决方法：</p><ul><li><strong>P等待Q执行</strong></li><li><strong>Q等待P继续执行</strong></li><li><strong>规定唤醒操作为管程中最后一个可执行 的操作</strong></li></ul><h2 id="2-HOARE管程"><a href="#2-HOARE管程" class="headerlink" title="2.HOARE管程"></a>2.HOARE管程</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><p><img src="//zybtree.github.io/2020/08/12/同步机制/22.png" style="zoom:35%;"></p><ul><li>因为管程是互斥进入的，所以<strong>当一个进程试图进入 一个已被占用的管程时，应当在管程的入口处等待</strong><ul><li>为此，管程的入口处设置一个进程等待队列，称作<strong>入口等待队列</strong></li></ul></li><li>如果进程P唤醒进程Q，则P等待Q执行;如果进程Q执行中又唤醒进程R，则Q等待R执行;……，如此，在管程内部可能会出现多个等待进程<ul><li><strong>在管程内需要设置一个进程等待队列，称为紧急等待队列，紧急等待队列的优先级高于入口等待队列 的优先级</strong></li></ul></li></ul><h3 id="2-条件变量的实现"><a href="#2-条件变量的实现" class="headerlink" title="(2).条件变量的实现"></a>(2).条件变量的实现</h3><blockquote><p> 因为管程的互斥是由编译器保证的，是语言机制。 所以这里头只考虑怎么样解决同步问题，同步问题是通过条件变量和条件变量上实施的wait和signal这两个操作来完成的。</p></blockquote><p><strong>条件变量——在管程内部说明和使用的一种特殊类型的变量。</strong>对于条件变量，可以执行<strong>wait和signal操作</strong></p><p><strong>wait(c):</strong> </p><p><strong>如果紧急等待队列非空，</strong>则唤醒第一个等待者；否则释放管程的互斥权，执行此操作的进程进入 c(条件变量) 链末尾。</p><p><strong>signal(c):</strong></p><p>如果 c 链为空，则相当于空操作，执行此操作的进程继续执行；否则唤醒第一个等待者，<strong>执行此操作的进程进入紧急等待队列的末尾。</strong></p><h2 id="3-管程的应用"><a href="#3-管程的应用" class="headerlink" title="3.管程的应用"></a>3.管程的应用</h2><h3 id="1-管程的实现"><a href="#1-管程的实现" class="headerlink" title="(1).管程的实现"></a>(1).管程的实现</h3><p>管程实现的两个主要途径:</p><ul><li><p><strong>直接构造——效率高</strong> </p><blockquote><p>因为它是语言机制，所以可以在某个语言当中加入这样一个管程成分，然后去编写相应的编译器</p></blockquote></li><li><p><strong>间接构造——用某种已经实现的同步机制去构造</strong></p><blockquote><p>比如可以用信号量及 PV 操作来构造一个管程 </p></blockquote></li></ul><h3 id="2-用管程解决生产者消费者问题"><a href="#2-用管程解决生产者消费者问题" class="headerlink" title="(2).用管程解决生产者消费者问题"></a>(2).用管程解决生产者消费者问题</h3><p><img src="//zybtree.github.io/2020/08/12/同步机制/23.png" style="zoom:35%;"></p><h2 id="4-MESA管程"><a href="#4-MESA管程" class="headerlink" title="4.MESA管程"></a>4.MESA管程</h2><p>引入MESA的原因：</p><ul><li><p>Hoare管程的一个缺点：<strong>两次额外的进程切换</strong></p></li><li><p>解决方式：解决:</p><ul><li>把 <code>signal</code> 改成 <code>notify</code></li><li>notify：当一个正在管程中的进程执行notify(x)时，它使得x条件队列得到通知，发信号的进程继续执行</li></ul></li></ul><h3 id="1-使用NOTIFY要注意的问题"><a href="#1-使用NOTIFY要注意的问题" class="headerlink" title="(1).使用NOTIFY要注意的问题"></a>(1).使用NOTIFY要注意的问题</h3><ul><li><p><strong>notify的结果：位于条件队列头的进程在将来合适的时候且当处理器可用时恢复执行</strong></p></li><li><p>由于不能保证在它之前没有其他进程进入管程， 因而这个<strong>进程必须重新检查条件</strong></p><blockquote><p><strong>用while循环取代if语句</strong></p></blockquote></li><li><p><strong>导致对条件变量至少多一次额外的检测</strong>(但不再有额外的进程切换)，并且对等待进程在notify 之后何时运行没有任何限制</p></li></ul><h3 id="2-MEAS管程：生产者—消费者问题"><a href="#2-MEAS管程：生产者—消费者问题" class="headerlink" title="(2).MEAS管程：生产者—消费者问题"></a>(2).MEAS管程：生产者—消费者问题</h3><p><img src="//zybtree.github.io/2020/08/12/同步机制/24.png" style="zoom:40%;"></p><h3 id="3-改进NOTIFY"><a href="#3-改进NOTIFY" class="headerlink" title="(3).改进NOTIFY"></a>(3).改进NOTIFY</h3><ul><li><p>对notify的一个很有用的改进</p><ul><li>给每个条件原语关联一个监视计时器，<strong>不论是否被通知，一个等待时间超时的进程将被设为就绪态</strong></li><li>当该进程被调度执行时，会再次检查相关条件， 如果条件满足则继续执行</li></ul></li><li><p>超时可以防止如下情况的发生: </p><ul><li>当某些进程在产生相关条件的信号之前失败时，等待该条件的进程就会被无限制地推迟执行而处于饥饿状态</li></ul></li></ul><h3 id="4-引入BROADCAST"><a href="#4-引入BROADCAST" class="headerlink" title="(4).引入BROADCAST"></a>(4).引入BROADCAST</h3><p><strong>broadcast：使所有在该条件上等待的进程都被释放并进入就绪队列</strong></p><p><strong>应用场景：</strong></p><ul><li><strong>当一个进程不知道有多少进程将被激活时，这种方式是非常方便的</strong></li></ul><blockquote><p>例子:生产者/消费者问题中，假设insert和remove 函数都适用于可变长度的字符块，此时，如果一个 生产者往缓冲区中添加了一批字符，它不需要知道 每个正在等待的消费者准备消耗多少字符，而仅仅 执行一个broadcast，所有正在等待的进程都得到通 知并再次尝试运行</p></blockquote><ul><li><strong>当一个进程难以准确判定将激活哪个进程时，也可使用广播</strong></li></ul><h2 id="5-HOARE管程与MESA管程的比较"><a href="#5-HOARE管程与MESA管程的比较" class="headerlink" title="5.HOARE管程与MESA管程的比较"></a>5.HOARE管程与MESA管程的比较</h2><ul><li><p><strong>Mesa管程优于Hoare管程之处在于Mesa管程错误比较少</strong></p></li><li><p>在Mesa管程中，由于每个过程在收到信号后都重新检查管程变量，并且由于使用了while结构，一个进程不正确的broadcast广播或发信号notify，不会导致收到信号的程序出错</p><blockquote><p>收到信号的程序将检查相关的变量，如果期望的条件没有满足，它会重新继续等待</p></blockquote></li></ul><h2 id="6-管程小结"><a href="#6-管程小结" class="headerlink" title="6.管程小结"></a>6.管程小结</h2><p><strong>管程：</strong>抽象数据类型 有一个明确定义的操作集合，通过它且只有通过它才能操纵该数据类型的实例</p><p><strong>实现管程结构必须保证下面几点：</strong></p><ul><li>只能通过管程的某个过程才能访问资源; </li><li>管程是互斥的，某个时刻只能有一个进程或线程调用管程中的过程</li></ul><p><strong>条件变量:</strong>为提供进程与其他进程通信或同步而引入</p><blockquote><p>wait/signal 或 wait/notify 或 wait/broadcast</p></blockquote><hr><h1 id="六-PTHREAD中的同步机制"><a href="#六-PTHREAD中的同步机制" class="headerlink" title="六.PTHREAD中的同步机制"></a>六.PTHREAD中的同步机制</h1><p>Pthread解决互斥的问题：<strong>在Pthread 中使用一个互斥量，通过对互斥量提供相应的操作来保护临界区。</strong> </p><p><img src="//zybtree.github.io/2020/08/12/同步机制/25.png" style="zoom:35%;"></p><p>Pthread解决同步问题：<strong>在Pthread 中使用条件变量，以及在条件变量上的各种操作</strong> </p><p><img src="//zybtree.github.io/2020/08/12/同步机制/26.png" style="zoom:35%;"></p><h2 id="1-用PTHREAD解决生产者消费者问题"><a href="#1-用PTHREAD解决生产者消费者问题" class="headerlink" title="1.用PTHREAD解决生产者消费者问题"></a>1.用PTHREAD解决生产者消费者问题</h2><p><img src="//zybtree.github.io/2020/08/12/同步机制/27.png" style="zoom:30%;"></p><p><img src="//zybtree.github.io/2020/08/12/同步机制/28.png" style="zoom:40%;"></p><h2 id="2-讨论：PTHREAD-COND-WAIT"><a href="#2-讨论：PTHREAD-COND-WAIT" class="headerlink" title="2.讨论：PTHREAD_COND_WAIT"></a>2.讨论：PTHREAD_COND_WAIT</h2><p>pthread_cond_wait的执行分解为三个主要动作: </p><p><strong>1、解锁</strong></p><p><strong>2、等待</strong></p><blockquote><p>当收到一个解除等待的信号 (pthread_cond_signal或者 pthread_cond_broad_cast)之后， pthread_cond_wait马上需要做的动作是:</p></blockquote><p><strong>3、上锁</strong></p><h1 id="七-进程间通信机制"><a href="#七-进程间通信机制" class="headerlink" title="七.进程间通信机制"></a>七.进程间通信机制</h1><h2 id="1-为什么需要通信机制"><a href="#1-为什么需要通信机制" class="headerlink" title="1.为什么需要通信机制"></a>1.为什么需要通信机制</h2><ul><li><p><strong>信号量和管程只能传递很简单的信息，不能传递大量的信息</strong> </p><blockquote><p> 比如要把一个大的数组传送给另外一 进程，那么信号量和管程在这一方面是做不到的。 </p></blockquote></li><li><p><strong>管程不适合于用于多处理器的情况</strong> </p></li></ul><p>因此在传递大量信息的时候需要引入新的通信机制，这个通信机制就是进程间通信机制。</p><blockquote><p>非常典型的形式就是消息传递 ，实际上就是由send和receive提供这样的原语操作。当一个进程要把消息发送给另外一个进程时就去调用send； 当另外一个进程想接收消息时就去调用receive操作。</p></blockquote><p>使用情况：<strong>分布式系统、基于共享内存的多处理机系统、单处理机系统。<font color="red">可以解决进程间的同步 问题、通信问题</font></strong></p><h2 id="2-基本通信方式"><a href="#2-基本通信方式" class="headerlink" title="2.基本通信方式"></a>2.基本通信方式</h2><h3 id="1-消息传递"><a href="#1-消息传递" class="headerlink" title="(1).消息传递"></a>(1).消息传递</h3><p><img src="//zybtree.github.io/2020/08/12/同步机制/29.png" style="zoom:30%;"></p><p><strong>发送消息：发送进程只是把消息准备好，调用send 操作，然后操作系统做相应的复制消息的内容，挂接的内容。</strong></p><p><strong>接收消息：接收进程接收消息时把请求提交给操作系统，操作系统完成把消息复制到接收进程空间的工作。</strong></p><p>所以操作系统要提供这样一个通信机制，来完成进程之间的信息传送。</p><h4 id="用PV操作实现SEND操作"><a href="#用PV操作实现SEND操作" class="headerlink" title="用PV操作实现SEND操作"></a>用PV操作实现SEND操作</h4><p><img src="//zybtree.github.io/2020/08/12/同步机制/31.png" style="zoom:35%;"></p><h2 id="2-共享内存"><a href="#2-共享内存" class="headerlink" title="2.共享内存"></a>2.共享内存</h2><p><img src="//zybtree.github.io/2020/08/12/同步机制/32.png" style="zoom:35%;"></p><p>该通信模式需要解决两个问题：</p><p>第一个问题：需要在物理内存里建一个大家能够共享的一块内存空间。<strong>通过相应的映射能把这个物理内存空间映射到了两个进程相应的地址空间里。</strong>  </p><p>第二个问题：其实就是读者写者问题，因为共享内存不能同时去写，可以同时去读。 所以可以利用控制读写者问题的这个方法来解决互斥问题。</p><h2 id="3-管道通信方式-PIPE"><a href="#3-管道通信方式-PIPE" class="headerlink" title="3.管道通信方式 PIPE"></a>3.管道通信方式 PIPE</h2><p>利用一个缓冲传输介质——内存或文件连接两个相互通信的进程。</p><p><img src="//zybtree.github.io/2020/08/12/同步机制/33.png" style="zoom:35%;"></p><ul><li><strong>用字符流方式写入读出</strong></li><li><strong>先进先出顺序</strong></li><li><strong>管道通信机制必须提供的协调能力</strong><ul><li><strong>互斥、同步、判断对方进程是否存在</strong></li></ul></li></ul><hr><h1 id="八-典型操作系统中的IPC机制"><a href="#八-典型操作系统中的IPC机制" class="headerlink" title="八.典型操作系统中的IPC机制"></a>八.典型操作系统中的IPC机制</h1><h2 id="1-进程同步-通信实例"><a href="#1-进程同步-通信实例" class="headerlink" title="1.进程同步/通信实例"></a>1.进程同步/通信实例</h2><p><img src="//zybtree.github.io/2020/08/12/同步机制/34.png" style="zoom:33%;"></p><h2 id="2-LINUX的进程通信机制"><a href="#2-LINUX的进程通信机制" class="headerlink" title="2.LINUX的进程通信机制"></a>2.LINUX的进程通信机制</h2><p><img src="//zybtree.github.io/2020/08/12/同步机制/35.png" style="zoom:33%;"></p><p><img src="//zybtree.github.io/2020/08/12/同步机制/36.png" style="zoom:33%;"></p><p>Linux提供了很多种工具，根据需要挑选合适的一种。</p><h2 id="3-原子操作"><a href="#3-原子操作" class="headerlink" title="3.原子操作"></a>3.原子操作</h2><p>原子操作是不可分割，在执行完之前不会被其他任务或事件中断。它常用于实现资源的引用计数。</p><p><img src="//zybtree.github.io/2020/08/12/同步机制/37.png" style="zoom:33%;"></p><p>例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">atomic_t</span> v = atomic_init(<span class="number">0</span>);</span><br><span class="line">atomic_set(&amp;v, <span class="number">4</span>); </span><br><span class="line">atomic_add(<span class="number">2</span>, &amp;v); </span><br><span class="line">atomic_inc(&amp;v);</span><br><span class="line">printk(“%d\n”, atomic_read(&amp;v);</span><br><span class="line"><span class="keyword">int</span> atomic_dec_and_test(<span class="keyword">atomic_t</span> *v)</span><br></pre></td></tr></table></figure></div><h2 id="4-屏障"><a href="#4-屏障" class="headerlink" title="4.屏障"></a>4.屏障</h2><p><strong>屏障主要是用于对一组线程进行协调的。</strong></p><p>应用场景：</p><p><strong>一组线程协同完成一项任务，需要所有线程都到达一个汇合点后再一起向前推进。</strong></p><p><img src="//zybtree.github.io/2020/08/12/同步机制/38.png" style="zoom:33%;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://zybtree.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="同步机制" scheme="https://zybtree.github.io/tags/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>处理器调度</title>
    <link href="https://zybtree.github.io/2020/08/11/%E5%A4%84%E7%90%86%E5%99%A8%E8%B0%83%E5%BA%A6/"/>
    <id>https://zybtree.github.io/2020/08/11/处理器调度/</id>
    <published>2020-08-11T13:55:58.000Z</published>
    <updated>2020-08-13T01:33:57.018Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-CPU调度的相关概念"><a href="#一-CPU调度的相关概念" class="headerlink" title="一.CPU调度的相关概念"></a>一.CPU调度的相关概念</h1><h2 id="1-CPU调度"><a href="#1-CPU调度" class="headerlink" title="1.CPU调度"></a>1.CPU调度</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="(1).定义"></a>(1).定义</h3><p><strong>CPU调度的任务是控制、 协调多个进程对CPU的竞争。</strong><font color="red">即按照一定的调度算法，从就绪队列中选择一个进程，然后把CPU的控制权交给被选中的进程。如果就绪队列没有其它的进程，那么系统会安排一个空闲进程(idle 进程)上 CPU 运行。</font></p><h3 id="2-系统场景"><a href="#2-系统场景" class="headerlink" title="(2).系统场景"></a>(2).系统场景</h3><p>CPU调度所面临的场景：</p><ul><li>系统有N 个进程，它们就绪等待上 CPU 运行</li><li>而系统有M个 CPU，M $\geq$ 1 </li><li>操作系统调度模块需要要决策给哪个进程分配哪一个CPU</li></ul><h2 id="2-CPU调度要解决的三个问题"><a href="#2-CPU调度要解决的三个问题" class="headerlink" title="2.CPU调度要解决的三个问题"></a>2.CPU调度要解决的三个问题</h2><ul><li><p><strong>WHAT：按什么原则选择下一个要执行的进程</strong> </p><p>— 调度算法</p></li><li><p><strong>WHEN：何时选择</strong> </p><p>— 调度时机</p></li><li><p><strong>HOW：如何让被选中的进程上CPU运行</strong></p><p>— 调度过程(主要内容是：进程的上下文切换)</p></li></ul><h2 id="3-CPU调度的时机"><a href="#3-CPU调度的时机" class="headerlink" title="3.CPU调度的时机"></a>3.CPU调度的时机</h2><blockquote><p> 系统运行时，会发生很多的事件。比如说，一些进程的操作：I/O 中断，时间中断。 这些事件发生以后系统要做相应的处理。 这是第二讲的主要内容。 </p></blockquote><p><strong>事件发生 → 当前运行的进程暂停运行 → 硬件机制响应 后 → 进入操作系统，处理相应的事件 → 结束处理后:</strong> </p><p>事件处理完后某些进程的状态发生了变化，也可能创建出了一些新的进程。这就导致了就绪队列的改变，而这就需要进程调度。<strong>按照事先预定的算法从就绪队列中重新选择一个进程 ，这就是调度的时机。 <font color="red">即就绪队列的改变引发了重新调度</font>。</strong> </p><p>进程调度的时机有4个:</p><ul><li>进程正常终止 或 由于某种错误而终止 </li><li>新进程创建 或 一个等待进程变成就绪 </li><li>当一个进程从运行态进入阻塞态</li><li>当一个进程从运行态变为就绪态</li></ul><blockquote><p>总而言之什么时候重新调度？</p><p>往往是内核对中断,陷入,系统调用等处理之后，返回到用户态，这个时候要重新调度。这就是CPU 调度的时机。</p></blockquote><h2 id="4-CPU调度的过程—进程切换"><a href="#4-CPU调度的过程—进程切换" class="headerlink" title="4.CPU调度的过程—进程切换"></a>4.CPU调度的过程—进程切换</h2><h3 id="1-进程切换的概念"><a href="#1-进程切换的概念" class="headerlink" title="(1).进程切换的概念"></a>(1).进程切换的概念</h3><blockquote><p>当有一个新的进程被选中之后 ，这个进程可以是刚刚被暂停执行的进程，也可以是一个新的进程。 如果是一个新的进程，那就要发生一个进程切换。</p></blockquote><p><strong>进程切换就指的是一个进程让出CPU，另外一个进程占用CPU的一个过程。</strong></p><p>进程切换主要包括两部分工作：</p><ul><li><p>先切换全局页目录，以此来加载一个新的地址空间 </p><blockquote><p>因为新的进程上CPU ，那么它要用自己的地址空间 </p></blockquote></li><li><p>是切换内核栈和硬件上下文，其中硬件上下文包括了内核执行新进程需要的全部信息，如 CPU相关寄存器</p></li></ul><p>因此，进程切换实际上包括了<strong>对原有进程的各种状态的保存</strong>，以及<strong>对新的进程的状态的恢复</strong>，这样一个过程。</p><h3 id="2-上下文切换的具体步骤"><a href="#2-上下文切换的具体步骤" class="headerlink" title="(2).上下文切换的具体步骤"></a>(2).上下文切换的具体步骤</h3><blockquote><p>例子：如果进程A下CPU，进程B上CPU ，那么进程切换主要做的工作呢？</p></blockquote><ol><li><p><strong>保存进程A的上下文环境</strong> (程序计数器、程序状态字、其他寄存器……)</p></li><li><p><strong>用新状态和其他相关信息更新进程A的PCB</strong></p></li><li><p><strong>把进程A移至合适的队列</strong> (就绪、阻塞……)</p></li><li><p><strong>将进程B的状态设置为运行态</strong></p></li><li><p><strong>从进程B的PCB中恢复上下文</strong>(程序计数器、程 序状态字、其他寄存器……)</p></li></ol><p>做完了这些事情，进程B就上CPU运行， 而进程A的所有信息保存好之后，以后它还可以继续上CPU接着执行。 </p><h3 id="3-上下文切换的开销"><a href="#3-上下文切换的开销" class="headerlink" title="(3).上下文切换的开销"></a>(3).上下文切换的开销</h3><p>上下文切换的开销包括两部分： </p><ul><li><p><strong>直接开销：</strong>内核完成上下文切换所花费CPU的时间 </p><blockquote><p>这些时间用于：</p><ul><li>保存和恢复寄存器</li><li>用于切换地址空间 (切换地址空间的指令比较昂贵) </li></ul></blockquote></li><li><p><strong>间接开销</strong></p><blockquote><p>高速缓存(Cache)、缓冲区缓存(BufferCache) 和 TLB快表(Translation Look-aside Buffer)失效</p><p>高速缓存中存放了刚才执行的这些进程中的一些指令和数据， TLB快表中存放了进程的一些页表表项。当新的进程上CPU之后，原来的这些内容都都失效了。还要把新的进程所需要的指令数据，送入高速缓存或者是把新的进程的页表表项送入TLB快表里。这又需要花一些时间，这些都是间接开销。 </p></blockquote></li></ul><h2 id="5-CPU调度算法的设计"><a href="#5-CPU调度算法的设计" class="headerlink" title="5.CPU调度算法的设计"></a>5.CPU调度算法的设计</h2><p>从操作系统发展的角度来看调度算法的一些演变：</p><p>批处理系统 → 多道程序设计系统 → 批处理与分时的混合系统 → 个人计算机 → 网络服务器</p><blockquote><ul><li>早期的批处理对调度算法的要求不高，也比较简单，那么因为它是一个程序执行完了以后接着执行下一个程序 </li><li>有了多道程序设计系统之后，多个程序都要想进内存，去上CPU，此时调度算法就要去选择让哪些进程早一点上CPU了 </li><li>到了批处理与分时系统混合系统中，调度算法既要照顾到前台的进程也要照顾到那些后台的进程，需要合理地安排调度的顺序，让不同的进程都能有机会上CPU执行 </li><li>个人计算机刚开始时调度算法非常简单，后来慢慢慢慢演化到现在桌面操作系统里头调度算法变得非常复杂 </li><li>网络服务器由于有多个客户端同时向它提出服务请求，所以要在调度算法上下一些功夫 </li></ul></blockquote><p>从用户角度和系统角度对调度算法的要求不一样，下图描述了性能方面的不同要求： </p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/1.png" style="zoom:35%;"></p><blockquote><p>从上图可以看到，用户的角度和系统的角度对于调度算法有不同的要求。 而这些要求有时候是相互矛盾的。 因此在设计调度算法的时候是要在各种因素中折中权衡。</p></blockquote><h2 id="6-调度算法衡量指标"><a href="#6-调度算法衡量指标" class="headerlink" title="6.调度算法衡量指标"></a>6.调度算法衡量指标</h2><ul><li><p><strong>吞吐量 Throughput</strong> </p><blockquote><p>每单位时间完成的进程数目</p></blockquote></li><li><p><strong>周转时间TT (Turnaround Time)</strong></p><blockquote><p>每个进程从提出请求到运行完成的时间</p></blockquote></li><li><p><strong>响应时间RT (Response Time)</strong> </p><blockquote><p>从提出请求到第一次回应的时间</p></blockquote></li><li><p><strong>其他</strong></p><ul><li><p><strong>CPU 利用率 (CPU Utilization)</strong></p><blockquote><p>CPU做有效工作的时间比例</p></blockquote></li><li><p><strong>等待时间 (Waitingtime)</strong></p><blockquote><p>每个进程在就绪队列 (ready queue) 中等待的时间</p></blockquote></li></ul></li></ul><hr><h1 id="二-设计调度算法时需要考虑的问题"><a href="#二-设计调度算法时需要考虑的问题" class="headerlink" title="二.设计调度算法时需要考虑的问题"></a>二.设计调度算法时需要考虑的问题</h1><p>设计调度算法时要考虑以下几个问题: </p><ul><li><p>进程控制块PCB中</p><blockquote><p>需要记录哪些与CPU调度有关的信息</p></blockquote></li><li><p>进程优先级及就绪队列的组织 </p></li><li>抢占式调度与非抢占式调度 </li><li>I/O密集型与CPU密集型进程 </li><li>时间片</li></ul><h2 id="1-进程优先级-数"><a href="#1-进程优先级-数" class="headerlink" title="1.进程优先级(数)"></a>1.进程优先级(数)</h2><p>优先级和优先数是两个不同的概念。</p><p><strong>优先级是表现进程的重要性和紧迫性</strong>。 优先数是一个<strong>数值，它反映了某一个优先级</strong>。 </p><blockquote><p>有些系统像 UNIX 优先数小的优先级高，但是不能完全根据数的大小来决定优先级的高低。</p></blockquote><p>根据优先级是否能改变分为静态优先级和动态优先级。</p><p>静态优先指在进程创建时，<strong>指定优先级之后在进程运行的过程中，这个优先级不再发生改变。</strong> </p><p>动态优先级是在<strong>进程运行过程中，优先级的级别还会不断地调整。</strong> </p><blockquote><p>有的时候需要动态优先级，比如当一个进程在就绪队列当中等待的时间很长的时候，要提升它的优先级，让它尽快有机会得到CPU去运行。</p></blockquote><h2 id="2-进程就绪队列组织"><a href="#2-进程就绪队列组织" class="headerlink" title="2.进程就绪队列组织"></a>2.进程就绪队列组织</h2><p><strong>按照优先级来排队 ：</strong></p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/2.png" style="zoom:35%;"></p><p>可以按照优先级来组织就绪队列。当创建一个新的进程的时候，根据它的优先级排不同的就绪队列，在这里设定n个就绪队列优先级，不同的优先级进入不同的就绪队列。 就绪队列 1 的优先级是最高的，当调度程序选择进程的时候，首先应该从高优先级的队列来选择进程 。如果高优先级队列没有进程了，再从次高就绪队列来选择进程。</p><p><strong>另一种排队方式：</strong></p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/3.png" style="zoom:35%;"></p><p>所有的进程第一次创建之后都进到第一级就绪队列，随着进程的运行可能会降低某些进程的优先级。比如当一个进程分配给它的时间片用完了，那么它就会降一级，降到第二级就绪队列。 如果它经常地用完时间片，慢慢的这个进程就会降低到最后一级就绪队列。进程调度首先在第一级队列里选，说明第一级就绪队列的优先级比较高。如果这个队列是空的，那么调度就会从其他的就绪队列里头选择进程。如果进程已经进到了最后一级队列，那么它的优先级就越来越低，它被调度上 CPU 的机会就会变得很小。</p><h2 id="3-占用CPU的方式—抢占与非抢占"><a href="#3-占用CPU的方式—抢占与非抢占" class="headerlink" title="3.占用CPU的方式—抢占与非抢占"></a>3.占用CPU的方式—抢占与非抢占</h2><p>指占用CPU的方式:</p><ul><li><strong>可抢占式Preemptive(可剥夺式)</strong>：</li></ul><p>当有比正在运行的进程优先级更高的进程就绪时，系统可强行剥夺正在运行进程的CPU，提供给具有更高优先级的进程使用。</p><ul><li><strong>不可抢占式Non-preemptive(不可剥夺式)</strong>：</li></ul><p>某一进程被调度运行后，除非由于它自身的原因不能运行，否则一直运行下去</p><h2 id="4-I-O密集型与CPU密集型进程"><a href="#4-I-O密集型与CPU密集型进程" class="headerlink" title="4.I/O密集型与CPU密集型进程"></a>4.I/O密集型与CPU密集型进程</h2><p>按进程执行过程中的行为划分:</p><ul><li><p><strong>I/O密集型或I/O型(I/O-bound)</strong></p><blockquote><p>频繁的进行I/O，通常会花费很多时间等待I/O操作的完成</p></blockquote></li><li><p><strong>CPU密集型或CPU型或计算密集型(CPU-bound)</strong> </p><blockquote><p>需要大量的CPU时间进行计算</p></blockquote></li></ul><p><img src="//zybtree.github.io/2020/08/11/处理器调度/4.png" style="zoom:40%;"></p><blockquote><p>在设计调度算法时，通常会对I/O型的进程会有一些友好，希望更多的I/O型进程早一点上CPU运行。</p><p>因为这些进程上CPU 之后只用了很短的一下，CPU时间就让出CPU，因为它要去做其它的输入输出操作。因此对于一般的调度程序，都会对I/O型进程更偏好一些。 </p></blockquote><h2 id="5-时间片"><a href="#5-时间片" class="headerlink" title="5.时间片"></a>5.时间片</h2><p>时间片指的是一个时间段，<strong>指分配给调度上CPU的进程，允许这个进程在CPU上执行多长时间，它是一个时间的长度。</strong></p><p>那么如何选择时间片呢？ 应该考虑很多的因素： </p><ul><li><p><strong>进程切换的开销有多大</strong></p></li><li><p><strong>进程对响应时间的要求</strong> </p></li><li><p><strong>系统当中有多少进程处于就绪</strong> </p></li><li><p><strong>CPU的能力有多大</strong></p></li><li><p><strong>进程的行为</strong>(不同进程可能区别对待)</p><p>因此在设计时间片大小的时候要考虑到这些因素。 具体分配时间片的方式会在时间片轮转算法时进行介绍。</p></li></ul><hr><h1 id="三-批处理系统中采用的调度算法"><a href="#三-批处理系统中采用的调度算法" class="headerlink" title="三.批处理系统中采用的调度算法"></a>三.批处理系统中采用的调度算法</h1><p>介绍批处理系统中的常用的调度算法：</p><ul><li><strong>先来先服务 (FCFS-First Come First Serve)</strong></li><li><strong>最短作业优先 (SJF-Shortest Job First) </strong></li><li><strong>最短剩余时间优先 (SRTN-Shortest Remaining Time Next) </strong> </li><li><strong>最高相应比优先 (HRRN-Highest Response Ratio Next)</strong></li></ul><blockquote><p>在批处理操作系统中对于算法的要求往往是看它的带来的 <strong>吞吐量大小，周转时间，CPU 利用率</strong>，<strong>公平和平衡</strong> 这几个因素。 </p></blockquote><h2 id="1-先来先服务FCFS"><a href="#1-先来先服务FCFS" class="headerlink" title="1.先来先服务FCFS"></a>1.先来先服务FCFS</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1).概念"></a>(1).概念</h3><p>先来先服务调度算法也称为先进先出。指的是<font color="red"><strong>按照进程就绪的先后顺序来使用 CPU。</strong></font>先进先出调用算法是一个<strong>非抢占式</strong>的调度算法。 </p><p><strong>优点：</strong></p><ul><li><strong>公平</strong> (谁先就绪谁先上CPU) </li><li><strong>实现简单</strong> (维护一个队列就可以了) </li></ul><blockquote><p>选择进程时从队首选择， 新就绪的进程排在队尾。 </p></blockquote><p><strong>缺点:</strong> </p><ul><li><strong>长进程后面的短进程需要等很长时间，不利于用户体验</strong></li></ul><blockquote><p>如果有一个短的进程排在了一个长时间运行进程的后面， 它需要等待的时间比较长， 这样使得用户体验不够友好。</p></blockquote><h3 id="2-举例"><a href="#2-举例" class="headerlink" title="(2).举例"></a>(2).举例</h3><p>假设有三个进程，按照P1、P2、P3就绪。 P1进程需要运行24秒，P2和P3分别需要3秒计算。 </p><p>采用先来先服务的调度算法调度：</p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/5.png" style="zoom:34%;"></p><p>同样还是这个例子， 改变调度的顺序：</p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/6.png" style="zoom:34%;"></p><blockquote><p>可以看到平均周转时间降低到了13秒。 </p></blockquote><p>所以可以看到改变调度的顺序，也就是<strong>调度算法的改变会改善平均周转时间， 进而可能改善了响应时间这些指标。</strong> </p><h2 id="2-短作业优先SJF"><a href="#2-短作业优先SJF" class="headerlink" title="2.短作业优先SJF"></a>2.短作业优先SJF</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="(1).概念"></a>(1).概念</h3><p><strong><font color="red">短作业优先</font></strong>指的是具有<strong>最短完成时间的进程优先执行</strong>。 </p><ul><li><strong>非抢占式</strong></li></ul><p>如果短作业优先调度算法再改进一下： 加抢占模式，变成了抢占式的版本。这就是<font color="red"><strong>最短剩余时间优先调度算法</strong></font>。 </p><ul><li><strong>抢占式</strong></li></ul><p>所谓最短剩余时间就是当 <strong>一个新就绪的进程</strong> 比 <strong>正在当前运行的进程它的 剩余的运行时间短</strong>的时候， <strong>系统就会去抢占当前的进程，然后把CPU交给这个运行时间更短的进程</strong>。 </p><blockquote><p>因为在一个短作业运行的过程中，可能有一个新的进程创建出来，或者一个进程从等待变成就绪，那么它剩余的时间比当前正在运行的这个进程剩余的这个运行时间还短， 就要抢占了。</p></blockquote><h3 id="2-举例-1"><a href="#2-举例-1" class="headerlink" title="(2).举例"></a>(2).举例</h3><p>有四个进程到达时刻不是同时到达的，有不同的时刻：</p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/7.png" style="zoom:33%;"></p><h3 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="(3).优缺点"></a>(3).优缺点</h3><p><strong>优点：</strong></p><ul><li>在所有进程同时可运行时，采用SJF调度算法可以得到最短的平均周转时间。</li></ul><p><strong>缺点：</strong></p><ul><li>源源不断的短任务到来，可能使长的任务长时间得不到运行 → <strong>产生 “饥饿”现象 (starvation)</strong></li></ul><h2 id="3-最高相应比优先-HRRN"><a href="#3-最高相应比优先-HRRN" class="headerlink" title="3.最高相应比优先 HRRN"></a>3.最高相应比优先 HRRN</h2><blockquote><p> 既有先来先服务的优点，又有短作业优点,，这是操作系统当中的一个常用的手段——<strong>折衷权衡。</strong> 这种调度算法其中之一就是<strong>最高响应比优先</strong>。 </p></blockquote><p>基本思想是这样的： </p><p><strong>调度时，首先计算每个进程的响应比R；之后，总是选择R最高的进程执行。</strong></p><p>其中一种方案：</p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/8.png" style="zoom:35%;"> </p><blockquote><p>很明显地看到，如果处理时间短，也就是短作业，那么分母小，整个的值就大，因此响应比就大。 </p><p>如果很早就绪了，在就绪队列中等的时间非常长，那等待时间就变得越来越大， 最后响应比变得非常大，被调度上 CPU。 </p></blockquote><hr><h1 id="四-交互式系统的调度算法"><a href="#四-交互式系统的调度算法" class="headerlink" title="四.交互式系统的调度算法"></a>四.交互式系统的调度算法</h1><p>介绍交互式系统中所采用的一些调度算法：</p><ul><li><strong>轮转调度 (RR-Round Robin)</strong></li><li><strong>最高优先级调度 (HPF—Highest Priority First)</strong></li><li><strong>多级反馈队列 (Multiple feedback queue)</strong></li><li><strong>最短进程优先 (Shortest Process Next)</strong></li></ul><p>追求的指标主要是<strong>响应时间，公平，资源的平衡使用。</strong>最短进程优先调度算法呢短作业优先调度算法差不多，就不再介绍。</p><h2 id="1-时间片轮转算法"><a href="#1-时间片轮转算法" class="headerlink" title="1.时间片轮转算法"></a>1.时间片轮转算法</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="(1).概念"></a>(1).概念</h3><p><img src="//zybtree.github.io/2020/08/11/处理器调度/9.png" style="zoom:35%;"></p><p>左图看到当前正在运行的是B进程，排在它后面的是F进程。当B进程用完它的时间片之后就回到队列的末位，调度就会选择下一个进程，所以右图当前运行进程F上CPU。这就是一个时间片轮转，然后F运行完它的时间片后就继续去排队。队列里面的每一个进程都有机会轮流上CPU。</p><p><strong>目标：</strong></p><ul><li><strong>改善短作业(短任务)的平均响应时间。</strong></li></ul><p><strong>具体做法：</strong></p><ul><li><p><strong>周期性地切换</strong> </p></li><li><p><strong>每个进程分配一个时间片</strong></p></li><li><strong>通过了时钟中断引发轮换</strong></li></ul><p>以此来达到改善短作业的平均响应时间的目标。 </p><h3 id="2-如何选择合适的时间片"><a href="#2-如何选择合适的时间片" class="headerlink" title="(2).如何选择合适的时间片"></a>(2).如何选择合适的时间片</h3><h4 id="如果选择的时间片太长："><a href="#如果选择的时间片太长：" class="headerlink" title="如果选择的时间片太长："></a><strong>如果选择的时间片太长：</strong></h4><p><img src="//zybtree.github.io/2020/08/11/处理器调度/10.png" style="zoom:40%;"></p><p>上图可以看到这个进程开始运行后，给它一个时间片，在没有用完时间片的前提下就已经完成了一个响应。<strong>如果系统中绝大部分进程都不到一个时间片就可以完成响应的话，那么时间片轮转算法实际上已经退化成了一个先来先服务的这种算法。</strong>另外如果时间片过长会延长某些进程的响应时间。</p><h4 id="如果选择的时间片过短："><a href="#如果选择的时间片过短：" class="headerlink" title="如果选择的时间片过短："></a><strong>如果选择的时间片过短：</strong></h4><p><img src="//zybtree.github.io/2020/08/11/处理器调度/11.png" style="zoom:35%;"></p><p>如果时间片太短，响应时间也会变长，<strong>频繁地去切换，那切换这个行为本身会带来开销。</strong>前面已经讲过上下文切换是有开销的，所以切换也就浪费了CPU的时间。</p><h3 id="3-优缺点-1"><a href="#3-优缺点-1" class="headerlink" title="(3).优缺点"></a>(3).优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><p><strong>公平</strong> (进程轮流上CPU)</p></li><li><p><strong>有利于交互式计算，响应时间快</strong></p></li><li><p><strong>对于不同大小的进程是有利的</strong></p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p><strong>由于进程切换，时间片轮转算法要花费较高的开销</strong> (得让切换所带来的开销对于时间片来说能做到忽略不计)</p></li><li><p><strong>对于大小相同的进程是不利的</strong></p></li></ul><p><img src="//zybtree.github.io/2020/08/11/处理器调度/12.png" style="zoom:30%;"></p><h3 id="4-虚拟轮转法-VIRTUAL-RR"><a href="#4-虚拟轮转法-VIRTUAL-RR" class="headerlink" title="(4).虚拟轮转法 VIRTUAL RR"></a>(4).虚拟轮转法 VIRTUAL RR</h3><p>时间片轮转算法往往不区分I/O型进程与CPU型进程。这样会给I/O型进程带来一定的不公平。</p><blockquote><p>因为当一个CPU型进程被调度上CPU之后，用完它的时间片就会去重新排队，下一次再调度上CPU又用会完一个完整时间片。而I/O型进程被调度上CPU之后，运行完它的时间片，可能运行的很短就完成了它的任务，然后就去等待I/O，进入等待队列。一旦等待的结果到来，又变成一个就绪再次上 CPU，它又没有用完分配给它的时间片就结束了任务。所以CPU型的进程总是用完给它的时间片。 所以它占用了更多的 CPU 时间而I/O型进程总是用不完它的时间片，所以这个调度算法对它有些不公平。</p></blockquote><p><img src="//zybtree.github.io/2020/08/11/处理器调度/13.png" style="zoom:33%;"></p><p>上图是设计的虚拟轮转法： </p><p>当一个I/O型进程让出 CPU进到等待队列，从等待队列又重新回到就绪状态的时候。不去进入原来的就绪队列，会单独为它设置一个队列，<strong>叫做辅助队列</strong>。也就是所有I/O型的进程从等待变成就绪的时会进到这个队列。调度算法在选择进程的时候首先从这个辅助队列里去选择I/O 型进程。I/O 型进程上CPU之后，又很快地放弃了CPU进入等待直到辅助队列为空。实践表明这个方案改善了这个对I/O型进程的一种不公平性。</p><h2 id="2-最高优先级调度算法"><a href="#2-最高优先级调度算法" class="headerlink" title="2.最高优先级调度算法"></a>2.最高优先级调度算法</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="(1).概念"></a>(1).概念</h3><p>最高优先级调度算法思想比较简单，总是选择优先级最高去执行。</p><p>通常情况下：</p><ul><li>系统进程优先级 <font color="blue">高于</font> 用户进程 </li><li>前台进程优先级 <font color="blue">高于</font> 后台进程</li><li>操作系统更偏好 I/O型进程</li></ul><p>优先级可以是静态不变的，也可以动态调整。优先数可以决定优先级。就绪队列可以按照优先级组织</p><p><strong>特点：</strong></p><ul><li><strong>实现简单</strong></li><li><strong>不公平</strong> (出现饥饿现象)</li></ul><h3 id="2-优先级反转问题"><a href="#2-优先级反转问题" class="headerlink" title="(2).优先级反转问题"></a>(2).优先级反转问题</h3><p><strong>如果是基于优先级的抢占式调度算法，就会出现一个优先级反转问题。</strong></p><blockquote><p>优先级反转又称:优先级反置、翻转、倒挂</p></blockquote><p><strong>现象：</strong></p><p>一个低优先级进程持有一个高优先级进程所需要的资源，使得高优先级进程等待低优先级进程运行。</p><p>例子:</p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/14.png" style="zoom:33%;"></p><p><strong>影响:</strong></p><ul><li><strong>系统错误</strong></li><li><strong>高优先级进程停滞不前，导致系统性能降低</strong></li></ul><p><strong>解决方案</strong></p><ul><li><p><strong>设置优先级上限</strong> </p><blockquote><p>凡是进入临界区的进程优先级都是最高的。 不在临界区的进程优先级都会比这个进入临界区的这进程优先级要低。这样的话就可以执行完成，然后把临界区还回去。</p></blockquote></li><li><p><strong>优先级继承</strong></p><blockquote><p>如果一个低优先级的进程阻碍了一个高优先级进程执行，它可以<strong>临时地继承这个高优先级的这个进程的优先级，</strong>一下子把自己优先级继承到这个高优先级的这个程度。那么就可以去运行，然后把临界区还回去。 </p></blockquote></li><li><p><strong>使用中断禁止</strong></p><blockquote><p> 凡是进入临界区的进程，那么就不再响应中断的。 直到出临界区才响应中断，这样就保护了这个进程，让它继续去执行。</p></blockquote></li></ul><h2 id="3-多级反馈队列调度算法"><a href="#3-多级反馈队列调度算法" class="headerlink" title="3.多级反馈队列调度算法"></a>3.多级反馈队列调度算法</h2><blockquote><p>多级反馈队列调度算法是UNIX 的一个分支，是BSD5.3版所采用的调度算法。它是在前面各种调度算法的基础之上提出的一个<strong>综合的调度算法</strong>，是在考虑了各种因素之后进行折中权衡的一个结果。</p></blockquote><p>多级反馈队列调度算法的基本思想：</p><ol><li><p><strong>设置多个就绪队列，第一级队列优先级最高</strong></p></li><li><p><strong>给不同就绪队列中的进程分配长度不同的时间片，第一级队列优先级最高但时间片最小;随着队列优先级别的降低，时间片增大</strong></p></li><li><p><strong>在进行调度时，先从优先级高的进行。当第一级队列为空时，在第二级队列调度，以此类推</strong></p></li><li><p><strong>各级队列按照<font color="red">时间片轮转</font>方式进行调度</strong></p></li><li><p><strong>当一个新创建进程就绪后，进入第一级队列</strong></p></li><li><p><strong>进程用完时间片而放弃CPU，进入下一级就绪队列</strong></p></li><li><p><strong>由于阻塞而放弃CPU的进程进入相应的等待队列，一旦等待的事件发生，该进程回到原来一级就绪队列</strong></p><blockquote><p>可以根据不同的情况来设计不同的方案以体现系统对这一类进程的偏好程度。</p><p>比如说进程是回到原来一级就绪队列的队首还是队尾？如果回到队首，说明系统对这类进程更加友好 </p><p>另外当进程再度被调度上 CPU 之后是让它运行完剩余的时间片还是重新给它分配一个完整的时间片让它去运行？ 也体现了系统对这类进程的偏好程度。</p></blockquote></li></ol><p>以上为<strong>非抢占式</strong>的。</p><p><strong>若允许抢占：</strong></p><p>当有一个更高优先级的进程就绪的时候可以抢占正在运行进程的CPU，那么被抢占的进程会回到原来一级就绪队列的末尾。</p><blockquote><p>当然也可以有不同的设计方案比如说回到原来一级就绪队列的队首。 </p></blockquote><p>当这个进程再度被调度上CPU时可以运行完它刚才剩余的时间片，也可以重新给它一个完整的新的时间片让它运行。因此又派生出不同的设计方案 。</p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/15.png" style="zoom:40%;"></p><p>上图反映了一个进程在队列里头的一些迁移活动。</p><p>当创建一个新的进程时，所有的进程都进入第一级队列。</p><p><strong>如果是 I/O 型的进程，</strong>那么它可能被调度上 CPU 之后很短时间就去等待I/O，<font color="red">当它从等待队列又回到就绪队列的时候，<strong>让它回到原来一级就绪队列，所以优先级没有降低，被调度上 CPU 的机会很多。</strong> </font></p><p><strong>但是对于CPU 型的进程</strong>，它被调度上CPU用完了一个时间片之后就会回到下一级队列。<font color="red">如果<strong>每次都用完了它的时间片，它就会降级。</strong>可能一个CPU 型的进程就慢慢降到了优先级最低的这个队列里。</font></p><p>因此可以看到这个调度算法可以慢慢地区分出来哪些进程是CPU型进程，哪些进程是I/O型进程，很显然多级反馈队列调度算法对I/O型进程更偏好一点，对CPU型进程呢不太有利。但是它也做了一些弥补，比如说优先级高的队列时间片短，而优先级低的队列时间片会很大，所以当低优先级的CPU型进程被调度上CPU之后，它可以运行更长的时间。这里也是一种平衡的结果。</p><h2 id="4-各种调度算法的比较"><a href="#4-各种调度算法的比较" class="headerlink" title="4.各种调度算法的比较"></a>4.各种调度算法的比较</h2><p><img src="//zybtree.github.io/2020/08/11/处理器调度/16.png" style="zoom:40%;"></p><h2 id="5-多处理器调度算法需要考虑到的问题"><a href="#5-多处理器调度算法需要考虑到的问题" class="headerlink" title="5.多处理器调度算法需要考虑到的问题"></a>5.多处理器调度算法需要考虑到的问题</h2><ul><li><p><strong>不仅要决定选择哪一个进程执行</strong> </p><blockquote><p>还需要<font color="red">决定在哪一个CPU上执行</font></p></blockquote></li><li><p><strong>要考虑进程在多个CPU之间迁移时的开销</strong></p><ul><li><p><strong>高速缓存失效、TLB失效</strong></p></li><li><p><strong>尽可能使进程总是在同一个CPU上执行</strong></p><blockquote><p>如果每个进程可以调度到所有CPU上，假如进程上次在CPU1上执行，本次被调度到CPU2，则会增加高速缓存失效、TLB失效;如果每个进程尽量调度到指定的CPU上，各种失效就会减少</p></blockquote></li></ul></li><li><p><strong>考虑负载均衡问题</strong></p></li></ul><hr><h1 id="五-典型操作系统的调度算法"><a href="#五-典型操作系统的调度算法" class="headerlink" title="五.典型操作系统的调度算法"></a>五.典型操作系统的调度算法</h1><ul><li><strong>UNIX —— 动态优先数法</strong></li><li><strong>5.3BSD —— 多级反馈队列法</strong></li><li><strong>Linux —— 抢占式调度</strong></li><li><strong>Windows —— 基于优先级的抢占式多任务调度</strong> </li><li><strong>Solaris —— 综合调度算法</strong></li></ul><h2 id="1-Linux调度算法的发展过程"><a href="#1-Linux调度算法的发展过程" class="headerlink" title="1.Linux调度算法的发展过程"></a>1.Linux调度算法的发展过程</h2><p><img src="//zybtree.github.io/2020/08/11/处理器调度/20.png" style="zoom:30%;"></p><h2 id="2-Windows线程调度"><a href="#2-Windows线程调度" class="headerlink" title="2.Windows线程调度"></a>2.Windows线程调度</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="(1).基本概念"></a>(1).基本概念</h3><p>由于Windows操作系统<strong>支持内核级线程</strong>，所以<strong>CPU的调度单位是线程</strong>。 </p><p>Windows的线程调度采用的是<strong>基于动态优先级的，抢占式调度，同时结合了时间配额的调整</strong>。</p><p>基本思想：</p><ul><li><strong>就绪线程按优先级进入相应队列</strong></li><li><strong>系统总是选择优先级最高的就绪线程运行</strong></li><li><strong>同一优先级的各线程按时间片轮转进行调度</strong></li><li><strong>多CPU系统中允许多个线程并行运行</strong></li></ul><p><strong>引发线程调度的条件：</strong></p><ul><li><strong>线程正常终止或由于某种错误而终止</strong> </li><li><strong>新线程创建或一个等待线程变成就绪</strong> </li><li><strong>当一个线程从运行态进入阻塞态</strong></li><li><strong>当一个线程从运行态变为就绪态</strong></li></ul><blockquote><p> 然后再此基础上又添加了两个条件：</p></blockquote><ul><li><strong>一个线程的优先级改变了</strong></li><li><strong>一个线程改变了它的亲和(Affinity)处理机集合</strong></li></ul><blockquote><p><strong>线程的亲和处理机集合</strong>：有这样一个处理机的集合，允许线程在这个处理机集合上执行，<strong>除了处理机集合之外的其他处理机空闲，这个线程也不能执行。这个集合就是这个线程的亲和处理机集合。</strong></p><p>如果这个集合改变了，比如增加了一个新的处理机在这个集合当中，那么就可以引发新的线程调度。</p></blockquote><h3 id="2-线程优先级"><a href="#2-线程优先级" class="headerlink" title="(2).线程优先级"></a>(2).线程优先级</h3><p>Windows把线程分成了32 个优先级分成了三类：</p><p><img src="//zybtree.github.io/2020/08/11/处理器调度/21.png" style="zoom:30%;"></p><p><strong>实时优先级的线程：</strong>一旦确定了优先级，就不会再改变了。</p><p><strong>可变优先级的线程：</strong>它的优先级可以在一定的范围内提升或者是降低。 </p><blockquote><p> 对于可变优先级的线程，可以区分为 <strong>基本优先级</strong> 和 <strong>当前优先级</strong>。  </p></blockquote><p>通常系统会安排一个<strong>零页线程</strong>，即给物理内存清零的线程，把它的级别安排在零集，那么当没有其他进程运行的时候，有一个线程可以做这样的工作。</p><h3 id="3-线程的时间配额"><a href="#3-线程的时间配额" class="headerlink" title="(3).线程的时间配额"></a>(3).线程的时间配额</h3><p>时间配额<strong>不是一个时间长度值而是一个称为配额单位(quantum unit)的一个整数。</strong>一个线程用完了自己的时间配额时，如果没有其他相 同优先级的线程，<strong>Windows将重新<font color="red">给该线程分配一个新的时间配额</font></strong>，让它继续运行。</p><p>时间配额的特殊作用：</p><ul><li><p>假设用户首先启动了一个运行时间很长的电子表格计算程序，然后切换到一个游戏程序(需要复杂图形计算并显示，CPU型)</p></li><li><p>如果前台的游戏进程提高它的优先级，则后台的电子表格计算进程就几乎得不到CPU时间了</p></li><li><p>所以增加游戏进程的时间配额，则不会停止执行电子表格计算， 也能给游戏进程的CPU时间多一些。</p></li></ul><h3 id="4-调度策略"><a href="#4-调度策略" class="headerlink" title="(4).调度策略"></a>(4).调度策略</h3><h4 id="主动切换"><a href="#主动切换" class="headerlink" title="主动切换"></a>主动切换</h4><p><img src="//zybtree.github.io/2020/08/11/处理器调度/17.png" style="zoom:30%;"></p><blockquote><p> 有一个正在运行的线程，优先级是20。在运行过程中，由于需要等待输入输出的结果，那么这个线程就转到了阻塞态让出了 CPU。 调度程序会去选择一个新的线程上CPU运行。</p></blockquote><h4 id="抢占"><a href="#抢占" class="headerlink" title="抢占"></a>抢占</h4><p><img src="//zybtree.github.io/2020/08/11/处理器调度/18.png" style="zoom:30%;"></p><blockquote><p> 如果刚才被阻塞的线程被唤醒了，由于它的优先级高，它会去抢占CPU去运行，那么被抢占的这个线程就回到了就绪队列。</p></blockquote><p>当线程被抢占时，它被放回相应优先级的就绪队列的队首</p><ul><li><p><strong>处于实时优先级的线程在被抢占时，时间配额被重置为一个完整的时间配额</strong></p></li><li><p><strong>处于可变优先级的线程在被抢占时，时间配额不变，重新得到CPU后将运行剩余的时间配额</strong></p></li></ul><h4 id="时间配额用完"><a href="#时间配额用完" class="headerlink" title="时间配额用完"></a>时间配额用完</h4><p><img src="//zybtree.github.io/2020/08/11/处理器调度/19.png" style="zoom:40%;"></p><p>假设线程A的时间配额用完</p><ul><li>A的优先级没有降低<ul><li>如果队列中有其他就绪线程，选择下一个线程执行，A回到原来就绪队列末尾</li><li>如果队列中没有其他就绪线程，系统给线程A分配一个新的时间配额，让它继续运行</li></ul></li><li>A的优先级降低了<ul><li>Windows 将选择一个更高优先级的线程</li></ul></li></ul><blockquote><p>为什么一个线程用完了它的时间配额后，优先级会被降低？</p><p>那是因为这个线程在此之前，优先级被提升过。</p></blockquote><h4 id="线程优先级提升和与时间配额挑整"><a href="#线程优先级提升和与时间配额挑整" class="headerlink" title="线程优先级提升和与时间配额挑整"></a>线程优先级提升和与时间配额挑整</h4><p><strong>Windows的调度策略</strong></p><ul><li><strong>如何体现对某类线程具有倾向性?</strong></li><li><strong>如何解决由于调度策略中潜在的不公平性而带来饥饿现象?</strong></li><li><strong>如何改善系统吞吐量、响应时间等整体特征?</strong></li></ul><p><strong>解决方案</strong></p><ul><li><strong>提升线程的优先级</strong></li><li><strong>给线程分配一个很大的时间配额</strong></li></ul><h4 id="线程优先级提升"><a href="#线程优先级提升" class="headerlink" title="线程优先级提升"></a>线程优先级提升</h4><p>下列5种情况，Windows会提升线程的当前优先级:</p><ul><li><strong>I/O操作完成</strong></li><li><strong>信号量或事件等待结束</strong></li><li><strong>前台进程中的线程完成一个等待操作</strong></li><li><strong>由于窗口活动而唤醒窗口线程</strong></li><li><strong>线程处于就绪态超过了一定的时间还没有运行 ——  “饥饿”现象</strong></li></ul><blockquote><p> 线程优先级的提升是针对可变优先级范围内(1至15)的线程优先级。</p></blockquote><p><strong>例子：</strong></p><ol><li><strong>I/O操作完成后的线程优先级提升：</strong></li></ol><ul><li>在完成I/O操作后，Windows将临时提升等待该操作 线程的优先级，保证该线程能更快上CPU运行进行数据处理</li><li>优先级的提升值由设备驱动程序决定，提升建议值保存在系统文件<code>Wdm.h</code>或<code>Ntddk.h</code>中</li><li>优先级的提升幅度与对I/O请求的响应时间要求是一 致的，响应时间要求越高，优先级提升幅度越大</li><li>设备驱动程序在完成I/O请求时通过内核函数<code>IoCompleteRequest</code>来指定优先级提升的幅度</li><li>为避免不公平，在I/O操作完成唤醒等待线程时会将该线程的时间配额减1</li></ul><ol><li><strong>“饥饿”线程的优先级提升</strong></li></ol><ul><li><p>系统线程<code>平衡集管理器(balance set manager)</code>每秒钟扫描一次就绪队列，发现是否存在等待时间超过300个时钟中断间隔的线程</p></li><li><p>如果存在，平衡集管理器将这些线程的优先级提升到15 (最高)，并分配给它一个长度为正常值4倍的时间配额</p></li><li><p>因此当被提升的线程用完它的时间配额后，立即衰 减到它原来的基本优先级</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://zybtree.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="处理器调度" scheme="https://zybtree.github.io/tags/%E5%A4%84%E7%90%86%E5%99%A8%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>进程&amp;线程模型</title>
    <link href="https://zybtree.github.io/2020/08/10/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://zybtree.github.io/2020/08/10/进程-线程模型/</id>
    <published>2020-08-10T10:34:19.000Z</published>
    <updated>2020-08-11T12:22:15.893Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-进程基本概念"><a href="#一-进程基本概念" class="headerlink" title="一.进程基本概念"></a>一.进程基本概念</h1><blockquote><p>以多道程序设计技术为切点。多道程序设计技术是操作系统最早引入的软件技术。它的基本思想是允许<font color="red">多个程序同时进入内存</font>并运行。主要是<strong>为了提高 CPU的利用率,进而提高整个系统的效率。</strong></p></blockquote><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/1.png" style="zoom:40%;"></p><p>来看一个例子：</p><p>​        在A图中, 内存里有四个程序,因为只有一个物理的程序计数器，所以这四个程序呢是串形执行的。</p><p>​        有了多道程序设计技术之后，每个程序变换成了一个独立的控制流，占用一个逻辑的程序计数器。这也是<strong>操作系统虚拟性的一个体现</strong>，<font color="red">把一个物理的程序计数器，给它变换成多个逻辑的程序计数器</font>，实际上每个程序都有自己的程序计数器，由于物理上只有一个程序计数器，所以每个程序真正的上 CPU 就把逻辑程序计数器的内容，推送到物理程序计数器里头。通过这种变换，达到了在内存中同时有多个程序，达到并发执行的效果。</p><p>​        C图表示出在一个时间间隔内，每一个程序 A B C D 都执行过了。由于只有一个物理 CPU ，所以这些程序是轮流在 CPU 上执行。但是从宏观上讲它们都在并发执行。</p><p><strong>同时又产生了一个问题：在这样一个计算环境下，多个程序并发执行，如何管理在并发环境下同时执行的这些程序？</strong>首先来看下并发环境与并发程序。</p><h2 id="1-并发环境与并发程序"><a href="#1-并发环境与并发程序" class="headerlink" title="1.并发环境与并发程序"></a>1.并发环境与并发程序</h2><p><strong>并发环境：</strong>一段时间间隔内，单处理器上有两个或两个以上的程序同时处于开始运行但尚未结束的状态， 并且次序不是事先确定的。</p><p><strong>并发程序：</strong>在并发环境中执行的程序。</p><blockquote><p>在一个并发环境下执行的并发程序，怎么样来刻画这样的程序呢？于是进程的定义就应运而生了。</p></blockquote><h2 id="2-进程的定义"><a href="#2-进程的定义" class="headerlink" title="2.进程的定义"></a>2.进程的定义</h2><p><strong>定义：</strong>进程是具有独立功能的程序，关于某个数据集合上的一次运行活动，是资源分配的单位，也是CPU调度的单位。又称任务。</p><p><strong>特点：</strong></p><ul><li><p><strong>进程是程序的一次执行过程。</strong>（一个程序执行了两次,三次， 那就是不同的进程） </p></li><li><p><strong>进程是运行程序的一个抽象。</strong>（它代表了所运行的那个环境，代表了一个 CPU，因此有时候说进程是对 CPU 的一个抽象）</p></li><li><p><strong>将一个 CPU 把它变换成多个虚拟的 CPU 。</strong>(虚拟化技术)</p></li><li><p><strong>操作系统的资源是以进程为单位来分配的。比如说内存，文件等等。 最重要的一个资源就是地址空间。</strong>(操作系统为每一个进程分配了一个独立的地址空间)</p></li><li><p><strong>操作系统把CPU的控制权，交给了某一个进程，让这个进程上去运行，这称之为一个调度。</strong></p></li></ul><blockquote><p>在操作系统执行过程中，会有很多的程序向操作系统提出申请来运行，那么操作系统怎么知道这些进程是存在，还是不存在呢？ 这里就介绍操作系统为了管理进程所设计的一个非常重要的数据结构，进程控制块 PCB 。</p></blockquote><h2 id="3-进程控制块PCB"><a href="#3-进程控制块PCB" class="headerlink" title="3.进程控制块PCB"></a>3.进程控制块PCB</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="(1).定义"></a>(1).定义</h3><p><strong>PCB：Process Control Block.</strong>又称进程描述符、进程属性。</p><p>​        操作系统为了管理进程而，设计的一个非常重要的<strong>数据结构</strong>，这就是进程控制块PCB。这个数据结构是专门用于<strong>控制和管理进程的，它保存控制和管理进程所需要的所有的信息。</strong>主要是记录了进程的<strong>各种属性</strong>，并且描述出进程的<strong>运动变化过程</strong>，进程的<strong>发展程度</strong>。<strong>进程控制块PCB这个数据结构是操作系统感知进程存在的一个标志。它们是一一对应的。</strong></p><p><strong>进程表：</strong>由于操作系统管理了很多的进程，为了便于管理，就把所有进程的每个进程的PCB集中在一起，放在了内存的固定区域，这就形成了进程表。</p><blockquote><p>进程表是所有进程的 PCB 的一个集合。而且就是进程表的大小往往是固定的，确定了在一个操作系统中最多支持多少个进程 。</p></blockquote><h3 id="2-PCB包含的信息内容"><a href="#2-PCB包含的信息内容" class="headerlink" title="(2).PCB包含的信息内容"></a>(2).PCB包含的信息内容</h3><h4 id="进程描述信息"><a href="#进程描述信息" class="headerlink" title="进程描述信息"></a>进程描述信息</h4><ul><li><strong>进程标识符(process ID)</strong>，唯一的，通常是一个整数。</li><li><strong>进程名</strong>，通常基于可执行文件名，不唯一。</li><li><strong>用户标识符(user ID)</strong></li><li><strong>进程组关系</strong></li></ul><h4 id="进程控制信息"><a href="#进程控制信息" class="headerlink" title="进程控制信息"></a>进程控制信息</h4><ul><li><strong>当前状态</strong></li><li><strong>优先级(priority)</strong></li><li><strong>代码执行入口地址</strong></li><li><strong>程序的磁盘地址</strong></li><li><strong>运行统计信息</strong>(执行时间、页面调度) </li><li><strong>进程间同步和通信</strong></li><li><strong>进程的队列指针</strong></li><li><strong>进程的消息队列指针</strong></li></ul><h4 id="所拥有的资源和使用情况"><a href="#所拥有的资源和使用情况" class="headerlink" title="所拥有的资源和使用情况"></a>所拥有的资源和使用情况</h4><ul><li><strong>虚拟地址空间的状况</strong> </li><li><strong>打开文件列表</strong></li></ul><h4 id="CPU现场信息"><a href="#CPU现场信息" class="headerlink" title="CPU现场信息"></a>CPU现场信息</h4><blockquote><p><strong>CPU的现场信息</strong>是指当进程不运行的时候，操作系统要把一些重要的信息，硬件执行的状态信息，保存在PCB 里。</p></blockquote><ul><li><p><strong>寄存器值</strong>(通用寄存器、程序计数 器PC、程序状态字PSW、栈指针)</p></li><li><p><strong>指向该进程页表的指针</strong></p></li></ul><h3 id="3-SOLARIS的进程控制块与进程表"><a href="#3-SOLARIS的进程控制块与进程表" class="headerlink" title="(3).SOLARIS的进程控制块与进程表"></a>(3).SOLARIS的进程控制块与进程表</h3><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/2.png" style="zoom:33%;"></p><p>SOLARIS是基于 Unix 操作系统，它的进程控制块的名字一般叫Proc结构。每一个Proc结构代表一个PCB。把所有的Proc结构组织成一个链，那么这就是一个进程表。</p><p><strong>Proc 结构保存的信息：</strong>（重点介绍三个）</p><p>第一个是可执行文件 p_exec，通过这样一个记录信息，可以找到这个进程所对应的可执行文件在磁盘上的位置。</p><p>第二个是进程的地址空间 p_as，进程地址空间放了很多内容，每一项内容都放在一段里头，通过段来把进程地址空间描述清楚，把这些段按照地址大小的顺序，把它建立成一个 AVL 树，便于以后的查找。 </p><p>第三个是文件表，通过这张表可以把所有打开的文件都能找到。</p><hr><h1 id="二-进程状态及状态转换"><a href="#二-进程状态及状态转换" class="headerlink" title="二.进程状态及状态转换"></a>二.进程状态及状态转换</h1><h2 id="1-进程的三种状态及状态的转换"><a href="#1-进程的三种状态及状态的转换" class="headerlink" title="1.进程的三种状态及状态的转换"></a>1.进程的三种状态及状态的转换</h2><h3 id="1-进程的三种基本状态"><a href="#1-进程的三种基本状态" class="headerlink" title="(1).进程的三种基本状态"></a>(1).进程的三种基本状态</h3><p><strong>运行态(Running)</strong> </p><p>进程占有CPU，并在CPU上运行。</p><p><strong>就绪态(Ready)</strong> </p><p>进程已经具备运行条件，但由于没有空闲CPU，而暂时不能运行。</p><p><strong>等待态(Waiting/Blocked)</strong></p><blockquote><p>也称阻塞态、封锁态、睡眠态 </p></blockquote><p>进程因等待某一事件而暂时不能运行。</p><h3 id="2-三状态模型及状态转换"><a href="#2-三状态模型及状态转换" class="headerlink" title="(2).三状态模型及状态转换"></a>(2).三状态模型及状态转换</h3><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/3.png" style="zoom:25%;"></p><h2 id="2-进程的其他状态"><a href="#2-进程的其他状态" class="headerlink" title="2.进程的其他状态"></a>2.进程的其他状态</h2><h3 id="1-创建态"><a href="#1-创建态" class="headerlink" title="(1).创建态"></a>(1).创建态</h3><p>已完成创建一进程所必要的工作，比如分配了PID、填写了PCB。但由于某些原因，操作系统尚未同意执行该进程。</p><h3 id="2-终止态"><a href="#2-终止态" class="headerlink" title="(2).终止态"></a>(2).终止态</h3><p>终止执行后，进程进入该状态。</p><ul><li><p>可完成一些数据统计工作</p></li><li><p><strong>资源回收</strong></p></li></ul><h3 id="3-挂起态"><a href="#3-挂起态" class="headerlink" title="(3).挂起态"></a>(3).挂起态</h3><p>在操作系统当中，如果想进行一些负载调节时，可能会把进程送入这个状态。</p><p>比如如果现在系统中进程太多，CPU也忙不过来了，此时操作系统会把一部分进程，让它暂时不能运行，但是它又不是等待某个事件发生，所以就把它弄成一个特殊的状态，叫挂起态。</p><p>一旦进程进入了挂起态，操作系统会把它的内存空间呢收回来。把这些进程的相关的内容送到磁盘上保存起来，一旦继续让它运行，我们通常称之为激活。进程的内容再从磁盘上读入内存就可以了。</p><h2 id="3-五状态模型"><a href="#3-五状态模型" class="headerlink" title="3.五状态模型"></a>3.五状态模型</h2><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/4.png" style="zoom:30%;"></p><h2 id="4-七状态模型"><a href="#4-七状态模型" class="headerlink" title="4.七状态模型"></a>4.七状态模型</h2><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/5.png" style="zoom:32%;"></p><h2 id="5-进程队列"><a href="#5-进程队列" class="headerlink" title="5.进程队列"></a>5.进程队列</h2><blockquote><p>操作系统在设计进程模型的时候要确定有什么样的状态，确定状态之间的转换，在什么条件下转换 ，通过什么样的操作来促成这种转换。 而且操作系统当中有很多的进程，它们都处于不同的状态。所以需要按不同的状态把它们管理起来，因此，操作系统设计了一个若干个进程队列。</p></blockquote><p>操作系统设计了一个若干个进程队列，为<strong>每一个类进程建立一个或者多个队列也是可以的。</strong> 每个队列的元素，实际上就是PCB 状态的改变，其实就是某个进程的PCB从一个队列出队，然后在另一个队列里头入队的过程。也就是伴随着状态的改变，进程的PCB从一个队列进入到另外一个队列。 </p><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/6.png" style="zoom:35%;"></p><p><strong>五状态进程模型的队列模型：</strong></p><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/7.png" style="zoom:38%;"></p><hr><h1 id="三-进程控制"><a href="#三-进程控制" class="headerlink" title="三.进程控制"></a>三.进程控制</h1><p>进程控制操作主要是完成进程之间的各状态之间的转换，<strong>进程控制操作实际上就是具有特定功能的程序。</strong> <font color="red">这个程序执行的时候，由于不允许被中断</font>，所以把它称之为原语。</p><p><strong>原语：</strong> <strong>所谓原语(有时候又称之为原子操作) 是完成某种特定功能的一段程序</strong>，比如说完成创建，或者是完成阻塞，它是一段程序，完成了某种特定功能，<font color="red">但是这个程序在执行过程中，是具有不可分割性，或者是不可中断的，它必须持续地执行，不允许被打断</font>，这就是原语。</p><blockquote><p>实现原语需要操作系统通过屏蔽中断的一些措施来达到这样一个结果。进程控制操作最重要的一个就是进程的创建。</p></blockquote><h2 id="1-进程创建"><a href="#1-进程创建" class="headerlink" title="1.进程创建"></a>1.进程创建</h2><p><strong>主要完成以下几个工作：</strong> </p><ol><li><strong>首先给每一个新的进程分配一个标识ID，再给它找一个空的、 没有用过的进程控制块</strong></li><li><p><strong>然后要给这个进程分配它所需要的地址空间。</strong> (如果这个地址空间在虚拟存储机制之下，就假设给了它，只是给了一个虚拟地址空间）。</p></li><li><p><strong>再初始化这个进程控制块，填写相应的内容</strong>。</p><ul><li>通常都是设定一些默认值，比如说状态，进程的状态设定为New 等等 </li></ul></li><li>创建进程控制块之后，要把它插入到相应的队列当中， <strong>所以要设置相应的队列指针</strong>。</li></ol><h2 id="2-进程撤销"><a href="#2-进程撤销" class="headerlink" title="2.进程撤销"></a>2.进程撤销</h2><p><strong>进程的撤销实际上就是结束进程。</strong></p><p>结束进程其实主要做两件事情：</p><ol><li><p><strong>把进程所占有的资源回收</strong> </p><ul><li>关闭它打开的文件；如果有网络连接就断开；如果分配了一些内存，就把它回收了</li></ul></li><li><p><strong><font color="red">资源回收之后最重要的，是要把分配给它的 PCB 收回。</font></strong></p></li></ol><h2 id="3-进程阻塞"><a href="#3-进程阻塞" class="headerlink" title="3.进程阻塞"></a>3.进程阻塞</h2><p><strong>处于运行状态的进程，在其运行过程中期待某一事件发生</strong>，如等待键盘输入、等待 磁盘数据传输完成、等待其它进程发送消息， <font color="red">当被等待的事件未发生时，由<strong>进程自己执行阻塞原语，使自己由运行态变为阻塞态</strong>。</font></p><h2 id="4-UNIX的几个进程控制操作"><a href="#4-UNIX的几个进程控制操作" class="headerlink" title="4.UNIX的几个进程控制操作"></a>4.UNIX的几个进程控制操作</h2><ul><li><p><strong>fork( )：</strong>通过<font color="red">复制调用进程来</font>建立新的进程，是 最基本的进程建立过程</p></li><li><p><strong>exec( )：</strong>包括一系列系统调用，它们都是通过用 一段新的程序代码覆盖原来的地址空间，<font color="red">实现进程执行代码的转换</font></p></li><li><strong>wait( )：</strong>提供初级进程同步操作，能使一个进程等待另外一个进程的结束</li><li><strong>exit( )</strong>：用来终止一个进程的运行</li></ul><blockquote><p>他们都是以系统调用的形式，作为一个接头呈现给用户，由用户程序来调用 。</p></blockquote><h2 id="5-UNIX的FORK-实现"><a href="#5-UNIX的FORK-实现" class="headerlink" title="5.UNIX的FORK()实现"></a>5.UNIX的FORK()实现</h2><ol><li><p><strong>首先会为子进程分配一个空闲的进程描述符，也就是 PCB。</strong></p><blockquote><p> PCB在 UNIX 一般叫 proc 结构 </p></blockquote></li><li><p><strong>给子进程分配了一个唯一的标识pid</strong> </p></li><li><p><strong>给子进程分配地址空间</strong> </p><blockquote><p>在 UNIX 里 fork 以一次一页的方式把父进程的地址空间内容完全地拷贝给子进程</p></blockquote></li><li><p><strong>从父进程那里继承各种共享资源</strong></p><blockquote><p>比如打开的文件，当前工作目录等等 </p></blockquote></li><li><p><strong>子进程的状态 设置为就绪态，并且把它插入到了就绪队列</strong> </p></li><li><p><strong>做完这项工作之后，fork 就为子进程返回一个值 0</strong> </p></li><li><strong>为父进程返回一个值，是子进程的 pid</strong> </li></ol><blockquote><p>那么也就是说，fork 执行完后，原来一个进程，父进程就一分为二，变成了两个进程，一个父进程，一个子进程。</p><p>在父进程得到的返回值是 pid，在子进程里得到的返回值是 0。</p></blockquote><p><strong>问题：以一次一页的方式来复制父进程的地址空间有什么弊端？</strong></p><p>​        父进程把它所有的内容都拷贝给子进程 ，但是子进程不一定需要，而且通常情况下，父进程创建子进程是让子进程做与父进程所不同的工作。所以把发父进程所有内容拷贝给子进程，实际上，子进程也不需要。因此，子进程会接着执行 exec这样一个函数来把父进程拷贝过来的这些地址空间给覆盖掉。因此之前的这种复制工作，实际上就是无用功了。</p><p><strong>Linux 使用了写时复制技术 Copy-On-Write，</strong><font color="red">Linux中父进程把地址空间的指针传递给子进程，再把地址空间设置为只读。那么当子进程要往地址空间里写东西的时候，操作系统会为子进程单独再开辟一块空间，把相应的内容放进去 那么这样的话呢，节省了之前复制父进程地址空间的时间，加快了 fork 的实现速度。</font></p><p><strong>代码例子：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line">pid = fork();<span class="comment">/* 创建一个子进程 */</span></span><br><span class="line">  <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;<span class="comment">/* 出错 */</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, “fork failed”);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">/* 子进程 */</span> </span><br><span class="line">    execlp(“/bin/ls”, “ls”, <span class="literal">NULL</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="comment">/* 父进程 */</span></span><br><span class="line">    wait(<span class="literal">NULL</span>); <span class="comment">/* 父进程等待子进程结束 */</span> </span><br><span class="line">    <span class="built_in">printf</span>(“child complete”);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>流程：</strong></p><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/8.png" style="zoom:50%;"></p><hr><h1 id="四-进程相关概念"><a href="#四-进程相关概念" class="headerlink" title="四.进程相关概念"></a>四.进程相关概念</h1><h2 id="1-进程的讨论"><a href="#1-进程的讨论" class="headerlink" title="1.进程的讨论"></a>1.进程的讨论</h2><h3 id="1-进程的分类"><a href="#1-进程的分类" class="headerlink" title="(1).进程的分类"></a>(1).进程的分类</h3><h4 id="第一种分类"><a href="#第一种分类" class="headerlink" title="第一种分类"></a>第一种分类</h4><ul><li><strong>系统进程</strong></li><li><strong>用户进程</strong> </li></ul><blockquote><p> 系统进程是操作系统为了管理一些资源而设计的进程,它的主要特点是优先级比较高。相对于用户进程而言，系统进程会优先被调度上CPU 去执行，因为它完成了一些关键的工作。</p></blockquote><h4 id="第二中分类"><a href="#第二中分类" class="headerlink" title="第二中分类"></a>第二中分类</h4><ul><li>前台进程</li><li>后台进程 </li></ul><blockquote><p> 前台进程实际上就是和用户直接交互的这样一些进程：用户敲键盘、 动鼠标。</p><p>后台进程往往是操作系统在启动了以后创建的一些进程，这些进程为用户来进行服务，比如说打印进程。</p><p>有一些应用进程也在系统启动的时候被创建了， 比如说防火墙，还有一些电子邮件的接收。这样的一些进程它们在后台工作，然后发生了一些事件，它们来接收这些事件。对于用户来讲，他所打交道的是前台进程。</p></blockquote><h4 id="第三种分类"><a href="#第三种分类" class="headerlink" title="第三种分类"></a>第三种分类</h4><ul><li>CPU 密集型进程</li><li>I/O 密集型程序</li></ul><blockquote><p> 有一些进程需要用到很多的 CPU 时间。比如说，画面渲染需要大量的计算，因此把它称之为 CPU 密集型进程 </p><p>有些经常需要输入、 输出、 读盘这样一些操作，这些进程被称之为 I/O 密集型 </p><p>那么这两类进程的区分也是为了以后调度程序的选择做一些准备 。</p></blockquote><h3 id="2-进程层次结构"><a href="#2-进程层次结构" class="headerlink" title="(2).进程层次结构"></a>(2).进程层次结构</h3><h4 id="UNIX进程家族树-init为根"><a href="#UNIX进程家族树-init为根" class="headerlink" title="UNIX进程家族树:init为根"></a>UNIX进程家族树:init为根</h4><p>UNIX 进程都是在一个家族里，这个家族树有一个根，这个根是一个 init 进程，是个 1 号进程，是所有进程的一个祖宗。在某些情况下，某一个进程它结束了，那么它的子孙进程，其实也必须全部的结束。</p><h4 id="Windows-地位相同"><a href="#Windows-地位相同" class="headerlink" title="Windows:地位相同"></a>Windows:地位相同</h4><p> 那在 Windows 中也是一个进程创建另一个进程，但是创建完之后，这两个进程的关系比较疏远，也就是它们的地位是相同的。 </p><h2 id="2-进程与程序的区别"><a href="#2-进程与程序的区别" class="headerlink" title="2.进程与程序的区别"></a>2.进程与程序的区别</h2><ul><li><strong>进程更能准确刻画并发，而程序不能</strong></li><li><strong>程序是静态的，进程是动态的</strong></li><li><strong>进程有生命周期的，有诞生有消亡，是 短暂的 ; 而程序是相对长久的</strong></li><li><strong>一个程序可对应多个进程</strong></li><li><strong>进程具有创建其他进程的功能</strong>(程序没有)</li></ul><h2 id="3-进程地址空间"><a href="#3-进程地址空间" class="headerlink" title="3.进程地址空间"></a>3.进程地址空间</h2><blockquote><p>操作系统会给每一个进程都分配了一个地址空间。怎么理解这句话？怎么理解这样一个场景？</p></blockquote><p><strong>以代码为例：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> myval;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  myval = atoi(argv[<span class="number">1</span>]); </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(“myval is %d, loc <span class="number">0</span>x%lx\n”, myval, (<span class="keyword">long</span>) &amp;myval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这个程序实际上是从命令行接收了参数，把这个参数赋给一个变量 myval 然后就是循环，来打印这个变量的值，同时把这个变量的位置 打印出来。 </p><p>现在同时执行两个 myval 程序。 也就是这两个进程在执行，因为用了一个循环，所以这个进程会一直在那运行下去。如果运行这两个进程，分别用参数 7，8 来调用这个程序，输出的结果如下：</p><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/9.png" style="zoom:35%;"></p><blockquote><p>当执行 myval 7 的时候，myval 的这个变量值是 7 ，地址是 60104C 。同时 myval 8 也在执行。 发现 myval 的值是 8 ，而myval 的地址呢 也是 60104C。 <strong>为何变量 myval 的值是不一样的，地址却是相同的呢？</strong></p></blockquote><p>实际上每个进程有自己相对独立地址空间。 <font color="red"><strong>两个进程实际上是两个地址空间。而且它们的地址空间是隔离的。不同的地址空间，它的地址不是实际的物理内存地址。 实际上是一个相对地址，如果支持虚存的系统当中，那么这个地址就是虚拟地址，也可以说是一个相对地址，或者是逻辑地址。</strong></font></p><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/10.png" style="zoom:35%;"></p><p>上图是一个进程地址空间的表示图。在这个空间里，操作系统会占一部分内容：</p><ul><li><p>上半部分是<strong>操作系统内核的地址空间</strong> </p></li><li><p>下面是<strong>用户地址空间</strong></p><blockquote><p>用户地址空间包括了用户执行的过程中所需要的一些代码数据，一些临时变量。 还有在运行过程中如果进行了过程调用函数调用，需要用栈来传递参数，那么主体有这样一些内容。在进程运行过程中还可能调一些共享库， 因此还有一些共享库放在这个位置；如果打开了文件以文件内存映射文件的方式来使用这个文件的话，那么也用到这些空间。这就是进程用户地址空间的内容。</p></blockquote></li></ul><p>myvalue 7 和 myvalue 8 这两个进程每个都有这么一个地址空间 ， <font color="red"><strong>因此myvalue这个变量实际上是在不同的地址空间里的相同的位置。因此，我们看到了虚拟地址虽然是相同的 那么这个相同指的是对于这个地址空间的位置，而不是指的在物理内存的位置。</strong></font></p><h2 id="4-进程映像-IMAGE"><a href="#4-进程映像-IMAGE" class="headerlink" title="4.进程映像(IMAGE)"></a>4.进程映像(IMAGE)</h2><p><strong>进程映像指的是进程执行过程中它的全过程的一个静态描述，可以把它看成是在某一瞬间的进程的快照。</strong> </p><p><strong>包括的内容：</strong>地址空间的内容，硬件寄存器的内容，以及与该进程相关的一些内核数据结构和内核栈。 </p><ul><li><p>用户相关:进程地址空间(包括代码段、数据段、 堆和栈、共享库……)</p></li><li><p>寄存器相关:程序计数器、指令寄存器、程序状态 寄存器、栈指针、通用寄存器等的值</p></li><li><p>内核相关:</p><ul><li>静态部分:PCB及各种资源数据结构</li><li>动态部分:内核栈(不同进程在进入内核后使用不同的内核栈)</li></ul></li></ul><h2 id="5-上下文-CONTEXT-切换"><a href="#5-上下文-CONTEXT-切换" class="headerlink" title="5.上下文(CONTEXT)切换"></a>5.上下文(CONTEXT)切换</h2><p><strong>将CPU硬件状态从一个进程换到另一个进程的过程称为上下文切换。</strong></p><ul><li><p>进程运行时，其硬件状态保存在<strong>CPU上的寄存器</strong>中。</p><blockquote><p>寄存器：程序计数器、程序状态寄存器、栈指针、通用寄存器、其他控制寄存器的值。</p></blockquote></li><li><p>进程不运行时，这些寄存器的值保存在<strong>进程控制块 PCB中</strong>；<font color="red">当操作系统要运行一个新的进程时，将 PCB中的相关值送到对应的寄存器中。</font>这个就完成了上下文切换的一个过程。</p></li></ul><hr><h1 id="五-线程的引入"><a href="#五-线程的引入" class="headerlink" title="五.线程的引入"></a>五.线程的引入</h1><p>为什么在进程中再派生线程?具体有三个理由：</p><ul><li><strong>应用的需要</strong> </li><li><strong>开销的考虑</strong> </li><li><strong>性能的考虑</strong></li></ul><h2 id="1-Web服务器为例"><a href="#1-Web服务器为例" class="headerlink" title="1.Web服务器为例"></a>1.Web服务器为例</h2><h3 id="1-工作方式"><a href="#1-工作方式" class="headerlink" title="(1).工作方式"></a>(1).工作方式</h3><p><strong>以Web服务器为例，</strong>其工作方式是：</p><ol><li>从客户端接收网页请求(http协议) </li><li>从磁盘上检索相关网页，读入内存</li><li>将网页返回给对应的客户端</li></ol><blockquote><p>每次到磁盘上搜索相关的网页，进程就会停在那里，这样性能就比较慢。 怎么样去提高服务器的工作的效率?</p></blockquote><p>通常情况下，是在服务器的内存里头，开辟一个<strong>网页缓存</strong> ( Web page Cache )，保存了常用的网页。当Web服务器从客户端接收了网页请求之后会先到网页缓存当中去查找，如果找到就直接把结果返回给客户端，就不用到磁盘上去找。 但是如果没找到就先到磁盘上去搜索相关的网页，得到了之后写入网页缓存，然后再把结果返回给用户。 </p><h3 id="2-无线程的情况"><a href="#2-无线程的情况" class="headerlink" title="(2).无线程的情况"></a>(2).无线程的情况</h3><p>此时有两种解决方案：</p><h4 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h4><p>设定一个服务进程，这个服务进程只能是顺序编程 。也就是说，如果它到磁盘上去搜寻网页，那就不能再去接收客户端的请求。因此会造成服务器性能下降。</p><blockquote><p>为什么不能设定多个服务进程？</p><p><strong>每个进程有自己独立的地址空间，所以它不能共享信息，所以只能有一个服务进程。</strong></p></blockquote><h4 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h4><p>有限状态机的方法<strong>实际上是用一个复杂的编程模型来自己模拟一些并发的工作，即进程自己来模拟并发的工作。</strong> </p><p>比如说接收了一个用户请求之后，如果要到磁盘上搜寻这个网页，那么原本这个进程会被暂停，这个时候就要改造这个搜寻网页的操作，把它改造成一个<strong>非阻塞的I/O</strong>。</p><blockquote><p>到磁盘上去搜寻网页的同时这个进程还可以继续做与这个网页内容无关的一些工作。 所以叫非阻塞 I/O。</p></blockquote><p>在查询网页的同时，磁盘在工作，而且<strong>这个进程就可以回来做别的事情，它可以继续去接收用户的客户端请求。 当新的请求被接收到之后，它继续可能在 Web Cache 里找网页，然后返回去，如果没找到网页呢，继续再去调用磁盘</strong>。<font color="red">但是这就出现了一个问题：磁盘的这个结果返回了，究竟是哪一个客户端的请求呢？</font></p><p>所以这个时候，进程要自己把这些信息记录下来，然后磁盘返回了请求之后，就要判断是哪一个客户端的请求，然后返回给对应的客户 端。因此，它的编程模型呢是比较复杂的。</p><h3 id="3-引进多线程之后"><a href="#3-引进多线程之后" class="headerlink" title="(3).引进多线程之后"></a>(3).引进多线程之后</h3><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/11.png" style="zoom:35%;"></p><p><strong>工作方式：</strong> </p><p>把线程分成两类：</p><ul><li><p><strong>分派线程</strong></p><blockquote><p>分派线程只需要一个，分派线程的<strong>主要工作就是监听客户端</strong>，客户端只要有请求就把请求读进来，但是它不完成客户端的请求，它把这个请求分派给其它的线程来完成，而完成工作的线程就是工作线程。 </p></blockquote></li><li><p><strong>工作线程</strong></p><blockquote><p>Web 服务器上有一堆工作线程，它们都是用来完成的是服务客户请求的。分派线程获得了客户端请求之后就把它分给某一个工作线程，工作线程呢还跟前面一样先到Web Cache里去查找网页是否存在，如果存在就返回给客户端，如果不存在就要启动磁盘，到磁盘上去搜寻网页。它到磁盘上搜寻网页，这是一个阻塞的I/O，<strong>这时它就会被阻塞，然后等待，但是没有关系，因为还有其它的工作线程。</strong> </p></blockquote><h2 id="2-引入线程的优点"><a href="#2-引入线程的优点" class="headerlink" title="2.引入线程的优点"></a>2.引入线程的优点</h2></li></ul><h3 id="1-从开销的角度"><a href="#1-从开销的角度" class="headerlink" title="(1).从开销的角度"></a>(1).从开销的角度</h3><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/12.png" style="zoom:35%;"></p><h3 id="2-从性能的角度"><a href="#2-从性能的角度" class="headerlink" title="(2).从性能的角度"></a>(2).从性能的角度</h3><p>如果一个进程里头又有多个线程，而这些线程，有的计算，有的去 I/O，当有多个处理器的时候，就可以充分发挥这个优势了。所以当多处理器的情况下，一个进程就可以有很多的任务同时在执行。性能就提高了很多。</p><hr><h1 id="六-线程的基本概念"><a href="#六-线程的基本概念" class="headerlink" title="六.线程的基本概念"></a>六.线程的基本概念</h1><p>进程有两个基本的属性：</p><ul><li><p><strong>进程是资源的拥有者。</strong> </p></li><li><p><strong>进程是CPU的一个调度单位。</strong> </p></li></ul><p>但是有了线程之后，<font color="red">线程就继承了进程中的一个属性，也就是线程成为了 CPU 的调度单位。 而进程依然还是管理资源，然后是资源的一个拥有者。 </font></p><p>线程实际上是<strong>进程中的一个运行实体。</strong> </p><blockquote><p> 从运行的角度，它是一个运行的实体，它是一个 CPU 的调度单位。 有的时候把线程称之为轻量级进程。 也就是说，在进程当中又增加了多个执行序列， 让这些执行序列可以并发执行，以提高软件的运行效率。 </p></blockquote><p>所以强调的是：<font color="red"><strong>在进程中增加了多个执行序列，叫线程。</strong></font></p><hr><h1 id="七-线程的属性"><a href="#七-线程的属性" class="headerlink" title="七.线程的属性"></a>七.线程的属性</h1><p> 线程是一个运行实体，它有属于线程自己的一些属性： </p><ul><li><p><strong>有标识符ID</strong></p><blockquote><p> 同一个进程的不同线程要区分 </p></blockquote></li><li><p><strong>有状态及状态转换</strong> </p><blockquote><p>因为线程是上 CPU 的，所以它有状态。它也有状态的转换，也需要提供一些针对线程的操作。 </p></blockquote></li><li><p><strong>不运行的时需要保存上下文环境</strong></p><blockquote><p>上下文环境：程序计数器等寄存器(保存在线程的相对的数据结构里)</p></blockquote></li><li><p><strong>有自己的栈和栈指针</strong></p><blockquote><p>不同的线程，这些信息也是不一样的。 </p></blockquote></li><li><p><strong>共享所在进程的地址空间和其他资源</strong></p><blockquote><p>同一个进程的不同线程它们是共享所在进程地址空间，内容和这个进程所拥有的资源的，所以这是非常重要的，也就是线程之间的通信，或者其他的一些操作带来了便利的地方，它们是共享同一个进程的地址空间和有关的资源。 </p></blockquote></li><li><p><strong>可以创建、撤消另一个线程</strong></p><blockquote><p>当创建进程以后，实际上是只有一个线程，我们称之为一个主线程。 然后由它再创建其他的线程，所以程序开始的时候，我们可以看成是一个单线程的进程在运行。</p></blockquote></li></ul><hr><h1 id="八-线程机制的实现"><a href="#八-线程机制的实现" class="headerlink" title="八.线程机制的实现"></a>八.线程机制的实现</h1><blockquote><p>在操作系统中， 如何来支持线程机制的实现? 通常有三种方式：<strong>用户级线程</strong>、 <strong>核心级线程</strong>和<strong>混合方式</strong>。 </p><p>由于在线程的概念提出之前，操作系统已经运行了很多年，进程的概念已经用了很长时间。 因此当有一个新的机制提出来的时候， 不同的操作系统对这个机制的支持是不一样的。</p></blockquote><h2 id="1-用户级线程"><a href="#1-用户级线程" class="headerlink" title="1.用户级线程"></a>1.用户级线程</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="(1).概念"></a>(1).概念</h3><p><strong>用户级线程：</strong>在用户空间建了一个线程库， 这个线程库里提供了一系列的针对线程的操作。 这些线程的管理是通过一个 Run-time System 运行时系统来管理的。 它完成的就是这些线程的创建和线程数据结构的一些管理工作。 如下图所示：</p><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/13.png" style="zoom:40%;"></p><blockquote><p>有一个Run-time System，它是管理这些线程里的数据结构、 线程表。这是用户级线程的一个实现。 </p></blockquote><p>对于内核而言， 线程的实现是在用户空间，所以<strong>操作系统内核并不知道线程的存在</strong>，也就是说，<font color="red">它的管理还是以进程为单位来管理，它没有感知线程的存在。</font> </p><p>从图中可以看到线程的数据结构是由 Run-time System 来管理的。 内核只看到了进程的数据结构， 因此线程的切换，从一个线程换到另外一个线程不需要操作系统内核的干预，也不需要进入内核来做这件事情， 所以速度比较快。 </p><blockquote><p>UNIX 内的操作系统通常采用这种方式来支持线程。</p></blockquote><h3 id="2-POSIX线程库——PTHREAD"><a href="#2-POSIX线程库——PTHREAD" class="headerlink" title="(2).POSIX线程库——PTHREAD"></a>(2).POSIX线程库——PTHREAD</h3><p>UNIX内的操作系统通常采用这种方式来支持线程。 它支持线程的时候是遵循 POSIX 规范。也就是 POSIX 规范当中确定了多线程的这种编程的接口。 </p><p>那以什么样的方式呈现给用户呢？它对线程库进行了相应的规范。 这个规范就是 PTHREAD 线程库。 这个线程库按照规范要提供若干个函数来支持线程、 创建线程、撤销线程，等待某个线程的结束。 </p><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/14.png" style="zoom:33%;"></p><blockquote><p>在这堆操作当中，重点介绍一下 yield 函数，<strong>这个函数表示这个线程自愿让出 CPU。</strong> </p><p>我们知道一个进程的若干线程实际上是相互配合来完成一项任务的。 所以这线程之间是可以协商由谁上 CPU，所以一个线程如果占 CPU 时间太长，那么别的线程得不到机会，就需要这个线程<code>高尚</code>一点，让出 CPU，它就调用 yield 让出 CPU。 如果它不让出 CPU，其实其它线程是没法上 CPU 的，<font color="red"><strong>因为对于线程而言，它感知不到时钟中断，因为整个时钟段是对进程而言的。</strong> </font></p></blockquote><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="(3).总结"></a>(3).总结</h3><p><strong>优点:</strong></p><ul><li>线程切换快</li><li>调度算法是应用程序特定的</li><li><p>用户级线程可运行在任何操作系统上(只需要实现线程库)</p><p><strong>缺点:</strong></p></li></ul><ul><li><p>内核只将处理器分配给进程，同一进程中的两 个线程不能同时运行于两个处理器上</p></li><li><p>大多数系统调用是阻塞的，因此，由于内核阻塞进程，故进程中所有线程也被阻塞</p><blockquote><p><strong>改变：</strong></p><ul><li>把系统调用，阻塞系统调用改成一个非阻塞的</li><li>用 Jacketing/ wrapper 的这种技术在系统调用之外封装一层。 在调用系统调用之前，先判断一下调用这个系统调用会不会导致线程阻塞，如果导致线程阻塞，那么就赶紧地换其它线程，这样的话，就不会因为某个线程调用了一个阻塞的系统调用使得整个进程被阻塞。</li></ul></blockquote></li></ul><h2 id="2-核心级线程"><a href="#2-核心级线程" class="headerlink" title="2.核心级线程"></a>2.核心级线程</h2><p>第二类实现线程机制的方法是核心级线程。这个方案就是彻底地改造了操作系统。 </p><ul><li><p>内核管理所有的线程。 通过 API 的接口向用户提供一些 API 的函数，由用户可以创建线程。 </p></li><li><p>所以内核既维护了进程的数据结构，也维护了进程里头的各个线程的数据结构。</p><blockquote><p>从下图中可以看到内核里头既管了线程表， 也管了进程表。 </p></blockquote></li></ul><p><img src="//zybtree.github.io/2020/08/10/进程-线程模型/15.png" style="zoom:35%;"></p><ul><li>线程的切换需要内核干预，因此要进入内核来完成切换的过程。 调度也是以线程为单位来进行的。 </li></ul><blockquote><p>实现核心级线程机制的典型的操作系统就是 Windows。 </p></blockquote><h2 id="3-混合模型"><a href="#3-混合模型" class="headerlink" title="3.混合模型"></a>3.混合模型</h2><p>混合模型就是<strong>线程的创建是在用户空间用线程库来完成的。</strong> 但是内核也要管理线程，也就是说<strong>调度是由内核来完成的。</strong> </p><blockquote><p>这个采用这种混合模型实现线程机制的是 Solaris 操作系统。 </p></blockquote><p><strong>用户空间的线程和内核的这个关系是什么？</strong></p><p>用户线程通过了一个多路复用来复用多个内核级线程，也就是核外的用户空间的线程通过一个机制和核内的一个内核线程对应起来。调度内核这个线程上 CPU 其实就是调度这个核外的这个线程上 CPU。这是 Solaris 的一种实现。 </p><hr><h1 id="九-总结"><a href="#九-总结" class="headerlink" title="九.总结"></a>九.总结</h1><h2 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h2><ul><li><p><strong>并发性：</strong>任何进程都可以与其他进程一起向前推进</p></li><li><p><strong>动态性：</strong>进程是正在执行程序的实例</p><ul><li>进程是动态产生，动态消亡的</li><li>进程在其生命周期内，在三种基本状态之间转换</li></ul></li><li><p><strong>独立性：</strong>进程是<font color="red">资源分配</font>的一个独立单位 </p><blockquote><p>例如:各进程的<font color="red">地址空间相互独立</font></p></blockquote></li><li><p><strong>交互性：</strong>指进程在执行过程中可能与其他进程产生直 接或间接的关系</p></li><li><p><strong>异步性：</strong>每个进程都以其相对独立的、不可预知的速 度向前推进</p></li><li><p><strong>进程映像：</strong>程序 + 数据 + 栈(用户栈、内核栈) + PCB</p></li></ul><h2 id="2-线程"><a href="#2-线程" class="headerlink" title="2.线程"></a>2.线程</h2><ul><li><p><strong>多线程应用场景</strong></p><blockquote><p>知道什么情况下去应用多线程</p></blockquote></li><li><p><strong>线程基本概念、属性</strong></p><blockquote><p>程作为一个进程中运行的一个实体，有哪些是属于它自己的信息？有哪些是共享同一个进程的其他的一些资源？</p></blockquote></li><li><p><strong>线程实现机制</strong></p><blockquote><p>操作系统中如何来实现线程？如何来支持线程？</p></blockquote></li></ul><p>看一个非常重要的概念：可再入程序(可重入程序）。 </p><p>所谓<strong>可再入程序指的是可以被多个进程同时调用的程序</strong>，因此对这个程序有限制。 也就是它必须<strong>具有的性质是它是纯代码的， 在执行过程中这个代码不会改变。</strong> 如果有改变，就需要调用它的进程提供不同的数据区。 这些改变可以放在数据区，因为代码部分是不再改变的。 实际上是大部分进程和线程都必须是可再入程序才能去运行。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://zybtree.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="进程" scheme="https://zybtree.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>研究生学习历程</title>
    <link href="https://zybtree.github.io/2020/08/05/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    <id>https://zybtree.github.io/2020/08/05/研究生学习历程/</id>
    <published>2020-08-05T11:30:18.000Z</published>
    <updated>2020-08-19T13:36:13.202Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2020年8月学习计划"><a href="#2020年8月学习计划" class="headerlink" title="2020年8月学习计划"></a>2020年8月学习计划</h1><h2 id="2020年8月5日"><a href="#2020年8月5日" class="headerlink" title="2020年8月5日"></a>2020年8月5日</h2><ul><li>[x]  Makefile实验楼结束(博客写好)【但是还是感觉深度不够，继续看陈皓的《跟我一起写Makefile》】</li><li>[x]  有关物理层认证的论文搜集好</li><li>[x]  《跟我一起写Makefile》20页完成</li><li>[x]  职业素质教育第二篇结束</li><li>[x]  操作系统第二章一半(操作系统运行环境与运行机制)并完成博客</li><li>[x]  跑步5公里</li></ul><p>学习和看书时尝试不再听歌，不再看手机，培养专注的习惯。</p><h2 id="2020年8月6日"><a href="#2020年8月6日" class="headerlink" title="2020年8月6日"></a>2020年8月6日</h2><ul><li>[x] 《跟我一起写Makefile》只剩一章，知识点比较偏，不打算看了。</li><li>[x] 英文综述看完一半。</li><li>[x] 职业素质教育第三篇结束</li></ul><p>Deadline是第一生产力，这周把实验楼的Makefile和《跟我一起写Makefile》学了一遍，还是觉得《跟我一起写Makefile》更好一点。希望明天能把Makefile的Debug成功实现吧。</p><h2 id="2020年8月7日"><a href="#2020年8月7日" class="headerlink" title="2020年8月7日"></a>2020年8月7日</h2><ul><li>[x] 复变函数公开课一讲</li><li>[ ] Eclipse 进行Makefile 的 Debug操作(没有成功，不知道是平台的原因还是代码的原因。。很可能是自己太菜了。。明天移植到VS或者VScode上试一下)</li><li>[x] 英文综述看完</li><li>[x] 职业素质教育第四篇结束</li><li>[ ] 操作系统第二章结束(没有结束。。打了两小时球。。)</li><li>[x] 跑步5km</li></ul><h2 id="2020年8月8日"><a href="#2020年8月8日" class="headerlink" title="2020年8月8日"></a>2020年8月8日</h2><ul><li>[x] 复变函数公开课</li><li>[x] 职业素质教育第五篇结束</li><li>[x] 论文三分之一</li></ul><p>去金鹰和朋友吃饭了。。晚上没看东西。。</p><h2 id="2020年8月9日"><a href="#2020年8月9日" class="headerlink" title="2020年8月9日"></a>2020年8月9日</h2><ul><li>[x] 复变函数公开课</li><li>[x] 无线通信公开课一讲</li><li>[x] 职业素质教育整理结束(终于没有其他的东西了)</li><li>[x] 论文三分之二</li><li>[x] 操作系统第二章结束</li></ul><p>晚上看半泽直树2，什么都不能阻止自己！</p><h2 id="2020年8月10日"><a href="#2020年8月10日" class="headerlink" title="2020年8月10日"></a>2020年8月10日</h2><ul><li>[x] VScode 进行 Debug Makefile项目成功</li><li>[x] 认证与机器学习的英文论文结束</li><li>[x] 操作系统进程部分结束，并写好博客</li><li>[x] 跑步5km</li></ul><h2 id="2020年8月11日"><a href="#2020年8月11日" class="headerlink" title="2020年8月11日"></a>2020年8月11日</h2><ul><li>[ ] 把物理层c项目分枝移植到VScode。(出问题，不知道如何在VScode上debug shell命令)</li><li>[x] 认证与机器学习论文梳理，准备好回报PPT的流程</li><li>[x] 操作系统线程部分结束，并写好了博客</li><li>[x] 跳绳3000个</li></ul><h2 id="2020年8月12日"><a href="#2020年8月12日" class="headerlink" title="2020年8月12日"></a>2020年8月12日</h2><ul><li>[ ] 和老师讨论完怎么迁移，但是服务器内存不够了，就很坑，还在找办法</li><li>[ ] 汇报PPT还剩3张</li><li>[x] 复变函数知识点迁移到《通信之道》这本书中</li><li>[x] 操作系统调度算法这章结束，博客写完</li><li>[x] 跳绳3k</li></ul><h2 id="2020年8月13日"><a href="#2020年8月13日" class="headerlink" title="2020年8月13日"></a>2020年8月13日</h2><ul><li>[ ] 项目运行出问题了，Make不成功，又不行。。</li><li>[x]  做论文汇报PPT，文稿，然后论文汇报，一天就结束了</li><li>[ ]  进程并发执行才开头。。</li><li>[x]  跑步6km</li></ul><p>写出论文好难啊。。</p><h2 id="2020年8月14日"><a href="#2020年8月14日" class="headerlink" title="2020年8月14日"></a>2020年8月14日</h2><p>忘记干了什么了。。</p><h2 id="2020年8月15日"><a href="#2020年8月15日" class="headerlink" title="2020年8月15日"></a>2020年8月15日</h2><ul><li>[x] 综述论文确定主题，框架搭完一半。</li><li>[x] 出去和同学吃了一顿饭，晚上打了一小时球。</li><li>[x] 回去跑步8公里。</li></ul><p>以最好的状态去写论文吧，尽人事，听天命，自己不后悔就行了，就当尝试第一次投论文，知道怎么去更好的阅读论文，归纳方法就行了。慢慢找好点子。只是恨疫情让自己白白浪费了半年的时光吧，导致自己拼尽全力来补偿这半年的空白。</p><h2 id="2020年8月16日"><a href="#2020年8月16日" class="headerlink" title="2020年8月16日"></a>2020年8月16日</h2><ul><li>[x] 论文框架结束</li><li>[x] 操作系统并发结束。</li></ul><p>我也不知道今天自己干了什么。。早些睡觉，迎接新一周的到来。</p><h2 id="2020年8月17日"><a href="#2020年8月17日" class="headerlink" title="2020年8月17日"></a>2020年8月17日</h2><ul><li>[x] 项目换了环境还是不行，得等老师回来一起讨论了</li><li>[x] 论文前面到引言部分写完</li><li>[x] 操作系统 同步机制 结束</li></ul><p>还是喜欢自己一个人捣腾东西。</p><h2 id="2020年8月18日"><a href="#2020年8月18日" class="headerlink" title="2020年8月18日"></a>2020年8月18日</h2><ul><li><p>[ ] </p></li><li><p>[x] 操作系统 存储模型一 结束</p></li><li>[x] 论文第二部分找好资料写好具体框架，不过真写起来是真的难憋</li><li>[x] 跑步6km</li></ul><h2 id="2020年8月19日"><a href="#2020年8月19日" class="headerlink" title="2020年8月19日"></a>2020年8月19日</h2><ul><li><p>[ ] </p></li><li><p>[x] 操作系统 存储模型二 完成一半</p></li><li>[x] 论文第二部分写完一半，英文论文就是讲的比中文的更加详细</li><li><p>[ ] </p></li><li><p>[x] 跳绳3500</p></li></ul><p>直接在实验室完成当天任务再回去，回去直接洗澡睡觉了。不然回了公寓也会忘记写这个总结。还不用带书包，更加方便快捷。</p><h2 id="2020年8月20日"><a href="#2020年8月20日" class="headerlink" title="2020年8月20日"></a>2020年8月20日</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="研究生学习" scheme="https://zybtree.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="规划" scheme="https://zybtree.github.io/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>操作系统运行环境与运行机制</title>
    <link href="https://zybtree.github.io/2020/07/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>https://zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/</id>
    <published>2020-07-21T07:50:23.000Z</published>
    <updated>2020-08-10T00:15:03.705Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-操作系统的主要工作"><a href="#一-操作系统的主要工作" class="headerlink" title="一.操作系统的主要工作"></a>一.操作系统的主要工作</h2><ul><li><p>程序的执行</p><blockquote><p>启动程序，执行程序以及程序的结束工作</p></blockquote></li><li><p><strong>完成体系结构相关的工作</strong>(操作系统与其他软件所不同的地方，与硬件打交道)</p></li><li><p><strong>完成应用程序所需的共性任务</strong>(读盘，申请内存，打印文件)</p><blockquote><p>提供各种基本服务</p></blockquote></li><li><p>性能，安全，健壮等问题</p></li></ul><p>用下图来明确操作系统的的地位：</p><p><img src="//zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/1.png" style="zoom:30%;"></p><blockquote><p>从图中我们可以看出操作系统是在硬件基础上的第一层扩展。 </p><p>它底下是硬件， 这个硬件都做了什么工作呢？ 怎么样去了解底下的硬件呢？<strong>这就是本讲的一个内容之一：操作系统运行环境。</strong> 和硬件相关的很多的工作实际上是和操作系统的各个功能相结合的，<strong>这里介绍最基本的 CPU 状态： 中断与异常机制。</strong> 其他的像虚拟页式存储管理的机制， 设备等等的，会在后面跟操作系统功能结合起来讲。 </p><p>操作系统完成应用程序当中的一些共性的工作， 向应用程序提供一些基本服务，这是本讲另外一方面的内容：操作系统运行机制,这里重点介绍系统调用机制。</p></blockquote><hr><h2 id="二-处理机的状态"><a href="#二-处理机的状态" class="headerlink" title="二.处理机的状态"></a>二.处理机的状态</h2><p>处理器由<strong>运算器</strong>、<strong>控制器</strong>、一系列的<strong>寄存器</strong>以及<strong>高速缓存</strong>构成。<br>寄存器主要分为两类：</p><ul><li><strong>用户可见寄存器</strong>：高级语言编译器通过优化算法分配并使用之，以减少程序访问内存次数。</li><li><strong>控制和状态寄存器</strong>：用于控制处理器的操作通常由操作系统代码使用。</li></ul><blockquote><p>对于用户可见寄存器，高级语言编译器通过优化算法分配这些寄存器，并且使用这些寄存器的主要的目的是为了减少访问内存的次数， 来提高程序的运行效率。 </p><p>操作系统设计者更加关注的是控制和状态寄存器。 而控制处理器的操作，那么通常只能由操作系统代码来使用。</p></blockquote><h3 id="1-控制和状态寄存器"><a href="#1-控制和状态寄存器" class="headerlink" title="1.控制和状态寄存器"></a>1.控制和状态寄存器</h3><p>控制和状态寄存器用于控制处理器的操作，只能在某种特权级别下可以访问、修改。</p><p>常见的控制和状态寄存器：</p><ul><li>程序计数器(PC:ProgramCounter)，记录将要取出的指令的地址。</li><li>指令寄存器(IR:InstructionRegister)，记录最近取出的指令。</li><li>程序状态字(PSW:Program Status Word)，记录 处理器的运行状态如条件码、模式、控制位等信息。</li></ul><h3 id="2-操作系统的需求——保护"><a href="#2-操作系统的需求——保护" class="headerlink" title="2.操作系统的需求——保护"></a>2.操作系统的需求——保护</h3><blockquote><p> 下面来探讨一下操作系统对硬件的需求，其中一个非常重要的需求就是保护。</p></blockquote><p>因为操作系统运行在一个多进程的这样一个环境下，为了支持这些进程的运行。 因此得从操作系统的特征来考虑：<strong>并发、 共享</strong>。 </p><p>操作系统为多个程序的执行提供了这样一个并发的环境，而多个进程之间又共享操作系统所管理的各种资源。 那么这样一个并发、 共享的计算环境就要求保护 。</p><p>其中保护是的：</p><ul><li>用户程序与用户程序之间互不干扰</li><li>用户程序不对操作系统干扰</li></ul><p>这就从操作系统的角度给硬件提出了实现保护、 实现保护控制这个需求。 </p><p>通常，希望硬件提供一个基本运行机制：<strong>CPU 具有一个特权级别，在不同的特权级下可以运行不同的指令集合。</strong> 这样把指令分成不同的集合，供操作系统和用户程序分别使用。 通过保护又使得操作系统与用户能够相隔离。 比如说当要访问操作系统空间的时候，那么用户程序是不能够访问的，但是操作系统可以访问用户程序空间， 因此通过一个保护机制达到操作系统与用户的隔离。 </p><p>有了这样一个需求之后，<strong>现代处理器通常把CPU 的状态设计为两种、 三种、 或者是四种。</strong> 但是这样在CPU 上时而运行操作系统、时而运行用户程序，CPU 如何知道是运行哪一种状态呢？ 这样就有赖于一些寄存器的某些位的设置：通常是在<font color="red">程序状态字寄存器 PSW</font>中专门设置一位或是两位，根据运行程序对资源和指令的权限不同，设置不同的 CPU 状态。 </p><p>这样不同的程序对资源和指令的使用要求是不同的。</p><p>以X86 处理器当中的典型的一个标志寄存器 EFLAGS，EFLAGS 寄存器为例：</p><p><img src="//zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/2.png" style="zoom:50%;"> </p><p>其中就有一位<code>IOPL</code> 是 IO 的权限级别。 这个级别用两位来表示四个状态。 除了这个寄存器以外，还有一些 描述符设置了权限级别。 这是硬件提供的各种不同的CPU状态 。</p><h3 id="3-特权指令和非特权指令"><a href="#3-特权指令和非特权指令" class="headerlink" title="3.特权指令和非特权指令"></a>3.特权指令和非特权指令</h3><p>操作系统需要两种 CPU状态：</p><ul><li><strong>内核态(Kernel Mode)</strong>：运行操作系统程序。</li><li><strong>用户态(User Mode)</strong>：运行用户程序。</li></ul><p>因为操作系统只需要两个状态，而这两个状态可以指向不同的指令集合。因此把指令的集合也划分成两类：</p><ul><li><strong>特权(privilege)指令</strong>：只能由操作系统使用、用 户程序不能使用的指令。</li><li><strong>非特权指令</strong>：用户程序可以使用的指令。</li></ul><blockquote><p>其实整个指令系统操作系统是都可以使用的，它既可以使用特权指令，也可以使用非特权指令。而用户只能使用这个指令系统当中的一个子集，那么这个子集就是非特权指令。</p></blockquote><h3 id="4-实例：X86系列处理器"><a href="#4-实例：X86系列处理器" class="headerlink" title="4.实例：X86系列处理器"></a>4.实例：X86系列处理器</h3><p>X86支持4个处理器特权级别。特权环：R0、R1、R2和R3。</p><ul><li>从R0到R3，特权能力由高到低。</li><li>R0相当于内核态；R3相当于用户态；R1和R2则介于两者之间。</li><li>不同级别能够运行的指令集合不同。</li></ul><h3 id="5-CPU状态之间的转换"><a href="#5-CPU状态之间的转换" class="headerlink" title="5.CPU状态之间的转换"></a>5.CPU状态之间的转换</h3><blockquote><p>有了不同的特权级别，那么就需要让<strong>用户程序</strong>和<strong>操作系统</strong>之间能有转换。</p></blockquote><p><strong>用户态——&gt; 内核态</strong>：<font color="red">中断/异常/陷入机制</font></p><p><strong>内核态 ——&gt; 用户态</strong>：设置程序状态字PSW</p><p>实际上<font color="red">用户程序在执行的过程中如果需要操作系统的服务，它就要从用户态能够陷入，进入内核态。而从用户态进入内核态的一个唯一的途径就是中断/异常/陷入机制 。</font>这也是下一个非常重要的主题。</p><p>而从内核态返回到用户态则比较简单啊，只是通过设置程序状态字寄存器就可以了。</p><blockquote><p>上面所提到的特殊的指令：陷入指令(访管指令)。它的作用是提供给用户程序的一个接口，用这个接口使用户程序可以向操作系统提出各种服务请求。</p><p>之所以叫访管指令， 是因为有的时候内核态也被称为一个supervisor mode管理态。 所以在这种情况下，从用户态进入了管理态，相当于访问管理态，所以叫访管指令。 </p><p>而这条特殊的指令在不同的计算机系统当中实际上是用不同的指令的。 比如 int 指令，trap 指令，syscall，sysenter/sysexit。 这些指令都是不同的计算机体系结构提供的这种特殊的指令，用于陷入(用于访管)。所以这是关于CPU状态之间的转换需要的不同的条件。</p></blockquote><hr><h2 id="三-中断与异常机制"><a href="#三-中断与异常机制" class="headerlink" title="三.中断与异常机制"></a>三.中断与异常机制</h2><blockquote><p>操作系统当中的中断和异常机制就好比是汽车中的发动机，或者是飞机引擎。靠它来驱动操作系统的运行。 有的时候是可以这么说，操作系统是由中断驱动/事件驱动的。有了这个机制，操作系统就可以做很多的事情。</p></blockquote><p><strong>主要作用：</strong></p><ul><li>及时处理设备发来的中断请求</li><li>可使OS捕获用户程序提出的服务请求  </li><li>防止用户程序执行过程中的破坏性活动 </li><li>……</li></ul><h3 id="1-中断与异常的概念"><a href="#1-中断与异常的概念" class="headerlink" title="1.中断与异常的概念"></a>1.中断与异常的概念</h3><p>所谓中断与异常，实际上是 CPU 对系统发生的某个事件的一种反应。当这个事件发生的时候，通过对这个事件的处理实际上是改变了一个控制流。我们通常说事件的发生改变了 CPU 的一个控制流。</p><p><strong>过程：</strong></p><ul><li>CPU暂停正在执行的程序，保留现场后自动转去执行相应事件的处理程序</li><li>处理完成后返回断点， 继续执行被打断的程序</li></ul><p><strong>特点：</strong></p><ul><li>是随机发生的</li><li>是自动处理的</li><li>是可恢复的</li></ul><h3 id="2-引入中断与异常的原因"><a href="#2-引入中断与异常的原因" class="headerlink" title="2.引入中断与异常的原因"></a>2.引入中断与异常的原因</h3><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p><strong>原因：中断的引入实际上是为了支持CPU与<font color="red">外部设备</font>的一个并行操作</strong></p><p>早期的计算机系统，如果没有中断机制的话 那么 CPU 要负责对设备的所有工作的管理。但是有了中断机制之后就可以这样来工作了。 </p><blockquote><p>比如：CPU 会去启动 输入输出设备的工作。 启动做完了之后设备本身就可以独立自己进行工作了 。而 CPU 这个时候呢可以转去处理一些和这次输入输出没有关系的事情。当设备完成了它的任务之后，它通过通过了中断向 CPU 报告这次输入输出的结果。让 CPU 来决策下面该做什么事情。 </p></blockquote><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p><strong>原因：表示CPU执行指令时<font color="red">本身</font>出现的问题</strong></p><blockquote><p>如算术溢出、除零、取数时的奇偶错，访存地址时越界或执行了“陷入指令” 等，这时硬件改变了CPU当前的执行流程，转到相应的错误处理程序或异常处理程序或执行系统调用。</p></blockquote><h3 id="3-事件"><a href="#3-事件" class="headerlink" title="3.事件"></a>3.事件</h3><p><img src="//zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/3.png" style="zoom:30%;"></p><blockquote><p>中断是外部事件在CPU 之外产生的事件打断了 CPU 。这些事件是正在运行的程序所不期望的。</p><p>异常是由正在执行的指令而引发的 。</p></blockquote><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><p><img src="//zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/4.png" style="zoom:50%;"></p><h2 id="四-中断与异常机制的工作原理"><a href="#四-中断与异常机制的工作原理" class="headerlink" title="四.中断与异常机制的工作原理"></a>四.中断与异常机制的工作原理</h2><p>中断/异常机制实际上是现代计算机系统中的核心机制之一。它的主要工作是硬件和软件相互配合来完成的通过软硬件的配合，来使计算机的能力得到充分地发挥。中断/异常机制的工作原理主要是从硬件与软件两个方面分析。</p><p><strong>硬件：</strong>捕获中断源发出的各种中断/异常的请求 ，以某一种方式来响应，通过把控制权转交给特定的处理程序来完成这个过程，而这个过程就是中断 。异常的响应，响应中断，响应异常这是硬件完成的工作。</p><p><strong>软件：</strong>识别中断， 异常类型完成对应的处理，<strong>实际上就是处理程序</strong>，把它称之为中断/异常处理程序。</p><h3 id="1-中断响应"><a href="#1-中断响应" class="headerlink" title="1.中断响应"></a>1.中断响应</h3><p>中断响应是发现中断、接收中断的过程，这部分由中断硬件部件完成。处理器控制部件中设有<strong>中断寄存器</strong>，其中保存了各种中断信号。</p><p><strong>CPU响应中断过程示意：</strong></p><p><img src="//zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/5.png" style="zoom:50%;"></p><blockquote><p>中断向量表是个非常重要的软硬件结合的这么一个数据结构。 每一行呢实际上是一个中断向量 。中断向量表是由若干中断向量组成。</p><p>每一个中断向量其实就是一个<strong>内存单元</strong>。它是存放了中断处理程序的这个入口地址，以及这个程序，在运行的时候所需要的一个处理机的状态字。</p></blockquote><p><strong>中断响应示意：</strong></p><p><img src="//zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/6.png" style="zoom:50%;"></p><h3 id="2-中断处理程序"><a href="#2-中断处理程序" class="headerlink" title="2.中断处理程序"></a>2.中断处理程序</h3><p>设计操作系统时，为每一类中断/异常事件编好相 应的处理程序，并设置好中断向量表。系统运行时若响应中断，中断硬件部件将CPU控 制权转给中断处理程序。</p><p><strong>中断处理程序主要做的工作：</strong></p><ul><li>保存相关寄存器信息(硬件部件会保存关键寄存器的信息。其他的一些寄存器的信息还要再做进一步地保存)</li><li>分析中断/异常的具体原因</li><li>执行对应的处理功能</li><li>恢复现场，返回被事件打断的程序</li></ul><h3 id="3-中断异常机制小节"><a href="#3-中断异常机制小节" class="headerlink" title="3.中断异常机制小节"></a>3.中断异常机制小节</h3><p>以设备输入输出中断为例:</p><ul><li>打印机给CPU发中断信号 </li><li>CPU处理完当前指令后检测到中断，判断出中断来源并向相关设备发确认信号</li><li>CPU开始为软件处理中断做准备：<ul><li>处理器状态被切换到内核态</li><li>在系统栈中保存被中断程序的重要上下文环境，主要是程序计数器PC、程 序状态字PSW</li></ul></li><li>CPU根据中断码查中断向量表，获得与该中断相关的处理程序的入口地址，并将PC设置成该地址，新的指令周期开始时，CPU控制转移到中断处理程序</li><li>中断处理程序开始工作：<font color="red">(软件工作)</font><ul><li>在系统栈中保存现场信息</li><li>检查I/O设备的状态信息，操纵I/O设备或者在设备和内存之间传送数据等等</li></ul></li><li>中断处理结束时，CPU检测到中断返回指令，从系统 栈中恢复被中断程序的上下文环境 ，CPU状态恢复成 原来的状态，PSW和PC恢复成中断前的值，CPU开始一个新的指令周期。</li></ul><h2 id="五-系统调用机制"><a href="#五-系统调用机制" class="headerlink" title="五.系统调用机制"></a>五.系统调用机制</h2><h3 id="1-系统调用"><a href="#1-系统调用" class="headerlink" title="1.系统调用"></a>1.系统调用</h3><h4 id="什么是系统调用"><a href="#什么是系统调用" class="headerlink" title="什么是系统调用"></a>什么是系统调用</h4><p>系统调用是用户在编程时可以调用的操作系统功能。系统调用全称应该是操作系统功能调用，简称系统调用 。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>系统调用是操作系统给编程人员提供的唯一接口。 通过系统调用使得 CPU 的状态从用户态陷入了内核态。</p><h3 id="2-系统调用，库函数，API，内核函数之间的关系"><a href="#2-系统调用，库函数，API，内核函数之间的关系" class="headerlink" title="2.系统调用，库函数，API，内核函数之间的关系"></a>2.系统调用，库函数，API，内核函数之间的关系</h3><p><img src="//zybtree.github.io/2020/07/21/操作系统运行环境与运行机制/7.png" style="zoom:40%;"></p><blockquote><ul><li>应用程序可以直接调系统调用。但是通常情况下，应用程序都是通过了 C 函数库或者是 API 的接口来间接地调用系统调用。</li><li>在操作系统内核当中，提供了很多的内核函数。这些内核函数经过了封装把它提供到了 C 函数库，或者是 API 接口 。所以系统调用对于内核而言，内核函数就是这个系统调用的处理程序，而这些处理程序通过封装在 C 函数库或者 API 接口呢提供给用户来使用。</li><li>但是 C 函数库里头或者是 API 接口里头还有一些函数不是系统调用，它们就是一些普通的函数在完成一些功能。</li><li>有一些函数通过系统调用对应到了多个内核函数，也可能是某一个函数通过系统调用对应内核的一个函数。都是不太一样的。 </li><li>内核函数当中 也有一些函数呢是不开放给用户使用的 </li></ul></blockquote><p>应用程序大部分情况下是通过调用函数。 函数执行过程中再去变成系统调用来进入内核来完成。</p><h3 id="3-系统调用机制的设计"><a href="#3-系统调用机制的设计" class="headerlink" title="3.系统调用机制的设计"></a>3.系统调用机制的设计</h3><ol><li><p>首先利用硬件给我们提供的支持(就是中断异常机制)。通过这个机制实现系统调用服务。 </p></li><li><p>然后选择一条特殊的指令即<strong>陷入指令，也称之为访管指令</strong> 通过这条指令的执行引发一个异常完成从用户态到内核态的切换工作。看到只有一条指令。也就是说所有的系统调用，都是通过这条指令来进入内核的。</p><blockquote><p>在中断向量表或中断描述符表当中有一行专门用于系统调用。</p></blockquote></li><li><p>然后操作系统呢要为每一个系统调用事先确定一个编号(系统调用号)，因为要确定是哪一个系统调用。所以要通过编号来区分。而且每个系统调用其实还有不同的参数 ，所以呢我们还要设计相应的参数。这些工作除了操作系统的设计之外，还需要编译器来帮忙，编译器会把这个封装的系统调用把它展开 ，在过程中生成这条特殊的陷入指令，以及这些参数的推送寄存器的这些指令。</p></li><li><p>每一个系统调用其实都有一段内核函数，或者是一段代码来对应。 找到对应的内核函数就需要设计一张系统调用表，这张表就把系统调用的各项服务的入口地址填在这张表里头，那这张表也是在这个初始化的时候设置好了。</p></li></ol><h3 id="4-参数传递过程问题"><a href="#4-参数传递过程问题" class="headerlink" title="4.参数传递过程问题"></a>4.参数传递过程问题</h3><p>实现用户程序的参数传递给内核常用以下3种实现方法:</p><ul><li><font color="red">由陷入指令自带参数</font> : 陷入指令的长度有限，且 还要携带系统调用功能号，只能自带有限的参数</li><li><font color="red">通过通用寄存器传递参数</font> : 这些寄存器是操作系 统和用户程序都能访问的，但寄存器的个数会限制传递参数的数量</li><li><font color="red">在内存中开辟专用堆栈区</font>来传递参数</li></ul><h3 id="5-系统调用的执行过程"><a href="#5-系统调用的执行过程" class="headerlink" title="5.系统调用的执行过程"></a>5.系统调用的执行过程</h3><p>当CPU执行到特殊的陷入指令时:</p><ul><li><font color="red">中断/异常机制 </font>:硬件保护现场;通过查中断向量表把控制权转给系统调用总入口程序</li><li><font color="red">系统调用总入口程序 </font>:保存现场;将参数保存在内核堆 栈里;通过查系统调用表把控制权转给相应的系统调用 处理例程或内核函数</li><li><font color="red">执行系统调用例程</font></li><li><font color="red">恢复现场，返回用户程序</font></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://zybtree.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统运行机制" scheme="https://zybtree.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>操作系统概述</title>
    <link href="https://zybtree.github.io/2020/07/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <id>https://zybtree.github.io/2020/07/15/操作系统概述/</id>
    <published>2020-07-15T09:04:15.000Z</published>
    <updated>2020-07-21T06:49:46.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h1><p><strong>Question:</strong></p><ul><li>操作系统做了什么？</li><li>操作系统的定义与作用</li><li>操作系统的主要特征</li><li>操作系统的架构</li><li>操作系统的分类</li></ul><h2 id="一-操作系统做了什么"><a href="#一-操作系统做了什么" class="headerlink" title="一.操作系统做了什么"></a>一.操作系统做了什么</h2><p>通过下面程序的执行过程来分析操作系统对此程序的执行有哪些支持。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"hello world"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>用户告诉操作系统执行 <code>helloworld</code>程序.</li><li>操作系统: 找到 <code>helloworld</code> 程序的相关信息，检查其类型是否是可执行文件; 并通过程序首部信息, 确定代码和数据在可执行文件中的位置并计算出对 应的磁盘块地址.</li><li><p>操作系统: 创建一个<strong>新的进程</strong>，并将 <code>helloworld</code> 可 执行文件映射到该进程结构，表示由该进程执行 <code>helloworld</code> 程序.</p></li><li><p>操作系统:为 <code>helloworld</code> 程序设置<strong>CPU上下文环境</strong>, 并跳到程序开始处,准备执行程序 (假设调度程序选中hello程序)</p></li><li>执行helloworld程序的第一条指令，<strong>发生缺页异常</strong>（代码和数据还没有读入内存，硬件机制会捕获缺页异常，把控制权交给操作系统）</li><li>操作系统: 分配一页<strong>物理内存</strong>，并将代码从磁盘读入内存，然后继续执行 <code>helloworld</code> 程序.</li><li><code>helloworld</code> 程序执行 <code>puts</code> 函数[<strong>系统调用</strong>(<strong>操作系统完成这个功能</strong>)]，在显示器上写一字符串.</li><li>操作系统: 找到要将字符串送往的显示设备，通常设备是由一个<strong>进程控制</strong>的，所以，操作系统将要写的字符串送给该进程.</li><li>操作系统: 控制设备的进程告诉设备的窗口系统 它要显示字符串，窗口系统确定这是一个合法的操作，然后将字符串转换成像素，将像素写入设备的<strong>存储映像区</strong>.</li><li>视频硬件将像素转换成显示器可接收的一组 <strong>控制/数据信号</strong>.</li><li>显示器解释信号，激发液晶屏.</li><li>OK!!!我们在屏幕上看到了 “hello world” .</li></ul><p><strong>从用户程序在执行过程中，不断请求操作系统服务的角度来看程序执行的过程：</strong></p><p><img src="//zybtree.github.io/2020/07/15/操作系统概述/1.png" style="zoom:25%;"></p><p>在CPU上执行一个用户程序，这个用户程序会不时地去请求操作系统的服务，因此在CPU上，时而运行的是用户程序。时而运行操作系统程序。</p><blockquote><p>以helloworld程序为例：</p><p>在执行的时候，需要操作系统来创建进程，因此转到操作系统创建进程</p><p>进程创建完了以后会从操作系统返回 ，接着执行这个helloworld程序，在出现了缺页异常以后，控制权又转回了操作系统</p><p>操作系统分配物理内存给这个用户程序 ，然后又转向用户程序接着执行，然后helloworld程序又要去执行puts函数</p><p>此时又转向了操作系统去进行系统调用。 </p></blockquote><p><strong>换一个角度看用户程序的执行：</strong></p><p><img src="//zybtree.github.io/2020/07/15/操作系统概述/2.png" style="zoom:25%;"></p><blockquote><p> 实际上，是操作系统在执行过程中呢，如果选中了一个程序，那么就去<strong>通过调度</strong>选中这个程序，去执行这个程序</p><p>程序执行过程中，会不断地去陷入操作系统,  由操作系统完成一些服务.然后再通过调度再选中程序，接着执行.</p></blockquote><p>从上面的介绍过程，看到在一个程序的执行过程中，<strong>操作系统负责了这个程序的启动过程, 负责了这个程序执行的过程, 同时在执行的 过程中，不断地去为用户程序的执行 提供各种各样的支持.</strong></p><hr><h2 id="二-操作系统的定义与作用"><a href="#二-操作系统的定义与作用" class="headerlink" title="二.操作系统的定义与作用"></a>二.操作系统的定义与作用</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>操作系统是计算机系统中的一个系统软件，是一 些程序模块的集合，这些模块相互协作，相互配合，来完成以下这些功能：</p><ul><li><p>它们能以尽量<font color="red">有效、合理</font>的方式组织和管理计算机的软硬件资源。</p></li><li><p>合理地组织计算机的工作流程，控制程序的执行并向用户提供各种服务功能。</p></li><li><p>使得用户能够灵活、<font color="red">方便</font>地使用计算机，使整个计算机系统高效率运行。</p></li></ul><blockquote><p><strong>有效</strong>：让系统效率，资源利用率得以提高。</p><p><strong>合理</strong>：各种软硬件资源的管理是否公平合理。</p><p><strong>方便使用</strong>：两种角度:<strong>用户界面</strong>与<strong>编程接口</strong>。</p></blockquote><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2 作用"></a>2 作用</h3><ul><li><p>资源的管理者：<font color="red">有效</font></p></li><li><p>向用户提供的各种服务：<font color="red">方便使用</font></p></li><li><p>对硬件机器的扩展：<font color="red">扩展能力</font></p></li></ul><h4 id="1-对于OS是资源的管理者"><a href="#1-对于OS是资源的管理者" class="headerlink" title="(1)对于OS是资源的管理者"></a>(1)对于OS是资源的管理者</h4><p>自底向上看，OS是资源的管理者。</p><p><strong>硬件资源：</strong>CPU，内存，设备(I/O设备、磁盘、时钟、网 络卡等)。</p><p><strong>软件资源：</strong>磁盘上的文件、各类管理信息等。</p><h4 id="2-怎么管理资源"><a href="#2-怎么管理资源" class="headerlink" title="(2)怎么管理资源"></a>(2)怎么管理资源</h4><ul><li><p>跟踪记录资源的使用状况(通过数据结构与算法)</p><blockquote><p>如:哪些资源空闲，分配给谁使用，允许使用多长时间等</p></blockquote></li><li><p>确定<font color="blue">资源分配策略——算法</font></p><ul><li>静态分配策略(会导致资源的浪费)</li><li>动态分配策略(根据数据结构与资源使用情况来分配，资源的利用率得到了显著的提高)</li></ul></li><li>实施资源的分配(根据资源分配策略去决定)和回收</li><li>提高资源利用率</li><li>保护资源的使用(一个进程使用资源时，不能被另外的所干扰)</li><li>协调多个进程对资源请求的冲突</li></ul><h4 id="3-从资源管理的角度—五大基本功能"><a href="#3-从资源管理的角度—五大基本功能" class="headerlink" title="(3)从资源管理的角度—五大基本功能"></a>(3)从资源管理的角度—五大基本功能</h4><ul><li><p>进程/线程管理(CPU管理)</p><blockquote><p>进程线程状态、控制、同步互斥、通信、调度、……</p></blockquote></li><li><p>存储管理</p><blockquote><p>分配/回收、地址转换、存储保护、内存扩充、……</p></blockquote></li><li><p>文件管理</p><blockquote><p>文件目录、文件操作、磁盘空间、文件存取控制、……</p></blockquote></li><li><p>设备管理</p><blockquote><p>设备驱动、分配回收、缓冲技术、……</p></blockquote></li><li><p>用户接口</p><blockquote><p>系统命令、编程接口</p></blockquote></li></ul><h4 id="4-操作系统是各种服务的提供者"><a href="#4-操作系统是各种服务的提供者" class="headerlink" title="(4)操作系统是各种服务的提供者"></a>(4)操作系统是各种服务的提供者</h4><ul><li><p><strong>在操作系统之上，从用户角度来看:</strong></p><blockquote><p>操作系统为用户提供了一组功能强大、方便易用的<font color="red">命令</font>或<font color="red">系统调用</font></p></blockquote></li><li><p><strong>典型的服务：</strong></p><blockquote><p>进程的创建、执行;文件和目录的操作;I/O设备 的使用;各类统计信息; ……</p></blockquote></li></ul><h4 id="5-操作系统是硬件之上的第一层软件"><a href="#5-操作系统是硬件之上的第一层软件" class="headerlink" title="(5).操作系统是硬件之上的第一层软件"></a>(5).操作系统是硬件之上的第一层软件</h4><p><img src="/Users/zhangyongbin/Blog/zybTree/source/_posts/操作系统概述/3.png" style="zoom:30%;"></p><h4 id="6-操作系统在硬件机器的扩展"><a href="#6-操作系统在硬件机器的扩展" class="headerlink" title="(6).操作系统在硬件机器的扩展"></a>(6).操作系统在硬件机器的扩展</h4><p>操作系统在应用程序与硬件之间建立了一个等价的扩展机器(虚拟机)，对硬件抽象，提高可移植性;比底层硬件更容易 编程。</p><p><img src="//zybtree.github.io/2020/07/15/操作系统概述/4.png" style="zoom:30%;"></p><hr><h2 id="三-操作系统的特征"><a href="#三-操作系统的特征" class="headerlink" title="三.操作系统的特征"></a>三.操作系统的特征</h2><p><img src="//zybtree.github.io/2020/07/15/操作系统概述/5.png" style="zoom:25%;"></p><h3 id="1-并发"><a href="#1-并发" class="headerlink" title="1.并发"></a>1.并发</h3><p><strong>并发(concurrency):</strong> 指处理多个同时性活动的能力。</p><blockquote><p>由于并发将会引发很多的问题:  活动切换、保护、相互依赖的活动间的同步.</p></blockquote><p>在计算机系统中同时存在多个程序运行，单CPU上 </p><p>​    <strong>宏观上：</strong>这些程序同时在执行。</p><p>​    <strong>微观上：</strong>任何时刻只有一个程序真正在执行，即这些程序在CPU上是轮流执行的。</p><p><strong>并行(parallel)：</strong>与并发相似，但多指不同程序同时在多 个硬件部件上执行</p><blockquote><p><strong>有趣的例子记忆：</strong></p><p>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。<br>你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。<br>你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。</p></blockquote><h3 id="2-共享"><a href="#2-共享" class="headerlink" title="2.共享"></a>2.共享</h3><p><strong>共享：</strong>操作系统与多个用户的程序共同使用计算机系统中的资源(共享有限的系统资源)。</p><p>操作系统要对系统资源进行合理分配和使用，使得这些资源在一个时间段内交替被多个进程所用。</p><p>共享分为：</p><ul><li><p><strong>互斥共享</strong>(如打印机)</p></li><li><p><strong>同时共享</strong>(如可重入代码、磁盘文件)</p></li></ul><p>正是这些功能，所以又有了复杂的问题:  <strong>资源分配难以达到最优化，如何保护资源？</strong></p><h3 id="3-虚拟"><a href="#3-虚拟" class="headerlink" title="3.虚拟"></a>3.虚拟</h3><p><strong>虚拟(Virtual) : </strong>一个物理实体映射为若干个对应的逻辑实体——<strong>分时</strong>或<strong>分空间</strong>。虚拟是操作系统管理系统资源的重要手段，可提高资源利用率。</p><blockquote><p><strong>典型的例子：</strong></p><ul><li>CPU——每个进程的”虚处理机”</li><li>存储器——每个进程都有独立的虚拟地址空间(代码+数据+堆栈)</li><li>显示设备——多窗口或虚拟终端</li></ul></blockquote><h3 id="4-随机"><a href="#4-随机" class="headerlink" title="4.随机"></a>4.随机</h3><p>随机：操作系统必须随时对<font color="blue">以不可预测的次序</font>发生的事件进行响应并处理。</p><blockquote><p><strong>因为随机性带来的例子：</strong></p><p>进程的运行速度不可预知：多个进程并发执行，“走走停停”，无法预知每个进程的运行推进的快慢。</p></blockquote><p><strong>带来的问题：</strong>难以重现系统在某个时刻的状态(包括重现运行中的错误)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://zybtree.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统概述" scheme="https://zybtree.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅷ排序</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A7-%E6%8E%92%E5%BA%8F/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅷ-排序/</id>
    <published>2020-04-12T03:54:09.000Z</published>
    <updated>2020-04-12T04:08:32.712Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="排序" scheme="https://zybtree.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅶ查找</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A6%E6%9F%A5%E6%89%BE/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅶ查找/</id>
    <published>2020-04-12T03:53:45.000Z</published>
    <updated>2020-04-12T04:08:16.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="查找" scheme="https://zybtree.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅵ图</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A5%E5%9B%BE/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅵ图/</id>
    <published>2020-04-12T03:53:24.000Z</published>
    <updated>2020-04-12T04:07:58.443Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="图" scheme="https://zybtree.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅴ树</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A4%E6%A0%91/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅴ树/</id>
    <published>2020-04-12T03:53:15.000Z</published>
    <updated>2020-04-12T04:07:47.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="树" scheme="https://zybtree.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅳ串</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A3%E4%B8%B2/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅳ串/</id>
    <published>2020-04-12T03:52:59.000Z</published>
    <updated>2020-04-12T04:07:33.576Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="串" scheme="https://zybtree.github.io/tags/%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅲ栈和队列</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅲ栈和队列/</id>
    <published>2020-04-12T03:52:40.000Z</published>
    <updated>2020-04-12T04:07:25.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="栈和队列" scheme="https://zybtree.github.io/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅱ线性表</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A1%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/</id>
    <published>2020-04-12T03:52:15.000Z</published>
    <updated>2020-08-03T09:21:44.825Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-线性表"><a href="#一-线性表" class="headerlink" title="一.线性表"></a>一.线性表</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p><strong>线性表（List）：</strong>零个或有限个数据类型相同的数据元素的有限序列。</p><blockquote><p><strong>性质：</strong></p><ul><li>线性表中的数据元素之间是有顺序的。</li><li>线性表中的数据元素个数是有限的。</li><li>线性表中的数据元素的类型必须相同。</li></ul></blockquote><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/1.png" style="zoom:50%;"></p><p>&lt;/br&gt;</p><h2 id="2-线性表的抽象数据类型"><a href="#2-线性表的抽象数据类型" class="headerlink" title="2.线性表的抽象数据类型"></a>2.线性表的抽象数据类型</h2><p><strong>线性表的抽象数据类型定义如下：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ADT 线性表(List)</span><br><span class="line">Data</span><br><span class="line">    线性表的数据对象集合为&#123;a1, a2, ......, an&#125;，每个元素的类型均为DataType。</span><br><span class="line">    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，</span><br><span class="line">    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。</span><br><span class="line">    数据元素之间的关系是一对一的关系。</span><br><span class="line">Operation</span><br><span class="line"><span class="comment">/*该方法用于创建并且返回一个空的线性表*/</span></span><br><span class="line"><span class="function">List* <span class="title">List_Create</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*该方法用于销毁一个线性表list*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List_Destroy</span><span class="params">(List* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*该方法用于将一个线性表list中的所有元素清空,使得线性表回到创建时的初始状态*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List_Clear</span><span class="params">(List* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*该方法用于返回一个线性表list中的所有元素个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">List_Length</span><span class="params">(List* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*该方法用于向一个线性表list的pos位置处插入新元素node,返回值为1表示插入成功，0表示插入失败*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">List_Insert</span><span class="params">(List* <span class="built_in">list</span>, ListNode* node, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*该方法用于获取一个线性表list的pos位置处的元素,返回值为pos位置处的元素，NULL表示获取失败*/</span></span><br><span class="line"><span class="function">ListNode* <span class="title">List_Get</span><span class="params">(List* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*该方法用于删除一个线性表list的pos位置处的元素,返回值为被删除的元素，NULL表示删除失败*/</span></span><br><span class="line"><span class="function">ListNode* <span class="title">List_Delete</span><span class="params">(List* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span>;</span><br></pre></td></tr></table></figure></div><hr><p>&lt;/br&gt;</p><h2 id="3-线性表的顺序存储结构"><a href="#3-线性表的顺序存储结构" class="headerlink" title="3.线性表的顺序存储结构"></a>3.线性表的顺序存储结构</h2><h3 id="1-结构分析"><a href="#1-结构分析" class="headerlink" title="(1).结构分析"></a>(1).结构分析</h3><p><strong>线性表的顺序存储结构</strong>，指的是用一段地址连续的存储单元依次存储线性表的数据元素。线性表（a1,a2,……,an）的顺序存储示意图如下：</p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/2.png" style="zoom:45%;">. </p><p><strong>在C中用一维数组来实现顺序存储结构：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储空间的起始位置:数组node</span></span><br><span class="line"><span class="comment">线性表的最大容量:数组长度MAXSIZE</span></span><br><span class="line"><span class="comment">线性表的当前长度:length</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储空间初始分配量 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20             </span></span><br><span class="line"><span class="comment">/* ElemType类型根据实际情况而定，这里假设为int */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;          </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* 数组存储数据元素，最大值为MAXSIZE */</span></span><br><span class="line">    ElemType data[MAXSIZE];    </span><br><span class="line">    <span class="comment">/* 线性表当前长度 */</span></span><br><span class="line">    <span class="keyword">int</span> length;                </span><br><span class="line">&#125; SeqList;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h3 id="2-重点操作"><a href="#2-重点操作" class="headerlink" title="(2).重点操作"></a>(2).重点操作</h3><h4 id="创建线性表"><a href="#创建线性表" class="headerlink" title="创建线性表"></a>创建线性表</h4><p><strong>操作步骤：</strong></p><ul><li>创建</li><li>分配内存</li><li>检验分配情况并把新建完的链表的指针指向结构体地址后的node处</li><li>返回表的地址</li></ul><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/6.png" style="zoom:50%;"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建</span></span><br><span class="line">TSeqList* ret = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(capacity &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//2.分配内存（结构体+数据表）</span></span><br><span class="line">    ret = (TSeqList*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSeqList) + <span class="keyword">sizeof</span>(TSeqListNode) * capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.检验分配是否成功</span></span><br><span class="line"><span class="keyword">if</span>(ret != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ret-&gt;capacity = capacity;</span><br><span class="line">    ret-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//新建完的链表的指针指向结构图后的node处</span></span><br><span class="line">    ret-&gt;node = (TSeqListNode*)(ret + <span class="keyword">sizeof</span>(TSeqList));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回新建成功的链表</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断位置是否合法</li><li>直接通过数组下标的方式获取元素</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.判断线性表是否合法</span></span><br><span class="line"><span class="comment">//2.判断位置是否合法</span></span><br><span class="line"><span class="keyword">if</span>( (List != <span class="literal">NULL</span>) &amp;&amp; (<span class="number">0</span> &lt;= pos) &amp;&amp; (pos &lt; List-&gt;length) )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//3.获取元素</span></span><br><span class="line">   ret = List-&gt;node[pos];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h4 id="插入元素操作"><a href="#插入元素操作" class="headerlink" title="插入元素操作"></a>插入元素操作</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断插入位置是否合法</li><li>把最后一个元素到插入位置的元素后移一个位置</li><li>将新元素插入</li><li>线性表长度加1</li></ul><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/3.png" style="zoom:50%;"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.判断线性表是否合法</span></span><br><span class="line"><span class="keyword">int</span> ret = (List != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判断插入位置是否合法</span></span><br><span class="line">ret = ret &amp;&amp; (List-&gt;length + <span class="number">1</span> &lt;= List-&gt;capacity);</span><br><span class="line">ret = ret &amp;&amp; (<span class="number">0</span> &lt;= pos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( ret )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( pos &gt;= List-&gt;length )</span><br><span class="line">&#123;</span><br><span class="line">pos = List-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.把最后一个元素到插入位置的元素后移一个位置</span></span><br><span class="line"><span class="keyword">for</span>(i=List-&gt;length; i&gt;pos; i--)</span><br><span class="line">&#123;</span><br><span class="line">List-&gt;node[i] = List-&gt;node[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.将新元素插入</span></span><br><span class="line">List-&gt;node[i] = (<span class="keyword">int</span>)node;</span><br><span class="line"><span class="comment">//5.线性表长度加1</span></span><br><span class="line">List-&gt;length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h4 id="删除元素操作"><a href="#删除元素操作" class="headerlink" title="删除元素操作"></a>删除元素操作</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断删除位置是否合法</li><li>将元素取出</li><li>将删除位置后的元素分别向前移动一个位置</li><li>线性表长度减1</li></ul><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/4.png" style="zoom:50%;"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ret = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.判断线性表是否合法</span></span><br><span class="line"><span class="comment">//2.判断删除位置是否合法</span></span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">list</span> != <span class="literal">NULL</span>) &amp;&amp; (<span class="number">0</span> &lt;= pos) &amp;&amp; (pos&lt;= <span class="built_in">list</span>-&gt;length))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//3.将元素取出</span></span><br><span class="line">ret = <span class="built_in">list</span>-&gt;node[pos];</span><br><span class="line">      </span><br><span class="line"><span class="comment">//4.将删除位置后的元素分别向前移动一个位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = pos+<span class="number">1</span>; i &lt; <span class="built_in">list</span>-&gt;length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">list</span>-&gt;node[i<span class="number">-1</span>] = <span class="built_in">list</span>-&gt;node[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//5.线性表长度减1</span></span><br><span class="line"><span class="built_in">list</span>-&gt;length--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h3 id="3-代码具体实现"><a href="#3-代码具体实现" class="headerlink" title="(3).代码具体实现"></a>(3).代码具体实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZYB on 2020/6/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_SEQLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_SEQLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用void做封装，使用void之后在main函数中不会产生误操作</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> SeqList;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> SeqListNode;</span><br><span class="line"></span><br><span class="line"><span class="function">SeqList* <span class="title">SeqList_Create</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqList_Destroy</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqList_Clear</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqList_Length</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqList_Capacity</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqList_Insert</span><span class="params">(SeqList* <span class="built_in">list</span>, SeqListNode* node, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SeqListNode* <span class="title">SeqList_Get</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SeqListNode* <span class="title">SeqList_Delete</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//LIST_SEQLIST_H</span></span></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZYB on 2020/6/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SeqList1.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span> TSeqListNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    TSeqListNode * node;</span><br><span class="line">&#125;TSeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的线性表</span></span><br><span class="line"><span class="function">SeqList* <span class="title">SeqList_Create</span><span class="params">(<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建</span></span><br><span class="line">    TSeqList* ret = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(capacity &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2.分配内存</span></span><br><span class="line">        ret = (TSeqList*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TSeqList) + <span class="keyword">sizeof</span>(TSeqListNode) * capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.检验分配是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret-&gt;capacity = capacity;</span><br><span class="line">        ret-&gt;length = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//新建完的链表的指针指向第一个节点的结尾处</span></span><br><span class="line">        ret-&gt;node = (TSeqListNode*)(ret + <span class="keyword">sizeof</span>(TSeqList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回新建成功的链表</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁线性表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqList_Destroy</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空线性表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqList_Clear</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.强制转换类型，把void类型转换成需要的类型</span></span><br><span class="line">    TSeqList* slist = (TSeqList*)<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.在转换后线性表不为空的情况下，把长度设置为0</span></span><br><span class="line">    <span class="keyword">if</span>(slist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        slist-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取线性表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqList_Length</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.强制转换类型，把void类型转换成需要的类型</span></span><br><span class="line">    TSeqList* slist = (TSeqList*)<span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.在线性表不为空的情况下，获取表的长度</span></span><br><span class="line">    <span class="keyword">if</span>(slist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = slist-&gt;length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线性表的长度</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取线性表的容量大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqList_Capacity</span><span class="params">(SeqList* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.强制转换类型，把void类型转换成需要的类型</span></span><br><span class="line">    TSeqList* slist = (TSeqList*)<span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.在线性表不为空的情况下，获取表的容量大小</span></span><br><span class="line">    <span class="keyword">if</span>(slist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = slist-&gt;capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.返回线性表的容量大小</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向线性表的指定位置插入值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqList_Insert</span><span class="params">(SeqList* <span class="built_in">list</span>, SeqListNode* node, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.强制转换类型，把void类型转换成需要的类型</span></span><br><span class="line">    TSeqList* slist = (TSeqList*)<span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">//2.检查列表不为空</span></span><br><span class="line">    <span class="keyword">int</span> ret = (slist != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.检查线性表长度不大于容量。并且需要插入的值合理</span></span><br><span class="line">    ret = ret&amp;&amp;(slist-&gt;length+<span class="number">1</span> &lt;= slist-&gt;capacity);</span><br><span class="line">    ret = ret&amp;&amp;(<span class="number">0</span> &lt;= pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.在上述条件都合理的情况下进行操作</span></span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果需要插入的位置大于等于线性表的长度，则把修改位置为线性表的最后</span></span><br><span class="line">        <span class="keyword">if</span>( pos &gt;= slist-&gt;length)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = slist-&gt;length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把需要插入位置后的节点都往后移一个单位</span></span><br><span class="line">        <span class="keyword">for</span> (i = slist-&gt;length; i &gt; pos ; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            slist-&gt;node[i] = slist-&gt;node[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把节点插入需要的位置</span></span><br><span class="line">        slist-&gt;node[pos] = *((TSeqListNode*)node);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线性表的长度加1</span></span><br><span class="line">        slist-&gt;length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回操作结果(成功为1，失败为0)</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在线性表中删除指定的值</span></span><br><span class="line"><span class="function">SeqListNode* <span class="title">SeqList_Delete</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.强制转换类型，把void类型转换成需要的类型</span></span><br><span class="line">    TSeqList* slist = (TSeqList*)<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.去除删除元素</span></span><br><span class="line">    SeqListNode* ret = SeqList_Get(slist,pos);</span><br><span class="line">    <span class="comment">//因为上面是指针变量，所以删除后，ret指向的指针会改变，对于的值自然也会变，所以要及时转换成数值类型的变量</span></span><br><span class="line">    TSeqListNode date = *(TSeqListNode*)ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("在为SeqList_Delete函数中:%d\n",*(int*)ret);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.判断删除位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span>((slist != <span class="literal">NULL</span>) &amp;&amp; (<span class="number">0</span> &lt;= pos) &amp;&amp; (pos &lt; slist-&gt;length))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.把删除后的元素全部向前移动一个单元</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos + <span class="number">1</span>; i &lt; slist-&gt;length ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            slist-&gt;node[i<span class="number">-1</span>] = slist-&gt;node[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        slist-&gt;length--;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.返回删除的值</span></span><br><span class="line">    <span class="keyword">return</span> &amp;date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出线性表对应位置的值</span></span><br><span class="line"><span class="function">SeqListNode* <span class="title">SeqList_Get</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.强制转换类型，把void类型转换成需要的类型</span></span><br><span class="line">    TSeqList* slist = (TSeqList*)<span class="built_in">list</span>;</span><br><span class="line">    SeqListNode* ret = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//2.判断位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span>( (slist != <span class="literal">NULL</span>) &amp;&amp; (<span class="number">0</span> &lt;= pos) &amp;&amp; (pos &lt; slist-&gt;length) )</span><br><span class="line">    &#123;</span><br><span class="line">        ret = (SeqListNode*)(&amp;slist-&gt;node[pos]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZYB on 2020/6/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SeqList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system("pause") or input loop */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeqList* <span class="built_in">list</span> = SeqList_Create(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> z = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SeqList_Insert(<span class="built_in">list</span>, &amp;i, <span class="number">0</span>);</span><br><span class="line">    SeqList_Insert(<span class="built_in">list</span>, &amp;j, <span class="number">0</span>);</span><br><span class="line">    SeqList_Insert(<span class="built_in">list</span>, &amp;k, <span class="number">0</span>);</span><br><span class="line">    SeqList_Insert(<span class="built_in">list</span>, &amp;x, <span class="number">0</span>);</span><br><span class="line">    SeqList_Insert(<span class="built_in">list</span>, &amp;y, <span class="number">0</span>);</span><br><span class="line">    SeqList_Insert(<span class="built_in">list</span>, &amp;z, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"线性表长度为:%d\n"</span>,SeqList_Length(<span class="built_in">list</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> index=<span class="number">0</span>; index&lt;SeqList_Length(<span class="built_in">list</span>); index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)SeqList_Get(<span class="built_in">list</span>, index);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (SeqList_Length(<span class="built_in">list</span>) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span>*)SeqList_Delete(<span class="built_in">list</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    SeqList_Destroy(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"线性表长度为:%d\n"</span>,SeqList_Length(<span class="built_in">list</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><p><strong>运行结果：</strong></p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/5.png" style="zoom:50%;"></p><p>&lt;/br&gt;</p><h3 id="4-顺序存储的优缺点"><a href="#4-顺序存储的优缺点" class="headerlink" title="(4).顺序存储的优缺点"></a>(4).顺序存储的优缺点</h3><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/7.png" style="zoom:40%;"></p><hr><p>&lt;/br&gt;</p><h2 id="4-线性表的链式存储结构"><a href="#4-线性表的链式存储结构" class="headerlink" title="4.线性表的链式存储结构"></a>4.线性表的链式存储结构</h2><h3 id="1-结构分析-1"><a href="#1-结构分析-1" class="headerlink" title="(1).结构分析"></a>(1).结构分析</h3><p><strong>链式存储定义：</strong>为了表示每个数据元素与其直接后继的元素之间的逻辑关系，每个元素除了存储本身的信息之外，还需要存储指示其直接后继的消息。</p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/8.png" style="zoom:50%;"></p><p><strong>链式存储逻辑结构：</strong>n个结点链接成一个链式线性表的结构叫做<strong>链表</strong>，当每个结点中只包含一个指针域时，叫做<strong>单链表</strong>。</p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/9.png" style="zoom:30%;"></p><p><strong>链表的基本概念:</strong></p><ul><li><strong>表头结点：</strong>链表中的第一个结点，包含指向第一个数据元素的指针以及链表自身的一些信息。(<font color="red">本身不是数据元素</font>)</li><li><strong>数据结点：</strong>链表中代表数据元素的结点，包含指向下一个数据元素的指针和数据元素的信息。</li><li><strong>尾结点：</strong>链表中的最后一个数据结点，其下一元素指针为空，表示无后继。</li></ul><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/10.png" style="zoom:40%;"></p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/11.png" style="zoom:60%;"></p><p><strong>C语言用结构体来定义链表中的结点：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> _tag_LinkListNode LinkListNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结点指针域定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">tag_LinkListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  LinkListNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头结点定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tag_LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  LinkListNode header;</span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">&#125;TLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据元素定义示例</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  LinkListNode header;</span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h3 id="2-重点操作-1"><a href="#2-重点操作-1" class="headerlink" title="(2).重点操作"></a>(2).重点操作</h3><h4 id="获取第pos个元素操作"><a href="#获取第pos个元素操作" class="headerlink" title="获取第pos个元素操作"></a>获取第pos个元素操作</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断位置是否合法</li><li>由表头开始通过next指针移动pos次后，当前元素的next指针即指向要获取的元素</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.判断线性表是否合法</span></span><br><span class="line"><span class="comment">//2.判断位置是否合法</span></span><br><span class="line"><span class="keyword">if</span>( (sList != <span class="literal">NULL</span>) &amp;&amp; (<span class="number">0</span> &lt;= pos) &amp;&amp; (pos &lt; sList-&gt;length) )</span><br><span class="line">&#123;</span><br><span class="line">    LinkListNode* current = (LinkListNode*)sList;</span><br><span class="line">    <span class="comment">//由表头开始通过next指针移动pos次后，当前元素的next指针即指向要获取的元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pos; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = current-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h4 id="插入元素操作-1"><a href="#插入元素操作-1" class="headerlink" title="插入元素操作"></a>插入元素操作</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断插入位置是否合法</li><li>由表头开始通过next指针移动pos次后，当前元素的next指针即指向要插入的位置</li><li>将新元素插入</li><li>线性表长度加1</li></ul><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/13.png" style="zoom:45%;"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.判断线性表是否合法</span></span><br><span class="line"><span class="comment">//2.判断插入位置是否合法</span></span><br><span class="line"><span class="keyword">int</span> ret = (sList != <span class="literal">NULL</span>) &amp;&amp; (pos &gt;= <span class="number">0</span>) &amp;&amp; (node != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>( ret )</span><br><span class="line">&#123;</span><br><span class="line">    LinkListNode* current = (LinkListNode*)sList;</span><br><span class="line">    <span class="comment">//3.由表头开始通过next指针移动pos次后，当前元素的next指针即指向要插入的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; (i&lt;pos) &amp;&amp; (current-&gt;next != <span class="literal">NULL</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.将新元素插入</span></span><br><span class="line">    node-&gt;next = current-&gt;next;</span><br><span class="line">    current-&gt;next = node;</span><br><span class="line">    <span class="comment">//5.线性表长度加1</span></span><br><span class="line">    sList-&gt;length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h4 id="删除元素操作-1"><a href="#删除元素操作-1" class="headerlink" title="删除元素操作"></a>删除元素操作</h4><p><strong>操作步骤：</strong></p><ul><li><p>判断线性表是否合法</p></li><li><p>判断插入位置是否合法</p></li><li>获取第pos个元素</li><li>将第pos个元素从链表中删除</li><li>线性表长度减1</li></ul><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/12.png" style="zoom:45%;"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">LinkListNode* ret = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//1.判断线性表是否合法</span></span><br><span class="line"><span class="comment">//2.判断插入位置是否合法</span></span><br><span class="line"><span class="keyword">if</span>( (sList != <span class="literal">NULL</span>) &amp;&amp; (<span class="number">0</span> &lt;= pos) &amp;&amp; (pos &lt; sList-&gt;length) )</span><br><span class="line">&#123;</span><br><span class="line">LinkListNode* current = (LinkListNode*)sList;</span><br><span class="line"><span class="comment">//3.获取第pos个元素</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.将第pos个元素从链表中删除</span></span><br><span class="line">ret = current-&gt;next;</span><br><span class="line">current-&gt;next = ret-&gt;next;</span><br><span class="line"><span class="comment">//5.线性表长度减1</span></span><br><span class="line">sList-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h3 id="3-代码具体实现-1"><a href="#3-代码具体实现-1" class="headerlink" title="(3).代码具体实现"></a>(3).代码具体实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZYB on 2020/6/5.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_LINKLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_LINKLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> LinkList;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tag_LinkListNode</span> <span class="title">LinkListNode</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">tag_LinkListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LinkListNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList* <span class="title">LinkList_Create</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkList_Destroy</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkList_Clear</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList_Length</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList_Insert</span><span class="params">(LinkList* <span class="built_in">list</span>, LinkListNode* node, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkListNode* <span class="title">LinkList_Get</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkListNode* <span class="title">LinkList_Delete</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//LIST_LINKLIST_H</span></span></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZYB on 2020/6/5.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tag_LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LinkListNode head;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;TLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="function">LinkList* <span class="title">LinkList_Create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//动态生成一个表头结点</span></span><br><span class="line">    TLinkList* ret = (TLinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TLinkList));</span><br><span class="line">    <span class="comment">//判断是否创建成功</span></span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret-&gt;length = <span class="number">0</span>;</span><br><span class="line">        ret-&gt;head.next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回创建的链表</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkList_Destroy</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkList_Clear</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//进行强制转换</span></span><br><span class="line">    TLinkList* slist = (TLinkList*)<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//长度设置为0，头结点指向空</span></span><br><span class="line">    <span class="keyword">if</span>(slist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        slist-&gt;length = <span class="number">0</span>;</span><br><span class="line">        slist-&gt;head.next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList_Length</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//进行强制转换</span></span><br><span class="line">    TLinkList* slist = (TLinkList*)<span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//长度赋给变量然后返回</span></span><br><span class="line">    <span class="keyword">if</span>(slist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = slist-&gt;length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList_Insert</span><span class="params">(LinkList* <span class="built_in">list</span>, LinkListNode* node, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//进行强制转换</span></span><br><span class="line">    TLinkList* slist = (TLinkList*)<span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">//进行条件检测</span></span><br><span class="line">    <span class="keyword">int</span> ret = (slist != <span class="literal">NULL</span>) &amp;&amp; (pos &gt;= <span class="number">0</span>) &amp;&amp; (node != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义一个插入指针指向头结点</span></span><br><span class="line">        LinkListNode* current = (LinkListNode*)slist;</span><br><span class="line">        <span class="comment">//移动指针到需要插入的地方</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (i &lt; pos) &amp;&amp; (current-&gt;next != <span class="literal">NULL</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入节点</span></span><br><span class="line">        node-&gt;next = current-&gt;next;</span><br><span class="line">        current-&gt;next = node;</span><br><span class="line">        <span class="comment">//链表长度加一</span></span><br><span class="line">        slist-&gt;length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得对应节点的值</span></span><br><span class="line"><span class="function">LinkListNode* <span class="title">LinkList_Get</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//进行强制转换</span></span><br><span class="line">    TLinkList* slist = (TLinkList*)<span class="built_in">list</span>;</span><br><span class="line">    LinkListNode* ret = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//进行条件检测</span></span><br><span class="line">   <span class="keyword">if</span>((slist != <span class="literal">NULL</span>) &amp;&amp; (pos &gt;= <span class="number">0</span>) &amp;&amp; (pos &lt; slist-&gt;length))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义一个插入指针指向头结点</span></span><br><span class="line">        LinkListNode* current = (LinkListNode*)slist;</span><br><span class="line">        <span class="comment">//移动指针到指定的地方</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (i &lt; pos) &amp;&amp; (current-&gt;next != <span class="literal">NULL</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把对应的节点地址赋给ret</span></span><br><span class="line">        ret = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function">LinkListNode* <span class="title">LinkList_Delete</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//进行强制转换</span></span><br><span class="line">    TLinkList* slist = (TLinkList*)<span class="built_in">list</span>;</span><br><span class="line">    LinkListNode* ret = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//进行条件检测</span></span><br><span class="line">    <span class="keyword">if</span>((slist != <span class="literal">NULL</span>) &amp;&amp; (pos &gt;= <span class="number">0</span>) &amp;&amp; (pos &lt; slist-&gt;length))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义一个插入指针指向头结点</span></span><br><span class="line">        LinkListNode* current = (LinkListNode*)slist;</span><br><span class="line">        <span class="comment">//移动指针到指定的地方</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (i &lt; pos) &amp;&amp; (current-&gt;next != <span class="literal">NULL</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行删除操作</span></span><br><span class="line">        ret = current-&gt;next;</span><br><span class="line">        current-&gt;next = ret-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//链表长度减一</span></span><br><span class="line">        slist-&gt;length--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system("pause") or input loop */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LinkListNode header;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList*  <span class="built_in">list</span> = LinkList_Create();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Value</span> <span class="title">v1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Value</span> <span class="title">v2</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Value</span> <span class="title">v3</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Value</span> <span class="title">v4</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Value</span> <span class="title">v5</span>;</span></span><br><span class="line"></span><br><span class="line">    v1.v = <span class="number">1</span>;</span><br><span class="line">    v2.v = <span class="number">2</span>;</span><br><span class="line">    v3.v = <span class="number">3</span>;</span><br><span class="line">    v4.v = <span class="number">4</span>;</span><br><span class="line">    v5.v = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    LinkList_Insert(<span class="built_in">list</span>, (LinkListNode*)&amp;v1, LinkList_Length(<span class="built_in">list</span>));</span><br><span class="line">    LinkList_Insert(<span class="built_in">list</span>, (LinkListNode*)&amp;v2, LinkList_Length(<span class="built_in">list</span>));</span><br><span class="line">    LinkList_Insert(<span class="built_in">list</span>, (LinkListNode*)&amp;v3, LinkList_Length(<span class="built_in">list</span>));</span><br><span class="line">    LinkList_Insert(<span class="built_in">list</span>, (LinkListNode*)&amp;v4, LinkList_Length(<span class="built_in">list</span>));</span><br><span class="line">    LinkList_Insert(<span class="built_in">list</span>, (LinkListNode*)&amp;v5, LinkList_Length(<span class="built_in">list</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表长度为:%d\n"</span>,LinkList_Length(<span class="built_in">list</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; LinkList_Length(<span class="built_in">list</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Value</span>* <span class="title">pv</span> = (<span class="title">struct</span> <span class="title">Value</span>*)<span class="title">LinkList_Get</span>(<span class="title">list</span>, <span class="title">i</span>);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"结点%d的值为:%d\n"</span>, i, pv-&gt;v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( LinkList_Length(<span class="built_in">list</span>) &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Value</span>* <span class="title">pv</span> = (<span class="title">struct</span> <span class="title">Value</span>*)<span class="title">LinkList_Delete</span>(<span class="title">list</span>, 0);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除的节点的值为:%d\n"</span>, pv-&gt;v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表长度为:%d\n"</span>,LinkList_Length(<span class="built_in">list</span>));</span><br><span class="line"></span><br><span class="line">    LinkList_Destroy(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><p><strong>运行结果：</strong></p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/14.png" style="zoom:40%;"></p><h3 id="4-单链表结构与顺序存储结构优缺点"><a href="#4-单链表结构与顺序存储结构优缺点" class="headerlink" title="(4).单链表结构与顺序存储结构优缺点"></a>(4).单链表结构与顺序存储结构优缺点</h3><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/15.png" style="zoom:50%;"></p><hr><p>&lt;/br&gt;</p><h2 id="5-静态链表"><a href="#5-静态链表" class="headerlink" title="5.静态链表"></a>5.静态链表</h2><h3 id="1-结构分析-2"><a href="#1-结构分析-2" class="headerlink" title="(1).结构分析"></a>(1).结构分析</h3><p><strong>静态链表：</strong>让数组的元素都是由两个数据域组成，data和next。也就是说，数组的每个下标都对应一个data和一个next。数据域data，用来存放数据元素，也就是通常我们要处理的数据；而next相当于单链表中的next指针，存放该元素的后继在数组中的下标，我们把next叫做游标。</p><ul><li>顺序表数组中的元素由两个数据域组成:data和next</li><li>data域用于存储数据</li><li>next域用于存储下一个元素在数组中的下标</li></ul><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/17.png" style="zoom:50%;"></p><blockquote><p>表头结点中，<code>data = 3</code> 表示链表长度为3，<code>next = 1</code> 表示下一个结点的位置是1。</p></blockquote><font color="red">**静态链表是在顺序表的基础 静态链表是在顺序表的基础上利用数组实现的单链表。**</font><p><strong>在C中用一维数组来实现顺序存储结构：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tag_StaticListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> date;</span><br><span class="line">  <span class="keyword">int</span> next;</span><br><span class="line">&#125;TStaticListNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态链表结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tag_StaticList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> capacity;</span><br><span class="line">  TStaticListNode header;</span><br><span class="line">  TStaticListNode node[];</span><br><span class="line">&#125;TStaticList;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h3 id="2-重点操作-2"><a href="#2-重点操作-2" class="headerlink" title="(2).重点操作"></a>(2).重点操作</h3><h4 id="获取第pos个元素操作-1"><a href="#获取第pos个元素操作-1" class="headerlink" title="获取第pos个元素操作"></a>获取第pos个元素操作</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断位置是否合法</li><li>由表头开始通过next域移动pos次后，当前元素的next域即要获取元素在数组中的下标</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.判断线性表是否合法</span></span><br><span class="line"><span class="comment">//2.判断位置是否合法</span></span><br><span class="line"><span class="keyword">if</span>( (sList != <span class="literal">NULL</span>) &amp;&amp; (<span class="number">0</span> &lt;= pos) &amp;&amp; (pos &lt; sList-&gt;length) )</span><br><span class="line">&#123;</span><br><span class="line">sList-&gt;node[<span class="number">0</span>] = sList-&gt;header;</span><br><span class="line">  <span class="comment">//由表头开始通过next域移动pos次后，当前元素的next域即要获取元素在数组中的下标</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    current = sList-&gt;node[current].next;</span><br><span class="line">  &#125;</span><br><span class="line">  object = sList-&gt;node[current].next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h4 id="插入元素到位置pos的算法"><a href="#插入元素到位置pos的算法" class="headerlink" title="插入元素到位置pos的算法"></a>插入元素到位置pos的算法</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断插入位置是否合法</li><li><font color="red">在数组中查找空闲位置index</font></li><li>由表头开始通过next域移动pos次后，当前元素的next域为要插入的位置</li><li>将新元素插入</li><li>线性表长度加1</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h4 id="删除第pos个元素的算法"><a href="#删除第pos个元素的算法" class="headerlink" title="删除第pos个元素的算法"></a>删除第pos个元素的算法</h4><p><strong>操作步骤：</strong></p><ul><li>判断线性表是否合法</li><li>判断插入位置是否合法</li><li>获取第pos个元素</li><li>将第pos个元素从链表中删除</li><li>线性表长度减1</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h3 id="3-具体代码实现"><a href="#3-具体代码实现" class="headerlink" title="(3).具体代码实现"></a>(3).具体代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><h3 id="4-静态链表优缺点"><a href="#4-静态链表优缺点" class="headerlink" title="(4).静态链表优缺点"></a>(4).静态链表优缺点</h3><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/18.png" style="zoom:50%;"></p><hr><p>&lt;/br&gt;</p><h2 id="6-循环链表"><a href="#6-循环链表" class="headerlink" title="6.循环链表"></a>6.循环链表</h2><h3 id="1-结构分析-3"><a href="#1-结构分析-3" class="headerlink" title="(1).结构分析"></a>(1).结构分析</h3><p><strong>循环链表的定义：</strong>将单链表中最后一个数据元素的next指针指向第一个元素.</p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅱ线性表/19.png" style="zoom:50%;"></p><p>&lt;/br&gt;</p><h3 id="2-重点操作-3"><a href="#2-重点操作-3" class="headerlink" title="(2).重点操作"></a>(2).重点操作</h3><p><strong>循环链表拥有单链表的所有操作。</strong></p><ul><li>创建链表</li><li>销毁链表</li><li>获取链表长度</li><li>清空链表</li><li>获取第pos个元素操作</li><li>插入元素到位置pos</li><li>删除位置pos处的元素</li></ul><p>&lt;/br&gt;</p><h3 id="3-代码具体实现-2"><a href="#3-代码具体实现-2" class="headerlink" title="(3).代码具体实现"></a>(3).代码具体实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>&lt;/br&gt;</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><hr><p>&lt;/br&gt;</p><h2 id="7-双向链表"><a href="#7-双向链表" class="headerlink" title="7.双向链表"></a>7.双向链表</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="线性表" scheme="https://zybtree.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Ⅰ绪论</title>
    <link href="https://zybtree.github.io/2020/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%85%A0%E7%BB%AA%E8%AE%BA/"/>
    <id>https://zybtree.github.io/2020/04/12/数据结构Ⅰ绪论/</id>
    <published>2020-04-12T03:50:54.000Z</published>
    <updated>2020-06-02T06:56:01.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-绪论"><a href="#一-绪论" class="headerlink" title="一.绪论"></a>一.绪论</h1><h2 id="一-概念"><a href="#一-概念" class="headerlink" title="(一).概念"></a>(一).概念</h2><p><strong>1.数据：</strong>是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</p><blockquote><p>这里说的数据，其实就是符号，而且这些符号必须具备两个前提：</p><ul><li>可以输入到计算机中。</li><li>能被计算机程序处理。</li></ul></blockquote><p><strong>2.数据元素：</strong>是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录。</p><p><strong>3.数据项：</strong>一个数据元素可以由若干个数据项组成。</p><blockquote><p>数据项是数据不可分割的最小单位。在数据结构中，把数据项定义为最小单位，是有助于我们更好地解决问题。</p></blockquote><p><strong>4.数据对象：</strong>是性质相同的数据元素的集合，是数据的子集，<strong>简称数据</strong>。</p><blockquote><p>性质相同，是指数据元素具有相同数量和类型的数据项。</p></blockquote><p><strong>5.数据结构：</strong>是相互之间存在一种或多种特定关系的数据元素的集合。</p><blockquote><p> 在计算机中，数据元素并不是孤立、杂乱无序的，而是具有内在联系的数据集合。数据元素之间存在的一种或多种特定关系，也就是数据的组织形式。</p></blockquote><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅰ绪论/1.png" style="zoom:50%;"></p><h2 id="二-逻辑与物理结构"><a href="#二-逻辑与物理结构" class="headerlink" title="(二).逻辑与物理结构"></a>(二).逻辑与物理结构</h2><h3 id="1-逻辑结构"><a href="#1-逻辑结构" class="headerlink" title="1.逻辑结构"></a>1.逻辑结构</h3><blockquote><p>逻辑结构：是指数据对象中数据元素之间的相互关系。其实这也是我们今后最需要关注的问题。逻辑结构分为以下四种。</p></blockquote><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅰ绪论/2.png" style="zoom:50%;"></p><h3 id="2-物理结构"><a href="#2-物理结构" class="headerlink" title="2.物理结构"></a>2.物理结构</h3><p><strong>物理结构：</strong>是指数据的逻辑结构在计算机中的<strong>存储形式</strong>。</p><blockquote><p>数据是数据元素的集合，那么根据物理结构的定义，实际上就是如何把数据元素存储到计算机的存储器中。存储器主要是针对内存而言的，像硬盘、软盘、光盘等外部存储器的数据组织通常用文件结构来描述。</p></blockquote><p>数据元素的存储结构形式有两种：<strong>顺序存储</strong>和<strong>链式存储</strong>。</p><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><p><strong>顺序存储结构：</strong>是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。如下图所示。</p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅰ绪论/3.png" style="zoom:50%;"></p><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p><strong>链式存储结构：</strong>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。数据元素的存储关系并不能反映其逻辑关系，因此<strong>需要用一个指针存放数据元素的地址</strong>，这样通过地址就可以找到相关联数据元素的位置。如下图所示。</p><p><img src="//zybtree.github.io/2020/04/12/数据结构Ⅰ绪论/4.png" style="zoom:40%;"></p><h2 id="三-抽象数据类型"><a href="#三-抽象数据类型" class="headerlink" title="(三).抽象数据类型"></a>(三).抽象数据类型</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><p><strong>数据类型：</strong>是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p><blockquote><p>数据类型是按照值的不同进行划分的。在高级语言中，每个变量、常量和表达式都有各自的取值范围。类型就用来说明变量或表达式的取值范围和所能进行的操作。</p></blockquote><p>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。抽象是一种思考问题的方式，它隐藏了繁杂的细节，只保留实现目标所必需的信息。</p><h3 id="2-抽象数据类型"><a href="#2-抽象数据类型" class="headerlink" title="2.抽象数据类型"></a>2.抽象数据类型</h3><p><strong>抽象数据类型(Abstract Data Type，ADT)：</strong>是指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关。</p><hr><p>&lt;/br&gt;</p><h1 id="二-算法"><a href="#二-算法" class="headerlink" title="二.算法"></a>二.算法</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法设计" scheme="https://zybtree.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="数据结构绪论" scheme="https://zybtree.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>C Program Ⅸ C预处理器和C库</title>
    <link href="https://zybtree.github.io/2020/04/10/C-Program-%E2%85%A8-C%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%E5%92%8CC%E5%BA%93/"/>
    <id>https://zybtree.github.io/2020/04/10/C-Program-Ⅸ-C预处理器和C库/</id>
    <published>2020-04-10T03:25:38.000Z</published>
    <updated>2020-04-12T04:14:33.715Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux C" scheme="https://zybtree.github.io/categories/Linux-C/"/>
    
    
      <category term="C" scheme="https://zybtree.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C Program Ⅷ  位操作</title>
    <link href="https://zybtree.github.io/2020/04/10/C-Program-%E2%85%A7-%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    <id>https://zybtree.github.io/2020/04/10/C-Program-Ⅷ-位操作/</id>
    <published>2020-04-10T03:25:16.000Z</published>
    <updated>2020-04-10T04:09:24.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux C" scheme="https://zybtree.github.io/categories/Linux-C/"/>
    
    
      <category term="C" scheme="https://zybtree.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C Program Ⅶ 结构体和其他数据形式</title>
    <link href="https://zybtree.github.io/2020/04/10/C-Program-%E2%85%A6-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BD%A2%E5%BC%8F/"/>
    <id>https://zybtree.github.io/2020/04/10/C-Program-Ⅶ-结构体和其他数据形式/</id>
    <published>2020-04-10T03:24:48.000Z</published>
    <updated>2020-04-10T04:09:17.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux C" scheme="https://zybtree.github.io/categories/Linux-C/"/>
    
    
      <category term="C" scheme="https://zybtree.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C Program Ⅵ 文件</title>
    <link href="https://zybtree.github.io/2020/04/10/C-Program-%E2%85%A5-%E6%96%87%E4%BB%B6/"/>
    <id>https://zybtree.github.io/2020/04/10/C-Program-Ⅵ-文件/</id>
    <published>2020-04-10T03:24:23.000Z</published>
    <updated>2020-04-10T04:09:09.552Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux C" scheme="https://zybtree.github.io/categories/Linux-C/"/>
    
    
      <category term="C" scheme="https://zybtree.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C Program Ⅴ 存储类,链接和内存管理</title>
    <link href="https://zybtree.github.io/2020/04/10/C-Program-%E2%85%A4-%E5%AD%98%E5%82%A8%E7%B1%BB-%E9%93%BE%E6%8E%A5%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://zybtree.github.io/2020/04/10/C-Program-Ⅴ-存储类-链接和内存管理/</id>
    <published>2020-04-10T03:24:06.000Z</published>
    <updated>2020-04-21T12:40:24.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> 程序员通过 C的内存管理系统指定变量的作用域和生命期，实现对程序的控制。合理使用内存储存数据是设计程序的一个要点。</p></blockquote><h1 id="一-存储类别"><a href="#一-存储类别" class="headerlink" title="一.存储类别"></a>一.存储类别</h1><p><strong>硬件方面来看：</strong>被储存的每个值都占用一定的物理内存，C 语言把这样的一块内存称为<code>对象(object)</code>。对象可以储存一个或多个值。一个对象可能并未储存实际的值，但是它在储存适当的值时一定具有相应的大小(面向对象编程中的对象指的是类对象，其定义包括数据和允许对数据进行的操作，C不是面向对象编程语言)。</p><p><strong>软件方面来看：</strong>程序需要一种方法访问对象。这可以通过声明变量来完成。</p><p>以下面的例子作为分析：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> entity = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></div><p>该声明创建了一个名为<code>entity</code>的<code>标识符(identifier)</code>。标识符是一个名称，在这种情况下，标识符可以用来指定(designate)特定对象的内容。标识符遵循变量的命名规则。在该例中，标识符<code>entity</code>即是软件(即C程序)指定<strong>硬件内存中的对象的方式</strong>。该声明还提供了<strong>储存在对象中的值</strong>。</p><p>但是变量名不是指定对象的唯一途径。以下面的例子作为分析：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt = &amp;entity;</span><br><span class="line"><span class="keyword">int</span> ranks[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></div><p>第1行声明中，<code>pt</code>是一个标识符，它指定了一个储存地址的对象。但是，表达式<code>pt</code>不是标识符，因为它不是一个名称。然而，它确实指定了一个对象，在这种情况下，它与 <code>entity</code>指定的对象相同。一般而言，那些指定对象的表达式被称为<em>左值</em>。所以，<code>entity</code>既是标识符也是左值；<code>*pt</code>既是表达式也是左值。按照这个思路，<code>ranks + 2 * entity</code>既不是标识符（不是名称），也不是左值（它不指定内存位置上的内容）。但是表达式<code>*(ranks + 2 * entity)</code>是一个左值，因为它的确指定了特定内存位置的值，即ranks数组的第7个元素。顺带一提，ranks的声明创建了一个可容纳10个int类型元素的对象，该数组的每个元素也是一个对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux C" scheme="https://zybtree.github.io/categories/Linux-C/"/>
    
    
      <category term="C" scheme="https://zybtree.github.io/tags/C/"/>
    
  </entry>
  
</feed>
