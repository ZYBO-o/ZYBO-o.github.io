<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zybTree&#39;s Blogs</title>
  
  <subtitle>Follow Excellence</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zybtree.github.io/"/>
  <updated>2019-10-25T03:09:03.935Z</updated>
  <id>https://zybtree.github.io/</id>
  
  <author>
    <name>zybTree</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无线通信物理层安全方法综述</title>
    <link href="https://zybtree.github.io/2019/10/25/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E7%89%A9%E7%90%86%E5%B1%82%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95%E7%BB%BC%E8%BF%B0/"/>
    <id>https://zybtree.github.io/2019/10/25/无线通信物理层安全方法综述/</id>
    <published>2019-10-25T01:17:57.000Z</published>
    <updated>2019-10-25T03:09:03.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="一-传统安全方案的局限性"><a href="#一-传统安全方案的局限性" class="headerlink" title="一.传统安全方案的局限性"></a>一.传统安全方案的局限性</h2><p>1.传统安全方案是在网络层通过公私密钥对数据进行加密，往往以牺牲复杂度换取安全性。然而在目前正在推广使用的 ＬＴＥ／４Ｇ 甚至在正在完善的５Ｇ 标准中，高的数据传输速率对加解密实时性、复杂度和延时等提出了更加严格的要求。</p><p>2.无线传感器网络（Ｗireless sensor network,WSN）及 无 线 自 组 织网络(Mobile Ad hoc networks,MANET）等新型网络目前在军事和民用中都得到了广泛的使 用。然而这些新型网络中的各个节点通常以电池供电，无法负担传统的加解密算法的功率与成本的开销。</p><p>3.传统的加密算法大多基于现有的计算机无法在短时间内对其进行破解。随着拥有迅速执行巨<br>量复杂的因数分解能力的量子计算机的出现，很多传统的加密方法将不再可靠。</p><br><h2 id="二-物理层安全基础"><a href="#二-物理层安全基础" class="headerlink" title="二.物理层安全基础"></a>二.物理层安全基础</h2><p><strong>1.替换方式：</strong>作为上层加密方法的一种补充或代替，物理层安全利用信道的多径、互易性、空间唯一性等特征在底层提高无线通信系统的安全性。</p><p><strong>2.理论基础：</strong>Shannon建立的物理层安全模型。</p><p><strong>3..本质：</strong>在于利用信道的噪声和多径特性的不确定性来加密发送信息，使得窃听者获得发送信号的信息量趋向于零。</p><br><h2 id="三-物理层安全发展的两条主线"><a href="#三-物理层安全发展的两条主线" class="headerlink" title="三.物理层安全发展的两条主线"></a>三.物理层安全发展的两条主线</h2><blockquote><p><strong>背景:</strong></p><p>1.Ｗyner引入了窃听信道的模型，表 明 当 窃听者的信道是合法接收者的退化信道时，存在某种方法在保证不泄露给窃听者任何信息的条件下，最大化发送者到合法接收者的传输速率。</p><p>在 Ｗyner模型的启发下，很多文献提出在先验的信道状态信息（channel state information,CSI）的帮助下设计预编码矩阵的无密钥安全方案。其出发点是利用无线信道以及噪声内在的随机性使得合法接收者的信道优于窃听者来限制非法接收者获得的信息量。</p><p>2.Ｍaurer认 为 Ｗyner的 退化窃听信道假设未必合理，并最先提出了一种当窃听者的信道优于合法接收者时仍可以进行安全通信的方法。该方法的核心在于让合法通信双方通过公共信道和无差错的反馈信道通信共同产生一组安全密钥。</p></blockquote><p>基于信息论安全的物理层安全的研究发展为两条主线：1.由Wyner引导的无密钥安全；2.Shannon和Maurer引导的无线密钥安全机制。</p><br><hr><br><h1 id="安全容量"><a href="#安全容量" class="headerlink" title="安全容量"></a>安全容量</h1><blockquote><p>无线信道安全容量的分析是物理层安全的研究基础。物理层安全的安全容量决定了合法接收端可以正确接收而窃听者却无法获取的信息的最大可达通信速率，以及通信网络能提供的服务质量的高低。</p></blockquote><h2 id="一-无密钥安全系统下的容量"><a href="#一-无密钥安全系统下的容量" class="headerlink" title="一.无密钥安全系统下的容量"></a>一.无密钥安全系统下的容量</h2><p>无密钥安全方案的出发点是合法接收者的信道条件优于窃听者的信道。该模型下的安全容量可以描述为：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cs ＝Cm －Ce</span><br></pre></td></tr></table></figure><p>式中，Cm和Ce分别为合法接收者和窃听者的信道容量。</p><p>通过增大合法接收者和窃听者的信道条件差异来优化信道安全容量。</p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="论文学习" scheme="https://zybtree.github.io/categories/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="论文积累与想法" scheme="https://zybtree.github.io/tags/%E8%AE%BA%E6%96%87%E7%A7%AF%E7%B4%AF%E4%B8%8E%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>one min speech</title>
    <link href="https://zybtree.github.io/2019/10/24/one-min-speech/"/>
    <id>https://zybtree.github.io/2019/10/24/one-min-speech/</id>
    <published>2019-10-24T06:05:00.000Z</published>
    <updated>2019-10-24T06:12:23.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>今天我想给大家介绍的是我最喜欢的动漫导演——新海诚，</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="英语学习与积累" scheme="https://zybtree.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="口语练习" scheme="https://zybtree.github.io/tags/%E5%8F%A3%E8%AF%AD%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2019年九月和十月学习总结</title>
    <link href="https://zybtree.github.io/2019/10/23/2019%E5%B9%B4%E4%B9%9D%E6%9C%88%E5%92%8C%E5%8D%81%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>https://zybtree.github.io/2019/10/23/2019年九月和十月总结/</id>
    <published>2019-10-23T10:08:48.000Z</published>
    <updated>2019-10-23T10:23:01.681Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="研究生学习" scheme="https://zybtree.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习计划与总结" scheme="https://zybtree.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>减脂塑性规划</title>
    <link href="https://zybtree.github.io/2019/10/18/%E5%87%8F%E8%84%82%E5%A1%91%E6%80%A7%E8%A7%84%E5%88%92/"/>
    <id>https://zybtree.github.io/2019/10/18/减脂塑性规划/</id>
    <published>2019-10-18T08:26:28.000Z</published>
    <updated>2019-10-20T11:31:37.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-健身部位与动作"><a href="#一-健身部位与动作" class="headerlink" title="一.健身部位与动作"></a>一.健身部位与动作</h1><h2 id="1-胸部"><a href="#1-胸部" class="headerlink" title="1.胸部"></a>1.胸部</h2><ul><li><p><strong>俯卧撑</strong></p><blockquote><p>可以练到胸肌、肱三头肌，甚至可以练到我们的肩部，是一个非常经典的自重动作。</p></blockquote></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/1.jpg" alt></p><ul><li><strong>平板杠铃卧推（宽握）：</strong></li></ul><blockquote><p>需要注意三点，一是卧推时杠铃需要自然推起（下放在胸部而顶点在肩关节上方），二是杠铃要尽量下放到贴近胸部的位置再推起，三是卧推时杠铃下放触及的应该是乳头附近的位置。 </p><p>很多新手卧推时，推起放下往往不是垂直的，下放往往放到肩部附近，这就是错误的推法，这样卧推是刺激不到胸肌的。</p></blockquote><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/2.jpg" alt></p><ul><li><strong>上斜板杠铃卧推（宽握</strong></li></ul><blockquote><p>其实就是将平板的角度向上倾斜45~60度<br>上斜板卧推需要注意的是，下放的位置不是乳头附近，而是下放到锁骨即可。</p></blockquote><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/3.jpg" alt></p><ul><li><strong>下斜板哑铃卧推（宽握）</strong></li></ul><blockquote><p>下斜卧推杠铃是下放到乳头往下3cm的位置，但是远没有到腹部。</p></blockquote><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/4.jpg" alt></p><ul><li><strong>窄握</strong></li></ul><blockquote><p>下面这是平板杠铃卧推（窄握）。窄握是提高卧推力量的很好的方法，和宽握相比，窄握中肱三头肌受力更大，卧推力量遇到瓶颈时，可以用窄握来突破。上斜和下斜的窄握就不贴了。</p></blockquote><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/5.jpg" alt></p><ul><li><strong>绳索飞鸟</strong></li></ul><blockquote><p>这应该是对胸肌中缝刺激最大的动作了。</p><p>这个动作需要注意的是，手要尽量打开，肘关节微曲，不要用腰背过分的借力。</p></blockquote><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/6.jpg" alt></p><ul><li><strong>哑铃飞鸟</strong></li></ul><blockquote><p>做哑铃飞鸟时你去想象你前面有个人，你要去「拥抱」他，就是用那种拥抱的感觉去练飞鸟就对了。</p></blockquote><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/7.jpg" alt></p><ul><li><strong>双臂杆屈伸</strong></li></ul><blockquote><p>这是在飞鸟和卧推之外的动作，根据身体倾向状况，刺激的肌肉部位也不同，身体越前倾，胸大肌的刺激越大，越直立，就越容易刺激肱三头肌。</p></blockquote><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/8.jpg" alt></p><hr><h2 id="2-腹部"><a href="#2-腹部" class="headerlink" title="2.腹部"></a>2.腹部</h2><ul><li><strong>上腹肌</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/9.jpg" alt></p><blockquote><p>注意不是做全程,而是双臂托着头向上抬起,感觉上面有个鱼饵要去吃的感觉.(60+)</p></blockquote><ul><li><strong>中腹肌、下腹肌</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/10.jpg" alt></p><blockquote><p>100+</p></blockquote><ul><li><strong>下腹肌</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/11.jpg" alt></p><blockquote><p>100+</p></blockquote><ul><li><strong>下腹肌</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/12.jpg" alt></p><blockquote><p>对于下腹肌有非常好的效果,坚持一段时间会出现V字型的线条</p><p>注意：腿部不要碰到地面。50+</p></blockquote><ul><li><strong>侧腹肌</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/13.jpg" alt></p><blockquote><p>注意点，全程上胸处于抬起状态，而不是躺下再起来，快速交替触碰.(100+)</p></blockquote><ul><li><strong>中腹肌</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/14.jpg" alt></p><blockquote><p>注意这个动作要水平的打开,而不是向下去打开,完全可以在地上做以臀部为支点.(60+)</p></blockquote><ul><li>中腹肌</li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/15.jpg" alt></p><blockquote><p>这个动作完全可以不负重,空手快速进行.(60+)</p></blockquote><hr><h2 id="3-腿"><a href="#3-腿" class="headerlink" title="3.腿"></a>3.腿</h2><ul><li><strong>颈后杠铃深蹲</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/16.gif" alt></p><blockquote><p>一个合格的负重深蹲动作，需要让你有顺畅的感觉，不别扭，可以自由发力的感觉，膝盖不要内扣，快起慢下，感受大腿燃烧的绷感.</p><p><strong>站距</strong>：稍微比肩膀宽一点，八字步站开，30度左右.</p><p><strong>膝盖的朝向和脚一样，朝外，无论多大重量，绝对不能内扣！！</strong></p></blockquote><ul><li><strong>箭步深蹲</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/17.gif" alt></p><blockquote><p>十分有效的动作，深蹲的一种，对塑造臀部也十分有帮助。</p><p>要领：膝盖要中立，不要出现单侧内扣.</p></blockquote><hr><h2 id="4-背"><a href="#4-背" class="headerlink" title="4.背"></a>4.背</h2><ul><li><strong>无敌黄金引体向上</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/18.jpg" alt></p><blockquote><p>主要可以锻炼到的肌群有：背阔肌，大圆肌，小园肌，肱二头肌。次要肌肉：三角肌后束，胸肌，腹肌，斜方肌等。</p></blockquote><ul><li><p><strong>高位下拉</strong> </p><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/19.jpg" alt></p></li></ul><blockquote><p> 需要注意：背要直，可以稍微向后仰一点，调整膝垫至合适位置。膝垫可以避免身体因为阻力而上升。吐气的同时将肩膀和上臂向后下方拉动，拉下把手直至碰到上胸。</p><p>提示：完全收紧时集中注意力收缩后背肌肉。动作中上躯应保持固定，只有手臂运动。前臂只需抓握杠杆，没有其他动作，不要用前臂拉动把手。</p><p>呼吸：用力下拉时呼气，还原时吸气</p></blockquote><ul><li><strong>宽度动作三直臂下拉</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/20.jpg" alt></p><blockquote><ol><li>正握握住宽把，掌心向下，双臂距离超过肩宽。后退60厘米左右。</li><li>上身向前，弯向前倾斜30度，双手在前方伸直,手肘略弯.。手臂无法完全伸直就继续后退，直到手臂完全伸直，弯腰，背阔肌绷紧，准备开始。</li><li>保持手臂伸直,收缩背阔肌下拉把手直至大腿,</li></ol></blockquote><ul><li><strong>哑铃划船</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/21.jpg" alt></p><blockquote><p>这个动作会让你的鼠蹊部（就是腹股沟，还是不懂就叫：腚沟子）处于一个容易受伤的状态.</p></blockquote><ul><li><strong>坐姿划船：</strong></li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/22.jpg" alt></p><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/23.gif" alt></p><blockquote><p>1 两腿踩住前方的踏板，<strong>微屈膝，腿不可伸直</strong>，两手紧握三角形（或其他形状的）手柄，双臂前伸，<strong>腰腹固定</strong>,挺胸抬头。</p><p>2.收缩背部肌肉，加紧肩胛骨，用这股力量，将手柄拉至腹部，尽可能地向后牵拉你的双肩和双肘，直到手柄接触到你的身体中部。可以保持顶峰收缩1-2秒，努力挤压你的肩胛骨，得到最大程度的刺激.</p><p>3.以背阔肌的力量控制还原，所谓的快拉慢回，控制速度，但是！不需要过慢。</p></blockquote><ul><li>硬拉</li></ul><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/24.gif" alt></p><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/25.jpg" alt></p><p><img src="//zybtree.github.io/2019/10/18/减脂塑性规划/26.jpg" alt></p><blockquote><p>这是一个垂直运动的轨迹，沉肩，核心收紧。发力的时候，感受力从地起，腘绳肌，大腿，臀部，下背，一气呵成，感受力从地起，屁股夹紧的感觉。</p><p>呼吸：硬拉在上了大重量以后（4-6RM甚至更重）用普通的呼吸方法是会出现危险的，为什么？</p><p>因为，在大重量的硬拉训练中，脊椎面临很大的压力，普通的呼吸造成的压力很难维持脊椎中立稳定，所以要憋气！就是所谓瓦式呼吸。先在动作进行前吸一口气，将气回压在下腹创造腹内压（往内挤压），努力紧绷你的腰椎周围肌群，想象别人要在你肚子上打一拳。直到完成一次动作后才进行吐气，动作全程是憋气的。再说一遍：准备动作深吸一口气，并且在发力的时候紧闭声门hold住这一口气。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="减脂塑形" scheme="https://zybtree.github.io/categories/%E5%87%8F%E8%84%82%E5%A1%91%E5%BD%A2/"/>
    
    
      <category term="减脂塑形" scheme="https://zybtree.github.io/tags/%E5%87%8F%E8%84%82%E5%A1%91%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>东大一个月以来的反思</title>
    <link href="https://zybtree.github.io/2019/10/04/%E4%B8%9C%E5%A4%A7%E4%B8%80%E4%B8%AA%E6%9C%88%E4%BB%A5%E6%9D%A5%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
    <id>https://zybtree.github.io/2019/10/04/东大一个月以来的反思/</id>
    <published>2019-10-04T05:48:11.000Z</published>
    <updated>2019-10-18T05:50:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1 跑步已进入瓶颈期，6km以下已经不怎么出汗。改变有氧运动为跳绳后发现10mins就能汗如雨下，搭配着来很重要。其次，不能间断超过三天，否则要浪费一天时间去重新适应。现在又办理了健身卡，今天晚上也要制定减脂增肌的健身与饮食计划，一定要在元旦之前减到65kg以下。</p><hr><p>2 以后就算是和老师们聚餐也要控制酒精摄入。更要学会委婉的拒绝。</p><hr><p>3 事实证明自己之前的胡思乱想归根结底还是闲的，让自己有计划有节奏的忙碌起来。爱情这东西命里有时终须有，命里无时也莫强求，对现在的自己而言没有那么重要。</p><hr><p>4 至于以后到底读不读博，就业是否留在实验室得等到寒假之后再思考，这个学期主要是找到物理层安全的价值点与兴趣点所在，多读论文。</p><hr><p>5 不要过于自卑，自己也没有那么弱，运气只会对努力的，有准备的人奏效，它也是实力的一种，不然自己也不会在这进修了!</p><hr><p>6 体态和肤质只需坚持一个季度就能改变，并不难。细细想来和当初考研异曲同工，只要稳扎稳打一年就能改变所在平台，这是回报率很高的“交易”。等到11月发了奖学金可以试着买一套护肤的保养保养，毕竟自己的皮肤也需要保护，自己的形象也很重要。</p><hr><p>7 年少时觉得那些大道理似乎很空，所以忘得很快。现在读的书慢慢多了，经历的慢慢丰富了，身边却很少有人那么“苦口婆心”的教导自己，很感谢随机过程老师每节课这么督促我们，仔细琢磨后觉得既兴奋有懊悔，以后要把所以空闲时间都用在学习与思考上。</p><hr><p>8 老师们都说如果能把高考时的拼劲放到现在，没有什么是解决不了的。不过高三时的自己并没有那么拼命，也让自己刻意忘记了那时的日子。所以自己不妨试着再找回考研时候的拼劲，时刻思考，时刻背诵。我相信自己一定会有所成的。</p><hr><p>9 如切如磋，如琢如磨，战战兢兢，如履薄冰。希望不负“百载文枢江左，东南辈出英豪。”的期望!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="感悟与反思" scheme="https://zybtree.github.io/categories/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="感悟与反思" scheme="https://zybtree.github.io/tags/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>研一上学期计划</title>
    <link href="https://zybtree.github.io/2019/09/30/%E7%A0%94%E4%B8%80%E4%B8%8A%E5%AD%A6%E6%9C%9F%E8%AE%A1%E5%88%92/"/>
    <id>https://zybtree.github.io/2019/09/30/研一上学期计划/</id>
    <published>2019-09-30T05:39:34.000Z</published>
    <updated>2019-10-23T10:23:03.154Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><h2 id="一-物理层安全"><a href="#一-物理层安全" class="headerlink" title="一.物理层安全"></a>一.物理层安全</h2><blockquote><p>第一学期打好基础，把硕士和博士毕业论文都精读分析完。</p></blockquote><p><strong>需要看完的书籍：</strong></p><ul><li>信号与系统</li><li>通信原理基础</li><li>信息论与编码</li><li>密码学重点</li><li>随机过程</li><li>计算机网络</li></ul><h2 id="二-机器学习"><a href="#二-机器学习" class="headerlink" title="二.机器学习"></a>二.机器学习</h2><blockquote><p>在这个学期做到入门机器学习，做出一个小成品</p></blockquote><p><strong>需要看完的书籍：</strong></p><ul><li>机器学习(西瓜书)</li><li>机器学习实战</li></ul><h2 id="三-英语雅思"><a href="#三-英语雅思" class="headerlink" title="三.英语雅思"></a>三.英语雅思</h2><p><strong>目前的准备：</strong></p><ul><li>归纳完成词根词缀</li><li>背完雅思词汇</li><li>背完新概念三前三十篇</li><li>完成近几年的雅思真题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="研究生学习" scheme="https://zybtree.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习计划与总结" scheme="https://zybtree.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>序列与元组</title>
    <link href="https://zybtree.github.io/2019/07/18/%E5%BA%8F%E5%88%97%E4%B8%8E%E5%85%83%E7%BB%84/"/>
    <id>https://zybtree.github.io/2019/07/18/序列与元组/</id>
    <published>2019-07-18T08:07:01.000Z</published>
    <updated>2019-10-18T05:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-序列"><a href="#一-序列" class="headerlink" title="一.序列"></a>一.序列</h2><p>Python有许多复合数据类型，用于将其他值组合在一起。最通用的是列表，它可以写成方括号之间的逗号分隔值（项）列表列表可能包含不同类型的项目，但通常项目都具有相同的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(square)</span><br></pre></td></tr></table></figure><p>像字符串（以及所有其他内置序列类型）一样，列表可以被索引和切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(square[<span class="number">0</span>])</span><br><span class="line">print(square[<span class="number">-1</span>])</span><br><span class="line">print(square[<span class="number">-3</span>:])</span><br><span class="line">print(square[:])</span><br></pre></td></tr></table></figure><p>列表还支持串联等操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(square+[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure><p>内置函数len()也适用于列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(square))</span><br></pre></td></tr></table></figure><p><strong>列表的更多操作：</strong></p><blockquote><ul><li>list.append(x)</li></ul><p>将项添加到列表的末尾。相当于。a[len(a):] = [x]</p><ul><li>list.extend（<strong>可迭代的</strong>）</li></ul><p>通过附加iterable中的所有项来扩展列表。相当于 。a[len(a):] = iterable</p><ul><li>list.insert（i，x ）</li></ul><p>在给定位置插入项目。第一个参数是要插入的元素的索引，因此插入列表的前面，并且等效于。a.insert(0, x)a.insert(len(a), x)a.append(x)</p><ul><li>list.remove（x ）</li></ul><p>从列表中删除值为x的第一个项目。如果没有这样的项目则是错误的。</p><ul><li>list.pop（[ i ] ）</li></ul><p>删除列表中给定位置的项目，然后将其返回。如果未指定索引，则a.pop()删除并返回列表中的最后一项。（方法签名中i周围的方括号表示该参数是可选的，而不是您应该在该位置键入方括号。您将在Python Library Reference中经常看到这种表示法。</p><ul><li>list.clear（)</li></ul><p>从列表中删除所有项目。相当于。del a[:]</p><ul><li>list.index（x [，start [，end ] ] ）</li></ul><p>在值为x的第一个项的列表中返回从零开始的索引。ValueError如果没有这样的项目，则提高a 。</p><p>可选参数start和end被解释为切片表示法，并用于将搜索限制为列表的特定子序列。返回的索引是相对于完整序列的开头而不是start参数计算的。</p><ul><li>list.count（x ）</li></ul><p>返回x出现在列表中的次数。</p><ul><li>list.sort（key = None，reverse = False ）</li></ul><p>对列表中的项目进行排序（参数可用于排序自定义，请参阅sorted()其说明）。</p><ul><li>list.reverse（）</li></ul><p>反转列表中的元素。</p><ul><li>list.copy（）</li></ul><p>返回列表的浅表副本。相当于a[:]。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'banana'</span>, <span class="string">'kiwi'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>]</span><br><span class="line"></span><br><span class="line">print(fruits.count(<span class="string">'apple'</span>))</span><br><span class="line">print(fruits.index(<span class="string">'banana'</span>))</span><br><span class="line">print(fruits.index(<span class="string">'banana'</span>,<span class="number">4</span>))</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.reverse()</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.append(<span class="string">'grape'</span>)</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.extend(<span class="string">'watermallen'</span>)</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.sort()</span><br><span class="line">print(fruits)</span><br><span class="line">print(fruits.pop())</span><br></pre></td></tr></table></figure><p>要实现队列，请使用collections.deque设计为具有快速追加和从两端弹出的队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue = deque([<span class="string">"Eric"</span>, <span class="string">"John"</span>, <span class="string">"Michael"</span>])</span><br><span class="line">print(queue.popleft())</span><br></pre></td></tr></table></figure><p><strong>列表理解</strong></p><p>列表推导提供了创建列表的简明方法。常见的应用是创建新的列表，其中每个元素是应用于另一个序列的每个成员或可迭代的一些操作的结果，或者创建满足特定条件的那些元素的子序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x != <span class="number">0</span>]</span><br><span class="line">print(squares)</span><br><span class="line">List = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure><p>二维数组遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vec = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">vector = [num <span class="keyword">for</span> elem <span class="keyword">in</span> vec <span class="keyword">for</span> num <span class="keyword">in</span> elem]</span><br><span class="line">print(vector)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> vector:</span><br><span class="line">    print(x)</span><br><span class="line">List = [x <span class="keyword">for</span> x <span class="keyword">in</span> vector]</span><br><span class="line">print(List)</span><br><span class="line"><span class="comment"># 不能进行这样的遍历输出 print(x for x in vector)</span></span><br></pre></td></tr></table></figure><p>列表推导可以包含复杂表达式和嵌套函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List = [str(round(pi,i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure><p><strong>嵌套列表理解</strong></p><p>以下列表理解将转置行和列:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Matrix = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">]</span><br><span class="line">ROW = [[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> Matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print(ROW)</span><br><span class="line"></span><br><span class="line">LINE = [line <span class="keyword">for</span> line <span class="keyword">in</span> Matrix]</span><br><span class="line">print(LINE)</span><br></pre></td></tr></table></figure><p><strong>关于del声明:</strong></p><p>有一种方法可以从列表中删除一个项目，而不是它的值：del语句。这与pop()返回值的方法不同。该del语句还可用于从列表中删除切片或清除整个列表（我们之前通过将空列表分配给切片来执行此操作）。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>] </span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span> a[:]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h2 id="二-元组"><a href="#二-元组" class="headerlink" title="二.元组"></a>二.元组</h2><p>尽管元组看起来与列表类似，但它们通常用于不同的情况并用于不同的目的。元组是不可变的，通常包含异构的元素序列，这些元素可以通过解包（参见本节后面部分）或索引（或者甚至是属性的情况下namedtuples）来访问。列表是可变的，它们的元素通常是同类的，可以通过遍历列表来访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span></span><br><span class="line">print(t) </span><br><span class="line">u = t,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(u)</span><br><span class="line">print(t[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>一个特殊的问题是构造包含0或1项的元组：语法有一些额外的怪癖来适应这些。空元组由一对空括号构成; 通过使用逗号跟随值来构造具有一个项目的元组（仅在括号中包含单个值是不够的）。丑陋但有效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stringlen = <span class="string">'hello'</span>,</span><br><span class="line">print(stringlen)</span><br><span class="line">print(len(stringlen))</span><br></pre></td></tr></table></figure><h2 id="三-集合"><a href="#三-集合" class="headerlink" title="三.集合"></a>三.集合</h2><p>python还包括集合的数据类型。集合是无序集合，没有重复元素。基本用途包括成员资格测试和消除重复条目。集合对象还支持数学运算，如并集，交集，差异和对称差异。</p><p>set()可以使用大括号或函数来创建集合。注意：要创建一个空集，你必须使用set()，而不是{}; 后者创建一个空字典，我们将在下一节讨论这个数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">basket = &#123;<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>&#125;</span><br><span class="line">print(basket)</span><br><span class="line"></span><br><span class="line">a = set(<span class="string">'abracadabrabcdef'</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">print(a-b)</span><br><span class="line">print(a|b)</span><br><span class="line">print(a&amp;b)</span><br><span class="line">print(a^b)<span class="comment"># letters in a or b but not both</span></span><br></pre></td></tr></table></figure><h2 id="四-字典"><a href="#四-字典" class="headerlink" title="四.字典"></a>四.字典</h2><p>词典有时在其他语言中被称为“关联记忆”或“关联阵列”。与由一系列数字索引的序列不同，字典由键索引，键可以是任何不可变类型; 字符串和数字总是键。如果元组仅包含字符串，数字或元组，则它们可用作键; 如果元组直接或间接包含任何可变对象，则不能将其用作键。你不能用链表做关键字，因为链表可以用索引赋值，切片赋值，或类似的方法进行修改append()和 extend()。</p><p>最好将字典视为一组无序的键：值对，并要求键是唯一的（在一个字典中）。一对大括号创建一个空字典：{}。在括号内放置以逗号分隔的键：值对列表，将初始键：值对添加到字典中; 这也是字典在输出上的写法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tel = &#123;<span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br><span class="line">tel[<span class="string">'guido'</span>] = <span class="number">4127</span></span><br><span class="line">print(tel)</span><br><span class="line"><span class="keyword">del</span> tel[<span class="string">'sape'</span>]</span><br><span class="line">print(tel)</span><br><span class="line">print(list(tel.keys()))</span><br><span class="line">print(sorted(tel.keys()))</span><br></pre></td></tr></table></figure><p>dict()构造可以直接从键-值对的序列构建字典:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = dict([(<span class="string">'sape'</span>, <span class="number">4139</span>), (<span class="string">'guido'</span>, <span class="number">4127</span>), (<span class="string">'jack'</span>, <span class="number">4098</span>)])</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure><h2 id="五-遍历"><a href="#五-遍历" class="headerlink" title="五.遍历"></a>五.遍历</h2><p><strong>遍历字典：</strong></p><p>循环遍历字典时，可以使用该items()方法同时检索密钥和相应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">knights = &#123;<span class="string">'gallahad'</span>: <span class="string">'pure'</span>, <span class="string">'robin'</span>: <span class="string">'brave'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> knights.items():</span><br><span class="line">    print(x,y)</span><br></pre></td></tr></table></figure><p>循环遍历序列时，可以使用该enumerate()函数同时检索位置索引和相应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(knights.values()):</span><br><span class="line">    print(i,v)</span><br></pre></td></tr></table></figure><p>要同时循环两个或更多个序列，条目可以与该zip()功能配对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">questions = [<span class="string">'name'</span>, <span class="string">'quest'</span>, <span class="string">'favorite color'</span>]</span><br><span class="line">answers = [<span class="string">'lancelot'</span>, <span class="string">'the holy grail'</span>, <span class="string">'blue'</span>]</span><br><span class="line"><span class="keyword">for</span> q,a <span class="keyword">in</span> zip(questions,answers):</span><br><span class="line">    print(<span class="string">'What is your &#123;0&#125; Its is &#123;1&#125;\n'</span>.format(q,a))</span><br></pre></td></tr></table></figure><p>要反向循环序列，首先在正向指定序列，然后调用该reversed()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>要按排序顺序循环序列，请使用sorted()返回新排序列表的函数，同时保持源不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basket = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> sorted(set(basket)):</span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Python" scheme="https://zybtree.github.io/categories/Python/"/>
    
    
      <category term="Python Basic" scheme="https://zybtree.github.io/tags/Python-Basic/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zybtree.github.io/2019/05/06/hello-world/"/>
    <id>https://zybtree.github.io/2019/05/06/hello-world/</id>
    <published>2019-05-06T03:20:46.000Z</published>
    <updated>2019-10-18T05:22:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://zybtree.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://zybtree.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
